# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'app_m2.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QTimer, QTime, Qt
from PySide2.QtCore import (QCoreApplication, QDate, QDateTime, QMetaObject,
    QObject, QPoint, QRect, QSize, QTime, QUrl, Qt)
from PySide2.QtGui import (QBrush, QColor, QConicalGradient, QCursor, QFont,
    QFontDatabase, QIcon, QKeySequence, QLinearGradient, QPalette, QPainter,
    QPixmap, QRadialGradient)
from PySide2.QtWidgets import *
from PySide2.QtCore import QObject, Slot, Signal, QUrl
import tensorflow as tf
from tensorflow import keras
import numpy as np
from numpy import loadtxt
from keras.models import load_model
from skimage.metrics import structural_similarity as ssim
import cv2
import numpy as np
import datetime
import sqlite3
import pandas as pd
import os
os.system('Pyrcc5 logo.qrc -o logo_rc.py')
os.system('Pyrcc5 pic.qrc -o pic_rc.py')
os.system('Pyrcc5 Products2.qrc -o Products2_rc.py')
os.system('Pyrcc5 Products.qrc -o Products_rc.py')
os.system('Pyrcc5 icons_app.qrc -o icons_app_rc.py')
import Products2_rc
import Products_rc
import icons_app_rc
import logo_rc
import pic_rc
import datetime




class Ui_MainWindow(object):
    def imageVG(self):
        self.label_7.show()
        self.label_8.show()
        self.label_9.show()
        now = datetime.datetime.now()
        img1 = cv2.imread('D:/Final Prog5/blackblankpic.png')
        img2 = cv2.imread('D:/Final Prog - Copy44/extracted.jpg')
        img2 = cv2.resize(img2,(1400,800))
        #cv2.imshow("original",img2)
        self.label_7.setText("{} : loading image of the product....".format(now.strftime("%Y-%m-%d %H:%M:%S")))
               

#First get the original image roi
        rows,cols,channels = img2.shape
        roi = img1[0:rows, 0:cols ]
 
 #Original image converted to gray value
        img2gray = cv2.cvtColor(img2,cv2.COLOR_BGR2GRAY)
        cv2.imshow('img2gray',img2gray)

# Now create a mask of img and create its inverse mask also
 # Binarize the gray value to get the ROI area mask
        ret, mask = cv2.threshold(img2gray, 200, 255, cv2.THRESH_BINARY)
        cv2.imshow('mask',mask)

 #ROI mask area reverse mask
        mask_inv = cv2.bitwise_not(mask)
        #cv2.imshow('mask_inv',mask_inv)

        #Mask display background
        # Now black-out the area of logo in ROI
        img1_bg = cv2.bitwise_and(roi,roi,mask = mask_inv)
        #cv2.imshow('img1_bg',img1_bg)


        #Mask display foreground
        img2_fg = cv2.bitwise_and(img2,img2,mask = mask)
        #cv2.imshow('img2_fg',img2_fg)

 
 #Front background image overlay
        dst = cv2.add(img1_bg,img2_fg)
        img1[0:rows, 0:cols ] = dst
 
        #cv2.imshow('res',img1)

#-------------------------------------------
        img_hsv = cv2.cvtColor(img1, cv2.COLOR_BGR2HSV)

        IMG_mint = np.array([0, 0, 40],np.uint8)
        IMG_maxt = np.array([180, 18, 230],np.uint8)
        IMG = cv2.inRange(img_hsv, IMG_mint, IMG_maxt)
        areaArray = []
#count = 1
        contours, _ = cv2.findContours(IMG, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        print("Number of contours found =", len(contours))
        for i, c in enumerate(contours):
            area = cv2.contourArea(c)
            areaArray.append(area)
#first sort the array by area
        sorteddata = sorted(zip(areaArray, contours), key=lambda x: x[0], reverse=True)
#find the nth largest contour [n-1][1], in this case 2
        largestcontour = sorteddata[0][1]

#draw it
        x, y, w, h = cv2.boundingRect(largestcontour)
        cropped = img1[y:y+h, x:x+w]
        contrast = cv2.convertScaleAbs(cropped, alpha=3, beta=0)
#cv2.rectangle(img1, (x, y), (x+w, y+h), (0,255,0), 2)
        #cv2.imshow("cropped",cropped)
        print("x=", x, "y=", y,"w=", w, "h=", h)

#-----------------------------------
        img_blur = cv2.GaussianBlur(cropped, (7, 7), 1)
        img_gray = cv2.cvtColor(img_blur, cv2.COLOR_BGR2GRAY)
        img_canny = cv2.Canny(img_gray, 10, 10)
        #cv2.imshow("img_canny",img_canny)
        contours, hierarchy = cv2.findContours(img_canny,cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)
  

        cv2.drawContours(cropped, contours, -1, (0, 0, 255), 3)
        #cv2.imshow('Contours', cropped)
        cv2.imwrite('result_VG.png', cropped)
        now2 = datetime.datetime.now()
        self.label_8.setText("{} : Defect detection....".format(now2.strftime("%Y-%m-%d %H:%M:%S")))
        vulkan_VG= cv2.imread('result_VG.png')
        vulkan_VG=cv2.resize(vulkan_VG,(900,500))
        piece1 = vulkan_VG[0:250, 0:300]
        piece1=cv2.resize(piece1,(250,165))
        cv2.imwrite('tranche1VG.png', piece1)
        piece2 = vulkan_VG[0:250, 300:600]
        piece2=cv2.resize(piece2,(250,165))
        cv2.imwrite('tranche2VG.png', piece2)
        piece3 = vulkan_VG[0:250, 600:900]
        piece3=cv2.resize(piece3,(250,165))
        cv2.imwrite('tranche3VG.png', piece3)
        piece4 = vulkan_VG[250:600, 0:300]
        piece4=cv2.resize(piece4,(250,165))
        cv2.imwrite('tranche4VG.png', piece4)
        piece5 = vulkan_VG[250:600, 300:600]
        piece5=cv2.resize(piece5,(250,165))
        cv2.imwrite('tranche5VG.png', piece5)
        piece6 = vulkan_VG[250:600, 600:900]
        piece6=cv2.resize(piece6,(250,165))
        cv2.imwrite('tranche6VG.png', piece6)
 

        self.VG_tranche_1.show()
        self.VG_tranche_2.show()
        self.VG_tranche_3.show()
        self.VG_tranche_4.show()
        self.VG_tranche_5.show()
        self.VG_tranche_6.show()
        self.VG_tranche_1.setPixmap(QtGui.QPixmap("tranche1VG.png"))
        self.VG_tranche_2.setPixmap(QtGui.QPixmap("tranche2VG.png"))
        self.VG_tranche_3.setPixmap(QtGui.QPixmap("tranche3VG.png"))
        self.VG_tranche_4.setPixmap(QtGui.QPixmap("tranche4VG.png"))
        self.VG_tranche_5.setPixmap(QtGui.QPixmap("tranche5VG.png"))
        self.VG_tranche_6.setPixmap(QtGui.QPixmap("tranche6VG.png"))
        now3 = datetime.datetime.now()
        self.label_9.setText("{} : Show slices of the product....".format(now3.strftime("%Y-%m-%d %H:%M:%S")))
        
    def Model_VG(self):
       
        
        modelVG1 = load_model('modelprog60_.h5')
        now1 = datetime.datetime.now()
        self.label_7.setText("{} : loading modelVG1....".format(now1.strftime("%Y-%m-%d %H:%M:%S")))
        image_size = (180, 180)
       
        img1 = cv2.imread('D:/Final Prog - Copy44/blankpic.png')
        img2 = cv2.imread('D:/Final Prog - Copy44/extracted.jpg')
        img2 = cv2.resize(img2,(1400,800))
        #cv2.imshow("original",img2)
        now2 = datetime.datetime.now()
        self.label_8.setText("{} : loading image of the product....".format(now2.strftime("%Y-%m-%d %H:%M:%S")))
        

#First get the original image roi
        rows,cols,channels = img2.shape
        roi = img1[0:rows, 0:cols ]
 
 #Original image converted to gray value
        img2gray = cv2.cvtColor(img2,cv2.COLOR_BGR2GRAY)
        #cv2.imshow('img2gray',img2gray)

# Now create a mask of img and create its inverse mask also
 # Binarize the gray value to get the ROI area mask
        ret, mask = cv2.threshold(img2gray, 200, 255, cv2.THRESH_BINARY)
        #cv2.imshow('mask',mask)

 #ROI mask area reverse mask
        mask_inv = cv2.bitwise_not(mask)
        #cv2.imshow('mask_inv',mask_inv)

        #Mask display background
        # Now black-out the area of logo in ROI
        img1_bg = cv2.bitwise_and(roi,roi,mask = mask_inv)
        #cv2.imshow('img1_bg',img1_bg)


        #Mask display foreground
        img2_fg = cv2.bitwise_and(img2,img2,mask = mask)
        #cv2.imshow('img2_fg',img2_fg)

 
 #Front background image overlay
        dst = cv2.add(img1_bg,img2_fg)
        img1[0:rows, 0:cols ] = dst
 
        #cv2.imshow('res',img1)

#-------------------------------------------
        img_hsv = cv2.cvtColor(img1, cv2.COLOR_BGR2HSV)

        IMG_mint = np.array([0, 0, 40],np.uint8)
        IMG_maxt = np.array([180, 18, 230],np.uint8)
        IMG = cv2.inRange(img_hsv, IMG_mint, IMG_maxt)
        areaArray = []
#count = 1
        contours, _ = cv2.findContours(IMG, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        print("Number of contours found =", len(contours))
        for i, c in enumerate(contours):
            area = cv2.contourArea(c)
            areaArray.append(area)
#first sort the array by area
        sorteddata = sorted(zip(areaArray, contours), key=lambda x: x[0], reverse=True)
#find the nth largest contour [n-1][1], in this case 2
        largestcontour = sorteddata[0][1]

#draw it
        x, y, w, h = cv2.boundingRect(largestcontour)
        cropped = img1[y:y+h, x:x+w]
        contrast = cv2.convertScaleAbs(cropped, alpha=3, beta=0)
#cv2.rectangle(img1, (x, y), (x+w, y+h), (0,255,0), 2)
        #cv2.imshow("cropped",cropped)
        print("x=", x, "y=", y,"w=", w, "h=", h)

#-----------------------------------
        img_blur = cv2.GaussianBlur(cropped, (7, 7), 1)
        img_gray = cv2.cvtColor(img_blur, cv2.COLOR_BGR2GRAY)
        img_canny = cv2.Canny(img_gray, 10, 10)
        #cv2.imshow("img_canny",img_canny)
        contours, hierarchy = cv2.findContours(img_canny,cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)
  

        cv2.drawContours(cropped, contours, -1, (0, 0, 255), 3)
       # cv2.imshow('Contours', cropped)
       
        for c in contours:
            area = cv2.contourArea(c)
            if area > 40:
                cv2.drawContours(cropped, contours, -1, (0, 0, 255), 3)
                cnts_VG = list(filter(lambda cnt: cv2.contourArea(cnt)>40,contours))
                textd_VG=("{} ".format(len(cnts_VG)))
               
               
        if (len(cnts_VG)>5):
            self.T1_VG.show()
            self.T1_VG.setText('=> This product is defected')
            print(" This product is defected")
        else:
            self.T1_VG.show()
            self.T1_VG.setText('=> This product is defected')
            print(" This product is not defected")
     
        class_names3_VG = ["Black Marks","Correct","Fingerprint","Scratch","White Marks"]
        vulkan_VG= cv2.imread('D:/Final Prog - Copy44/extracted.jpg')
        vulkan_VG=cv2.resize(vulkan_VG,(900,500))
        piece1 = vulkan_VG[0:250, 0:300]
        cv2.imwrite('piece1VG.png', piece1)
        piece2 = vulkan_VG[0:250, 300:600]
        cv2.imwrite('piece2VG.png', piece2)
        piece3 = vulkan_VG[0:250, 600:900]
        cv2.imwrite('piece3VG.png', piece3)
        piece4 = vulkan_VG[250:600, 0:300]
        cv2.imwrite('piece4VG.png', piece4)
        piece5 = vulkan_VG[250:600, 300:600]
        cv2.imwrite('piece5VG.png', piece5)
        piece6 = vulkan_VG[250:600, 600:900]
        cv2.imwrite('piece6VG.png', piece6)
        path1 = r"piece1VG.png"
        img_VG1 = keras.preprocessing.image.load_img(path1, target_size=(image_size))
        img_array_VG1 = keras.preprocessing.image.img_to_array(img_VG1)
        img_array_VG1 = tf.expand_dims(img_array_VG1, 0)  # Create batch axis
        predictions = modelVG1.predict(img_array_VG1)
        score3_VG = predictions[0]
        self.T2_VG.show()
        self.T2_VG.setText('The tranche1 most likely belongs to {} with a {:.2f} percent confidence.'.format(class_names3_VG[np.argmax(score3_VG)], 100 * np.max(score3_VG)))
        print("The tranche1 most likely belongs to {} with a {:.2f} percent confidence.".format(class_names3_VG[np.argmax(score3_VG)], 100 * np.max(score3_VG)))
        path2 = r"piece2VG.png"
        img_VG2 = keras.preprocessing.image.load_img(path2, target_size=(image_size))
        img_array_VG2 = keras.preprocessing.image.img_to_array(img_VG2)
        img_array_VG2 = tf.expand_dims(img_array_VG2, 0)  # Create batch axis
        predictions = modelVG1.predict(img_array_VG2)
        score4_VG = predictions[0]
        self.T3_VG.show()
        self.T3_VG.setText('The tranche2 most likely belongs to {} with a {:.2f} percent confidence.'.format(class_names3_VG[np.argmax(score4_VG)], 100 * np.max(score4_VG)))
        print("The tranche2 most likely belongs to {} with a {:.2f} percent confidence.".format(class_names3_VG[np.argmax(score4_VG)], 100 * np.max(score4_VG)))
        path3 = r"piece3VG.png"
        img_VG3 = keras.preprocessing.image.load_img(path3, target_size=(image_size))
        img_array_VG3 = keras.preprocessing.image.img_to_array(img_VG3)
        img_array_VG3 = tf.expand_dims(img_array_VG3, 0)  # Create batch axis
        predictions = modelVG1.predict(img_array_VG3)
        score5_VG = predictions[0]
        self.T4_VG.show()
        self.T4_VG.setText('The tranche3 most likely belongs to {} with a {:.2f} percent confidence.'.format(class_names3_VG[np.argmax(score5_VG)], 100 * np.max(score5_VG)))
        print("The tranche3 most likely belongs to {} with a {:.2f} percent confidence.".format(class_names3_VG[np.argmax(score5_VG)], 100 * np.max(score5_VG)))
        path4 = r"piece4VG.png"
        img_VG4 = keras.preprocessing.image.load_img(path4, target_size=(image_size))
        img_array_VG4 = keras.preprocessing.image.img_to_array(img_VG4)
        img_array_VG4 = tf.expand_dims(img_array_VG4, 0)  # Create batch axis
        predictions = modelVG1.predict(img_array_VG4)
        score6_VG = predictions[0]
        self.T5_VG.show()
        self.T5_VG.setText('The tranche4 most likely belongs to {} with a {:.2f} percent confidence.'.format(class_names3_VG[np.argmax(score6_VG)], 100 * np.max(score6_VG)))
        print("The tranche4 most likely belongs to {} with a {:.2f} percent confidence.".format(class_names3_VG[np.argmax(score6_VG)], 100 * np.max(score6_VG)))
        path5 = r"piece5VG.png"
        img_VG5 = keras.preprocessing.image.load_img(path5, target_size=(image_size))
        img_array_VG5 = keras.preprocessing.image.img_to_array(img_VG5)
        img_array_VG5 = tf.expand_dims(img_array_VG5, 0)  # Create batch axis
        predictions = modelVG1.predict(img_array_VG5)
        score7_VG = predictions[0]
        self.T6_VG.show()
        self.T6_VG.setText('The tranche5 most likely belongs to {} with a {:.2f} percent confidence.'.format(class_names3_VG[np.argmax(score7_VG)], 100 * np.max(score7_VG)))
        print("The tranche5 most likely belongs to {} with a {:.2f} percent confidence.".format(class_names3_VG[np.argmax(score7_VG)], 100 * np.max(score7_VG)))

        path6 = r"piece6VG.png"
        img_VG6 = keras.preprocessing.image.load_img(path6, target_size=(image_size))
        img_array_VG6 = keras.preprocessing.image.img_to_array(img_VG6)
        img_array_VG6 = tf.expand_dims(img_array_VG6, 0)  # Create batch axis
        predictions = modelVG1.predict(img_array_VG6)
        score8_VG = predictions[0]
        self.T7_VG.show()
        self.T7_VG.setText('The tranche6 most likely belongs to {} with a {:.2f} percent confidence.'.format(class_names3_VG[np.argmax(score8_VG)], 100 * np.max(score8_VG)))
        print("The tranche6 most likely belongs to {} with a {:.2f} percent confidence.".format(class_names3_VG[np.argmax(score8_VG)], 100 * np.max(score8_VG)))
        now3 = datetime.datetime.now()
        self.label_9.setText("{} : Prediction each Slice....".format(now3.strftime("%Y-%m-%d %H:%M:%S")))
        
        cntst_VG=textd_VG

        path7 = r"D:/PFE/test_pfe1/piece1.png"
        img_VG7 = keras.preprocessing.image.load_img(path7, target_size=(image_size))
        img_array_VG7 = keras.preprocessing.image.img_to_array(img_VG7)
        img_array_VG7 = tf.expand_dims(img_array_VG7, 0)  # Create batch axis
        predictions = modelVG1.predict(img_array_VG7)
        score30_VG = predictions[0]
        print(" {} with a {:.2f} percent confidence.".format(class_names3_VG[np.argmax(score30_VG)], 100 * np.max(score30_VG)))
        
        
        path8 = r"D:/PFE/test1/classification pour product vulkan_test/ProductImages/fingerprint/ihihuh.PNG"
        img_VG8 = keras.preprocessing.image.load_img(path8, target_size=(image_size))
        img_array_VG8 = keras.preprocessing.image.img_to_array(img_VG8)
        img_array_VG8 = tf.expand_dims(img_array_VG8, 0)  # Create batch axis
        predictions = modelVG1.predict(img_array_VG8)
        score40_VG = predictions[0]
        print(" {} with a {:.2f} percent confidence.".format(class_names3_VG[np.argmax(score40_VG)], 100 * np.max(score40_VG)))
  
        path9 = r"D:/PFE/test1/classification pour product vulkan_test/ProductImages/scratch/mùùm.PNG"
        img_VG9 = keras.preprocessing.image.load_img(path9, target_size=(image_size))
        img_array_VG9 = keras.preprocessing.image.img_to_array(img_VG9)
        img_array_VG9 = tf.expand_dims(img_array_VG9, 0)  # Create batch axis
        predictions = modelVG1.predict(img_array_VG9)
        score50_VG = predictions[0]
        print(" {} with a {:.2f} percent confidence.".format(class_names3_VG[np.argmax(score50_VG)], 100 * np.max(score50_VG)))

        path10 = r"D:/PFE/test1/classification pour product vulkan_test/ProductImages/white marks/+5+95+9.PNG"
        img_VG10 = keras.preprocessing.image.load_img(path10, target_size=(image_size))
        img_array_VG10 = keras.preprocessing.image.img_to_array(img_VG10)
        img_array_VG10 = tf.expand_dims(img_array_VG10, 0)  # Create batch axis
        predictions = modelVG1.predict(img_array_VG10)
        score60_VG = predictions[0]
        print(" {} with a {:.2f} percent confidence.".format(class_names3_VG[np.argmax(score60_VG)], 100 * np.max(score60_VG)))
 
        self.total_defect_VG.show()
        self.total_pes_VG.show()
        self.num_defect_VG.show()
        self.num_defect_VG.display(cntst_VG)
        self.d1_VG.setText(class_names3_VG[0])
        self.d2_VG.setText(class_names3_VG[2])
        self.d3_VG.setText(class_names3_VG[3])
        self.d4_VG.setText(class_names3_VG[4])

        self.counter=self.counter + 1
        self.num_pes_VG.show()
        self.num_pes_VG.display(""+str(self.counter))
        now4 = datetime.datetime.now()
        self.label_10.setText("{} : Scanning for black marks....".format(now4.strftime("%Y-%m-%d %H:%M:%S")))

        if (np.argmax(score3_VG)==np.argmax(score30_VG)):
            self.numd1_VG.show()
            self.numd1_VG.display(""+str(self.counter))
        elif (np.argmax(score4_VG)==np.argmax(score30_VG)):
            self.numd1_VG.show()
            self.numd1_VG.display(""+str(self.counter))
        elif (np.argmax(score5_VG)==np.argmax(score30_VG)):
            self.numd1_VG.show()
            self.numd1_VG.display(""+str(self.counter))
        elif (np.argmax(score6_VG)==np.argmax(score30_VG)):
            self.numd1_VG.show()
            self.numd1_VG.display(""+str(self.counter))
        elif (np.argmax(score7_VG)==np.argmax(score30_VG)):
            self.numd1_VG.show()
            self.numd1_VG.display(""+str(self.counter))
        elif (np.argmax(score8_VG)==np.argmax(score30_VG)):
            self.numd1_VG.show()
            self.numd1_VG.display(""+str(self.counter))
        else :
            self.numd1_VG.show()
            self.numd1_VG.display("0")
        now5 = datetime.datetime.now()
        self.label_11.setText("{} : Scanning for Fingerprint....".format(now5.strftime("%Y-%m-%d %H:%M:%S")))
        if (np.argmax(score3_VG)==np.argmax(score40_VG)):
            self.numd2_VG.show()
            self.numd2_VG.display(""+str(self.counter))
        elif (np.argmax(score4_VG)==np.argmax(score40_VG)):
            self.numd2_VG.show()
            self.numd2_VG.display(""+str(self.counter))
        elif (np.argmax(score5_VG)==np.argmax(score40_VG)):
            self.numd2_VG.show()
            self.numd2_VG.display(""+str(self.counter))
        elif (np.argmax(score6_VG)==np.argmax(score40_VG)):
            self.numd2_VG.show()
            self.numd2_VG.display(""+str(self.counter))
        elif (np.argmax(score7_VG)==np.argmax(score40_VG)):
            self.numd2_VG.show()
            self.numd2_VG.display(""+str(self.counter))
        elif (np.argmax(score8_VG)==np.argmax(score40_VG)):
            self.numd2_VG.show()
            self.numd2_VG.display(""+str(self.counter))
        else :
            self.numd2_VG.show()
            self.numd2_VG.display("0")
        now6 = datetime.datetime.now()
        self.label_12.setText("{} : Scanning for scratch....".format(now6.strftime("%Y-%m-%d %H:%M:%S")))
        if (np.argmax(score3_VG)==np.argmax(score50_VG)):
            self.numd3_VG.show()
            self.numd3_VG.display(""+str(self.counter))
        elif (np.argmax(score4_VG)==np.argmax(score50_VG)):
            self.numd3_VG.show()
            self.numd3_VG.display(""+str(self.counter))
        elif (np.argmax(score5_VG)==np.argmax(score50_VG)):
            self.numd3_VG.show()
            self.numd3_VG.display(""+str(self.counter))
        elif (np.argmax(score6_VG)==np.argmax(score50_VG)):
            self.numd3_VG.show()
            self.numd3_VG.display(""+str(self.counter))
        elif (np.argmax(score7_VG)==np.argmax(score50_VG)):
            self.numd3_VG.show()
            self.numd3_VG.display(""+str(self.counter))
        elif (np.argmax(score8_VG)==np.argmax(score50_VG)):
            self.numd3_VG.show()
            self.numd3_VG.display(""+str(self.counter))
        else :
            self.numd3_VG.show()
            self.numd3_VG.display("0")
        now7 = datetime.datetime.now()
        self.label_13.setText("{} : Scanning for white marks....".format(now7.strftime("%Y-%m-%d %H:%M:%S")))
        if (np.argmax(score3_VG)==np.argmax(score60_VG)):
            self.numd4_VG.show()
            self.numd4_VG.display(""+str(self.counter))
        elif (np.argmax(score4_VG)==np.argmax(score60_VG)):
            self.numd4_VG.show()
            self.numd4_VG.display(""+str(self.counter))
        elif (np.argmax(score5_VG)==np.argmax(score60_VG)):
            self.numd4_VG.show()
            self.numd4_VG.display(""+str(self.counter))
        elif (np.argmax(score6_VG)==np.argmax(score60_VG)):
            self.numd4_VG.show()
            self.numd4_VG.display(""+str(self.counter))
        elif (np.argmax(score7_VG)==np.argmax(score60_VG)):
            self.numd4_VG.show()
            self.numd4_VG.display(""+str(self.counter))
        elif (np.argmax(score8_VG)==np.argmax(score60_VG)):
            self.numd4_VG.show()
            self.numd4_VG.display(""+str(self.counter))
        else :
            self.numd4_VG.show()
            self.numd4_VG.display("0")
    def imageVB(self):
        self.label_7.show()
        self.label_8.show()
        self.label_9.show()
        now = datetime.datetime.now()
        img1 = cv2.imread('D:/Final Prog - Copy44/blankpic.png')
        img2 = cv2.imread('D:/Final Prog - Copy44/vulkan_black.jpg')
        self.label_7.setText("{} : loading image of the product....".format(now.strftime("%Y-%m-%d %H:%M:%S")))
        img2 = cv2.resize(img2,(1400,800))
        #cv2.imshow("original",img2)

#First get the original image roi
        rows,cols,channels = img2.shape
        roi = img1[0:rows, 0:cols ]
 
 #Original image converted to gray value
        img2gray = cv2.cvtColor(img2,cv2.COLOR_BGR2GRAY)
        #cv2.imshow('img2gray',img2gray)

# Now create a mask of img and create its inverse mask also
 # Binarize the gray value to get the ROI area mask
        ret, mask = cv2.threshold(img2gray, 200, 255, cv2.THRESH_BINARY)
        #cv2.imshow('mask',mask)

 #ROI mask area reverse mask
        mask_inv = cv2.bitwise_not(mask)
#cv2.imshow('mask_inv',mask_inv)

 #Mask display background
# Now black-out the area of logo in ROI
        img1_bg = cv2.bitwise_and(roi,roi,mask = mask)
        #cv2.imshow('img1_bg',img1_bg)

 
 #Mask display foreground
        img2_fg = cv2.bitwise_and(img2,img2,mask = mask_inv)
        #cv2.imshow('img2_fg',img2_fg)

 
 #Front background image overlay
        dst = cv2.add(img1_bg,img2_fg)
        img1[0:rows, 0:cols ] = dst
 
        #cv2.imshow('res',img1)

#-------------------------------------------
        img_hsv = cv2.cvtColor(img1, cv2.COLOR_BGR2HSV)

        IMG_mint = np.array([0, 0, 0],np.uint8)
        IMG_maxt = np.array([180, 255, 30],np.uint8)
        IMG = cv2.inRange(img_hsv, IMG_mint, IMG_maxt)
        areaArray = []
#count = 1
        contours, _ = cv2.findContours(IMG, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        print("Number of contours found =", len(contours))
        for i, c in enumerate(contours):
            area = cv2.contourArea(c)
            areaArray.append(area)
#first sort the array by area
        sorteddata = sorted(zip(areaArray, contours), key=lambda x: x[0], reverse=True)
#find the nth largest contour [n-1][1], in this case 2
        largestcontour = sorteddata[0][1]

#draw it
        x, y, w, h = cv2.boundingRect(largestcontour)
        cropped = img1[y:y+h, x:x+w]
        contrast = cv2.convertScaleAbs(cropped, alpha=3, beta=0)
#cv2.rectangle(img1, (x, y), (x+w, y+h), (0,255,0), 2)
        #cv2.imshow("cropped",cropped)
        print("x=", x, "y=", y,"w=", w, "h=", h)

#-----------------------------------
        img_blur = cv2.GaussianBlur(cropped, (7, 7), 1)
        img_gray = cv2.cvtColor(img_blur, cv2.COLOR_BGR2GRAY)
        img_canny = cv2.Canny(img_gray, 10, 10)
        #cv2.imshow("img_canny",img_canny)
        contours, hierarchy = cv2.findContours(img_canny,cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)
  

        cv2.drawContours(cropped, contours, -1, (0, 0, 255), 3)
        now2 = datetime.datetime.now()
        self.label_8.setText("{} : Defect detection....".format(now2.strftime("%Y-%m-%d %H:%M:%S")))
        #cv2.imshow('Contours', cropped)
        cv2.imwrite('result_VB.png', cropped)
        vulkan_VB= cv2.imread('result_VB.png')
        vulkan_VB=cv2.resize(vulkan_VB,(900,500))
        piece1 = vulkan_VB[0:250, 0:300]
        cv2.imwrite('tranche1VB.png', piece1)
        piece2 = vulkan_VB[0:250, 300:600]
        cv2.imwrite('tranche2VB.png', piece2)
        piece3 = vulkan_VB[0:250, 600:900]
        cv2.imwrite('tranche3VB.png', piece3)
        piece4 = vulkan_VB[250:600, 0:300]
        cv2.imwrite('tranche4VB.png', piece4)
        piece5 = vulkan_VB[250:600, 300:600]
        cv2.imwrite('tranche5VB.png', piece5)
        piece6 = vulkan_VB[250:600, 600:900]
        cv2.imwrite('tranche6VB.png', piece6)
    
        tranche1= cv2.imread('tranche1VB.png')
        tranche1=cv2.resize(tranche1,(321,276))
        tranche2= cv2.imread('tranche2VB.png')
        tranche2=cv2.resize(tranche2,(321,276))
        tranche3= cv2.imread('tranche3VB.png')
        tranche3=cv2.resize(tranche3,(321,276))
        tranche4= cv2.imread('tranche4VB.png')
        tranche4=cv2.resize(tranche4,(321,276))
        tranche5= cv2.imread('tranche5VB.png')
        tranche5=cv2.resize(tranche5,(321,276))
        tranche6= cv2.imread('tranche6VB.png')
        tranche6=cv2.resize(tranche6,(321,276))  
        self.VB_tranche_1.show()
        self.VB_tranche_2.show()
        self.VB_tranche_3.show()
        self.VB_tranche_4.show()
        self.VB_tranche_5.show()
        self.VB_tranche_6.show()
        self.VB_tranche_1.setPixmap(QtGui.QPixmap("tranche1VB.png"))
        self.VB_tranche_2.setPixmap(QtGui.QPixmap("tranche2VB.png"))
        self.VB_tranche_3.setPixmap(QtGui.QPixmap("tranche3VB.png"))
        self.VB_tranche_4.setPixmap(QtGui.QPixmap("tranche4VB.png"))
        self.VB_tranche_5.setPixmap(QtGui.QPixmap("tranche5VB.png"))
        self.VB_tranche_6.setPixmap(QtGui.QPixmap("tranche6VB.png"))
        now3 = datetime.datetime.now()
        self.label_9.setText("{} : Show slices of the product....".format(now3.strftime("%Y-%m-%d %H:%M:%S")))
    def Model_VB(self):
        modelVB1 = load_model('modelprog6_.h5')
        now = datetime.datetime.now()
        self.label_7.setText("{} : Loading modelVB....".format(now.strftime("%Y-%m-%d %H:%M:%S")))
        image_size = (180, 180)
        
        img1 = cv2.imread('D:/Final Prog - Copy44/blankpic.png')
        img2 = cv2.imread('D:/Final Prog - Copy44/vulkan_black.jpg')
        img2 = cv2.resize(img2,(1400,800))
        now2 = datetime.datetime.now()
        self.label_8.setText("{} : Loading image of the product....".format(now2.strftime("%Y-%m-%d %H:%M:%S")))
        cv2.imshow("original",img2)

#First get the original image roi
        rows,cols,channels = img2.shape
        roi = img1[0:rows, 0:cols ]
 
 #Original image converted to gray value
        img2gray = cv2.cvtColor(img2,cv2.COLOR_BGR2GRAY)
        cv2.imshow('img2gray',img2gray)

# Now create a mask of img and create its inverse mask also
 # Binarize the gray value to get the ROI area mask
        ret, mask = cv2.threshold(img2gray, 200, 255, cv2.THRESH_BINARY)
        cv2.imshow('mask',mask)

 #ROI mask area reverse mask
        mask_inv = cv2.bitwise_not(mask)
#cv2.imshow('mask_inv',mask_inv)

 #Mask display background
# Now black-out the area of logo in ROI
        img1_bg = cv2.bitwise_and(roi,roi,mask = mask)
        cv2.imshow('img1_bg',img1_bg)

 
 #Mask display foreground
        img2_fg = cv2.bitwise_and(img2,img2,mask = mask_inv)
        cv2.imshow('img2_fg',img2_fg)

 
 #Front background image overlay
        dst = cv2.add(img1_bg,img2_fg)
        img1[0:rows, 0:cols ] = dst
 
        cv2.imshow('res',img1)

#-------------------------------------------
        img_hsv = cv2.cvtColor(img1, cv2.COLOR_BGR2HSV)

        IMG_mint = np.array([0, 0, 0],np.uint8)
        IMG_maxt = np.array([180, 255, 30],np.uint8)
        IMG = cv2.inRange(img_hsv, IMG_mint, IMG_maxt)
        areaArray = []
#count = 1
        contours, _ = cv2.findContours(IMG, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        print("Number of contours found =", len(contours))
        for i, c in enumerate(contours):
            area = cv2.contourArea(c)
            areaArray.append(area)
#first sort the array by area
        sorteddata = sorted(zip(areaArray, contours), key=lambda x: x[0], reverse=True)
#find the nth largest contour [n-1][1], in this case 2
        largestcontour = sorteddata[0][1]

#draw it
        x, y, w, h = cv2.boundingRect(largestcontour)
        cropped = img1[y:y+h, x:x+w]
        contrast = cv2.convertScaleAbs(cropped, alpha=3, beta=0)
#cv2.rectangle(img1, (x, y), (x+w, y+h), (0,255,0), 2)
        cv2.imshow("cropped",cropped)
        print("x=", x, "y=", y,"w=", w, "h=", h)

#-----------------------------------
        img_blur = cv2.GaussianBlur(cropped, (7, 7), 1)
        img_gray = cv2.cvtColor(img_blur, cv2.COLOR_BGR2GRAY)
        img_canny = cv2.Canny(img_gray, 10, 10)
        cv2.imshow("img_canny",img_canny)
        contours, hierarchy = cv2.findContours(img_canny,cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)
  

        for c in contours:
            area = cv2.contourArea(c)
            if area > 40:
                cv2.drawContours(cropped, contours, -1, (0, 0, 255), 3)
                cnts_VB = list(filter(lambda cnt: cv2.contourArea(cnt)>40,contours))
                textd_VB=("{} ".format(len(cnts_VB)))
        #cv2.imshow('Contours', result_VB)
        if (len(cnts_VB)>5):
            self.T1_VB.setText('=> This product is defected')
            print(" This product is defected")
        else:
            self.T1_VB.setText('=> This product is defected')
            print(" This product is not defected")
        
        vulkan_VB= cv2.imread('D:/Final Prog - Copy44/extracted.jpg')
        vulkan_VB=cv2.resize(vulkan_VB,(900,500))
        piece1 = vulkan_VB[0:250, 0:300]
        cv2.imwrite('piece1VB.png', piece1)
        piece2 = vulkan_VB[0:250, 300:600]
        cv2.imwrite('piece2VB.png', piece2)
        piece3 = vulkan_VB[0:250, 600:900]
        cv2.imwrite('piece3VB.png', piece3)
        piece4 = vulkan_VB[250:600, 0:300]
        cv2.imwrite('piece4VB.png', piece4)
        piece5 = vulkan_VB[250:600, 300:600]
        cv2.imwrite('piece5VB.png', piece5)
        piece6 = vulkan_VB[250:600, 600:900]
        cv2.imwrite('piece6VB.png', piece6)
       
        class_names3_VB = ["correct","fingerprint","scratch","white marks"]
        path1 = r"piece1VB.png"
        img_VB1 = keras.preprocessing.image.load_img(path1, target_size=(image_size))
        img_array_VB1 = keras.preprocessing.image.img_to_array(img_VB1)
        img_array_VB1 = tf.expand_dims(img_array_VB1, 0)  # Create batch axis
        predictions = modelVB1.predict(img_array_VB1)
        score3_VB = predictions[0]
        self.T2_VB.setText('The tranche1 most likely belongs to {} with a {:.2f} percent confidence.'.format(class_names3_VB[np.argmax(score3_VB)], 100 * np.max(score3_VB)))
        print("The tranche1 most likely belongs to {} with a {:.2f} percent confidence.".format(class_names3_VB[np.argmax(score3_VB)], 100 * np.max(score3_VB)))
        
        path2 = r"piece2VB.png"
        img_VB2 = keras.preprocessing.image.load_img(path2, target_size=(image_size))
        img_array_VB2 = keras.preprocessing.image.img_to_array(img_VB2)
        img_array_VB2 = tf.expand_dims(img_array_VB2, 0)  # Create batch axis
        predictions = modelVB1.predict(img_array_VB2)
        score4_VB = predictions[0]
        self.T3_VB.setText('The tranche2 most likely belongs to {} with a {:.2f} percent confidence.'.format(class_names3_VB[np.argmax(score4_VB)], 100 * np.max(score4_VB)))
        print("The tranche2 most likely belongs to {} with a {:.2f} percent confidence.".format(class_names3_VB[np.argmax(score4_VB)], 100 * np.max(score4_VB)))
       
        path3 = r"piece3VB.png"
        img_VB3 = keras.preprocessing.image.load_img(path3, target_size=(image_size))
        img_array_VB3 = keras.preprocessing.image.img_to_array(img_VB3)
        img_array_VB3 = tf.expand_dims(img_array_VB3, 0)  # Create batch axis
        predictions = modelVB1.predict(img_array_VB3)
        score5_VB = predictions[0]
        self.T4_VB.setText('The tranche3 most likely belongs to {} with a {:.2f} percent confidence.'.format(class_names3_VB[np.argmax(score5_VB)], 100 * np.max(score5_VB)))
        print("The tranche3 most likely belongs to {} with a {:.2f} percent confidence.".format(class_names3_VB[np.argmax(score5_VB)], 100 * np.max(score5_VB)))
        
        path4 = r"piece4VB.png"
        img_VB4 = keras.preprocessing.image.load_img(path4, target_size=(image_size))
        img_array_VB4 = keras.preprocessing.image.img_to_array(img_VB4)
        img_array_VB4 = tf.expand_dims(img_array_VB4, 0)  # Create batch axis
        predictions = modelVB1.predict(img_array_VB4)
        score6_VB = predictions[0]
        self.T5_VB.setText('The tranche4 most likely belongs to {} with a {:.2f} percent confidence.'.format(class_names3_VB[np.argmax(score6_VB)], 100 * np.max(score6_VB)))
        print("The tranche4 most likely belongs to {} with a {:.2f} percent confidence.".format(class_names3_VB[np.argmax(score6_VB)], 100 * np.max(score6_VB)))
        
        path5 = r"piece5VB.png"
        img_VB5 = keras.preprocessing.image.load_img(path5, target_size=(image_size))
        img_array_VB5 = keras.preprocessing.image.img_to_array(img_VB5)
        img_array_VB5 = tf.expand_dims(img_array_VB5, 0)  # Create batch axis
        predictions = modelVB1.predict(img_array_VB5)
        score7_VB = predictions[0]
        self.T6_VB.setText('The tranche5 most likely belongs to {} with a {:.2f} percent confidence.'.format(class_names3_VB[np.argmax(score7_VB)], 100 * np.max(score7_VB)))
        print("The tranche5 most likely belongs to {} with a {:.2f} percent confidence.".format(class_names3_VB[np.argmax(score7_VB)], 100 * np.max(score7_VB)))
   

        path6 = r"piece6VB.png"
        img_VB6 = keras.preprocessing.image.load_img(path6, target_size=(image_size))
        img_array_VB6 = keras.preprocessing.image.img_to_array(img_VB6)
        img_array_VB6 = tf.expand_dims(img_array_VB6, 0)  # Create batch axis
        predictions = modelVB1.predict(img_array_VB6)
        score8_VB = predictions[0]
        self.T7_VB.setText('The tranche6 most likely belongs to {} with a {:.2f} percent confidence.'.format(class_names3_VB[np.argmax(score8_VB)], 100 * np.max(score8_VB)))
        print("The tranche6 most likely belongs to {} with a {:.2f} percent confidence.".format(class_names3_VB[np.argmax(score8_VB)], 100 * np.max(score8_VB)))
        now3 = datetime.datetime.now()
        self.label_9.setText("{} : Prediction each slice of the product....".format(now3.strftime("%Y-%m-%d %H:%M:%S")))
       

        cntst_VB=textd_VB

        path7 = r"D:/PFE/programme 3/classification pour product vulkan_noir/Product_image/fingerprint/2 - Copie (10).PNG"
        img_VB7 = keras.preprocessing.image.load_img(path7, target_size=(image_size))
        img_array_VB7 = keras.preprocessing.image.img_to_array(img_VB7)
        img_array_VB7 = tf.expand_dims(img_array_VB7, 0)  # Create batch axis
        predictions = modelVB1.predict(img_array_VB7)
        score30_VB = predictions[0]
        print(" {} with a {:.2f} percent confidence.".format(class_names3_VB[np.argmax(score30_VB)], 100 * np.max(score30_VB)))
        self.label_23.setText("Prediction Slice Fingerprint....")

        
        path8 = r"D:/PFE/programme 3/classification pour product vulkan_noir/Product_image/scratch/piece3 - Copie (10).png"
        img_VB8 = keras.preprocessing.image.load_img(path8, target_size=(image_size))
        img_array_VB8 = keras.preprocessing.image.img_to_array(img_VB8)
        img_array_VB8 = tf.expand_dims(img_array_VB8, 0)  # Create batch axis
        predictions = modelVB1.predict(img_array_VB8)
        score40_VB = predictions[0]
        print(" {} with a {:.2f} percent confidence.".format(class_names3_VB[np.argmax(score40_VB)], 100 * np.max(score40_VB)))
        self.label_24.setText("Prediction Slice Scratch....")

        path9 = r"D:/test_pfe11/piece26.png"
        img_VB9 = keras.preprocessing.image.load_img(path9, target_size=(image_size))
        img_array_VB9 = keras.preprocessing.image.img_to_array(img_VB9)
        img_array_VB9 = tf.expand_dims(img_array_VB9, 0)  # Create batch axis
        predictions = modelVB1.predict(img_array_VB9)
        score50_VB = predictions[0]
        print(" {} with a {:.2f} percent confidence.".format(class_names3_VB[np.argmax(score50_VB)], 100 * np.max(score50_VB)))
        self.label_25.setText("Prediction Slice White marks....")
       
        
        self.total_defect_VB.setText("Total Defects")
        self.total_pes_VB.setText("Total Parts")
        self.num_defect_VB.display(cntst_VB)
        self.d1_VB.setText(class_names3_VB[1])
        self.d2_VB.setText(class_names3_VB[2])
        self.d3_VB.setText(class_names3_VB[3])
       

        self.counter=self.counter + 1
        self.num_pes_VB.display(""+str(self.counter))
        now4 = datetime.datetime.now()
        self.label_10.setText("{} : Scanning for fingerprint....".format(now4.strftime("%Y-%m-%d %H:%M:%S")))

        if (np.argmax(score3_VB)==np.argmax(score30_VB)):
            self.numd1_VB.display(""+str(self.counter))
        elif (np.argmax(score4_VB)==np.argmax(score30_VB)):
            self.numd1_VB.display(""+str(self.counter))
        elif (np.argmax(score5_VB)==np.argmax(score30_VB)):
            self.numd1_VB.display(""+str(self.counter))
        elif (np.argmax(score6_VB)==np.argmax(score30_VB)):
            self.numd1_VB.display(""+str(self.counter))
        elif (np.argmax(score7_VB)==np.argmax(score30_VB)):
            self.numd1_VB.display(""+str(self.counter))
        elif (np.argmax(score8_VB)==np.argmax(score30_VB)):
            self.numd1_VB.display(""+str(self.counter))
        else :
            self.numd1_VB.display("0")
        now5 = datetime.datetime.now()
        self.label_11.setText("{} : Scanning for scratch....".format(now5.strftime("%Y-%m-%d %H:%M:%S")))

        if (np.argmax(score3_VB)==np.argmax(score40_VB)):
            self.numd2_VB.display(""+str(self.counter))
        elif (np.argmax(score4_VB)==np.argmax(score40_VB)):
            self.numd2_VB.display(""+str(self.counter))
        elif (np.argmax(score5_VB)==np.argmax(score40_VB)):
            self.numd2_VB.display(""+str(self.counter))
        elif (np.argmax(score6_VB)==np.argmax(score40_VB)):
            self.numd2_VB.display(""+str(self.counter))
        elif (np.argmax(score7_VB)==np.argmax(score40_VB)):
            self.numd2_VB.display(""+str(self.counter))
        elif (np.argmax(score8_VB)==np.argmax(score40_VB)):
            self.numd2_VB.display(""+str(self.counter))
        else :
            self.numd2_VB.display("0")
        now6 = datetime.datetime.now()
        self.label_12.setText("{} : Scanning for white marks....".format(now6.strftime("%Y-%m-%d %H:%M:%S")))

        if (np.argmax(score3_VB)==np.argmax(score50_VB)):
            self.numd3_VB.display(""+str(self.counter))
        elif (np.argmax(score4_VB)==np.argmax(score50_VB)):
            self.numd3_VB.display(""+str(self.counter))
        elif (np.argmax(score5_VB)==np.argmax(score50_VB)):
            self.numd3_VB.display(""+str(self.counter))
        elif (np.argmax(score6_VB)==np.argmax(score50_VB)):
            self.numd3_VB.display(""+str(self.counter))
        elif (np.argmax(score7_VB)==np.argmax(score50_VB)):
            self.numd3_VB.display(""+str(self.counter))
        elif (np.argmax(score8_VB)==np.argmax(score50_VB)):
            self.numd3_VB.display(""+str(self.counter))
        else :
            self.numd3_VB.display("0")
        self.label_30.setText("get number defect White marks....")
    def imageVT(self):
        now = datetime.datetime.now()
        image = cv2.imread('D:/Final Prog5/transparent.jpg')
        self.label_7.setText("{} : loading image of the product....".format(now.strftime("%Y-%m-%d %H:%M:%S")))
        image = cv2.resize(image,(1400,800))
        #cv2.imshow("original",image)

        #-----------------------------------------------------------------
        gray_scale=False
        if gray_scale:
           image_src = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
        else:
           image_src = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

        if not gray_scale:
            r_image, g_image, b_image = cv2.split(image_src)

            r_image_eq = cv2.equalizeHist(r_image)
            g_image_eq = cv2.equalizeHist(g_image)
            b_image_eq = cv2.equalizeHist(b_image)

            image_eq = cv2.merge((r_image_eq, g_image_eq, b_image_eq))
            cmap_val = None
        else:
             image_eq = cv2.equalizeHist(image_src)
             cmap_val = 'gray'

        #cv2.imshow("original",image_src)
        #cv2.imshow("equalizeHist",image_eq)

        # Denoising
        dst = cv2.fastNlMeansDenoisingColored(image_eq,None,10,10,7,21)

        b,g,r = cv2.split(dst)           # get b,g,r
        rgb_dst = cv2.merge([r,g,b])     # switch it to rgb

        #--------------------------------------------------------

        img_hsv = cv2.cvtColor(rgb_dst, cv2.COLOR_BGR2HSV)

        IMG_mint = np.array([0, 0, 40],np.uint8)
        IMG_maxt = np.array([180, 18, 230],np.uint8)
        IMG = cv2.inRange(img_hsv, IMG_mint, IMG_maxt)
        areaArray = []
        #count = 1
        contours, _ = cv2.findContours(IMG, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        print("Number of contours found =", len(contours))
        for i, c in enumerate(contours):
            area = cv2.contourArea(c)
            areaArray.append(area)
        #first sort the array by area
        sorteddata = sorted(zip(areaArray, contours), key=lambda x: x[0], reverse=True)
        #find the nth largest contour [n-1][1], in this case 2
        largestcontour = sorteddata[0][1]

        #draw it
        x, y, w, h = cv2.boundingRect(largestcontour)
        cropped = rgb_dst[y:y+h, x:x+w]
        contrast = cv2.convertScaleAbs(cropped, alpha=3, beta=0)
        #cv2.rectangle(img, (x, y), (x+w, y+h), (0,255,0), 2)
        #cv2.imshow("cropped",cropped)
        print("x=", x, "y=", y,"w=", w, "h=", h)

        #----------------------------------------------
        img_blur = cv2.GaussianBlur(cropped, (7, 7), 1)
        img_gray = cv2.cvtColor(img_blur, cv2.COLOR_BGR2GRAY)
        img_canny = cv2.Canny(img_gray, 20, 50)
        #cv2.imshow("img_canny",img_canny)
        contours, hierarchy = cv2.findContours(img_canny,  
        cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)
        now2 = datetime.datetime.now()
        self.label_8.setText("{} : Defect detection....".format(now2.strftime("%Y-%m-%d %H:%M:%S")))
        cv2.drawContours(cropped, contours, -1, (0, 0, 255), 3)
        
        #cv2.imshow('Contours', cropped)

        cv2.imwrite('PD_VT.png', cropped)
        vulkan= cv2.imread('PD_VT.png')
        vulkan=cv2.resize(vulkan,(900,500))
        piece1 = vulkan[0:250, 0:300]
        cv2.imwrite('tranche1VT.png', piece1)
        piece2 = vulkan[0:250, 300:600]
        cv2.imwrite('tranche2VT.png', piece2)
        piece3 = vulkan[0:250, 600:900]
        cv2.imwrite('tranche3VT.png', piece3)
        piece4 = vulkan[250:600, 0:300]
        cv2.imwrite('tranche4VT.png', piece4)
        piece5 = vulkan[250:600, 300:600]
        cv2.imwrite('tranche5VT.png', piece5)
        piece6 = vulkan[250:600, 600:900]
        cv2.imwrite('tranche6VT.png', piece6)
      
        
        self.VT_tranche_1.setPixmap(QtGui.QPixmap("tranche1VT.png"))
        self.VT_tranche_2.setPixmap(QtGui.QPixmap("tranche2VT.png"))
        self.VT_tranche_3.setPixmap(QtGui.QPixmap("tranche3VT.png"))
        self.VT_tranche_4.setPixmap(QtGui.QPixmap("tranche4VT.png"))
        self.VT_tranche_5.setPixmap(QtGui.QPixmap("tranche5VT.png"))
        self.VT_tranche_6.setPixmap(QtGui.QPixmap("tranche6VT.png"))
        now3 = datetime.datetime.now()
        self.label_9.setText("{} : Show each slice of the product....".format(now3.strftime("%Y-%m-%d %H:%M:%S")))
    def Model_VT(self):
        modelVT1 = load_model('modelprog5_.h5')
        now = datetime.datetime.now()
        self.label_7.setText("{} : Loading modelVT....".format(now.strftime("%Y-%m-%d %H:%M:%S")))
        image_size = (180, 180)
        
        image = cv2.imread('D:/Final Prog5/transparent.jpg')
        image = cv2.resize(image,(1400,800))
        #cv2.imshow("original",image)
        now2 = datetime.datetime.now()
        self.label_8.setText("{} : Loading image of the product....".format(now2.strftime("%Y-%m-%d %H:%M:%S")))

        #-----------------------------------------------------------------
        gray_scale=False
        if gray_scale:
           image_src = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
        else:
           image_src = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

        if not gray_scale:
            r_image, g_image, b_image = cv2.split(image_src)

            r_image_eq = cv2.equalizeHist(r_image)
            g_image_eq = cv2.equalizeHist(g_image)
            b_image_eq = cv2.equalizeHist(b_image)

            image_eq = cv2.merge((r_image_eq, g_image_eq, b_image_eq))
            cmap_val = None
        else:
             image_eq = cv2.equalizeHist(image_src)
             cmap_val = 'gray'

        #cv2.imshow("original",image_src)
        #cv2.imshow("equalizeHist",image_eq)

        # Denoising
        dst = cv2.fastNlMeansDenoisingColored(image_eq,None,10,10,7,21)

        b,g,r = cv2.split(dst)           # get b,g,r
        rgb_dst = cv2.merge([r,g,b])     # switch it to rgb

        #--------------------------------------------------------

        img_hsv = cv2.cvtColor(rgb_dst, cv2.COLOR_BGR2HSV)

        IMG_mint = np.array([0, 0, 40],np.uint8)
        IMG_maxt = np.array([180, 18, 230],np.uint8)
        IMG = cv2.inRange(img_hsv, IMG_mint, IMG_maxt)
        areaArray = []
        #count = 1
        contours, _ = cv2.findContours(IMG, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        print("Number of contours found =", len(contours))
        for i, c in enumerate(contours):
            area = cv2.contourArea(c)
            areaArray.append(area)
        #first sort the array by area
        sorteddata = sorted(zip(areaArray, contours), key=lambda x: x[0], reverse=True)
        #find the nth largest contour [n-1][1], in this case 2
        largestcontour = sorteddata[0][1]

        #draw it
        x, y, w, h = cv2.boundingRect(largestcontour)
        cropped = rgb_dst[y:y+h, x:x+w]
        contrast = cv2.convertScaleAbs(cropped, alpha=3, beta=0)
        #cv2.rectangle(img, (x, y), (x+w, y+h), (0,255,0), 2)
        #cv2.imshow("cropped",cropped)
        print("x=", x, "y=", y,"w=", w, "h=", h)

        #----------------------------------------------
        img_blur = cv2.GaussianBlur(cropped, (7, 7), 1)
        img_gray = cv2.cvtColor(img_blur, cv2.COLOR_BGR2GRAY)
        img_canny = cv2.Canny(img_gray, 20, 50)
        #cv2.imshow("img_canny",img_canny)
        contours, hierarchy = cv2.findContours(img_canny,cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)

        for c in contours:
            area = cv2.contourArea(c)
            if area > 40:
                cv2.drawContours(cropped, contours, -1, (0, 0, 255), 3)
                cnts_VT = list(filter(lambda cnt: cv2.contourArea(cnt)>40,contours))
                textd_VT=("{} ".format(len(cnts_VT)))
        if (len(cnts_VT)>5):
            self.T1_VT.setText('=> This product is defected')
            print(" This product is defected")
        else:
            self.T1_VT.setText('=> This product is defected')
            print(" This product is not defected")
        
        class_names3_VT = ["black marks","correct","fingerprint","scratch","white marks"]
        vulkan= cv2.imread('D:/Final Prog - Copy44/5.PNG')
        vulkan=cv2.resize(vulkan,(900,500))
        piece1 = vulkan[0:250, 0:300]
        cv2.imwrite('piece1VT.png', piece1)
        piece2 = vulkan[0:250, 300:600]
        cv2.imwrite('piece2VT.png', piece2)
        piece3 = vulkan[0:250, 600:900]
        cv2.imwrite('piece3VT.png', piece3)
        piece4 = vulkan[250:600, 0:300]
        cv2.imwrite('piece4VT.png', piece4)
        piece5 = vulkan[250:600, 300:600]
        cv2.imwrite('piece5VT.png', piece5)
        piece6 = vulkan[250:600, 600:900]
        cv2.imwrite('piece6VT.png', piece6)
        path1 = r"piece1VT.png"
        img_VT1 = keras.preprocessing.image.load_img(path1, target_size=(image_size))
        img_array_VT1 = keras.preprocessing.image.img_to_array(img_VT1)
        img_array_VT1 = tf.expand_dims(img_array_VT1, 0)  # Create batch axis
        predictions = modelVT1.predict(img_array_VT1)
        score3_VT = predictions[0]
        self.T2_VT.setText('The tranche1 most likely belongs to {} with a {:.2f} percent confidence.'.format(class_names3_VT[np.argmax(score3_VT)], 100 * np.max(score3_VT)))
        print("The tranche1 most likely belongs to {} with a {:.2f} percent confidence.".format(class_names3_VT[np.argmax(score3_VT)], 100 * np.max(score3_VT)))
        self.label_11.setText("Prediction Slice1....")
        path2 = r"piece2VT.png"
        img_VT2 = keras.preprocessing.image.load_img(path2, target_size=(image_size))
        img_array_VT2 = keras.preprocessing.image.img_to_array(img_VT2)
        img_array_VT2 = tf.expand_dims(img_array_VT2, 0)  # Create batch axis
        predictions = modelVT1.predict(img_array_VT2)
        score4_VT = predictions[0]
        self.T3_VT.setText('The tranche2 most likely belongs to {} with a {:.2f} percent confidence.'.format(class_names3_VT[np.argmax(score4_VT)], 100 * np.max(score4_VT)))
        print("The tranche2 most likely belongs to {} with a {:.2f} percent confidence.".format(class_names3_VT[np.argmax(score4_VT)], 100 * np.max(score4_VT)))
       
        path3 = r"piece3VT.png"
        img_VT3 = keras.preprocessing.image.load_img(path3, target_size=(image_size))
        img_array_VT3 = keras.preprocessing.image.img_to_array(img_VT3)
        img_array_VT3 = tf.expand_dims(img_array_VT3, 0)  # Create batch axis
        predictions = modelVT1.predict(img_array_VT3)
        score5_VT = predictions[0]
        self.T4_VT.setText('The tranche3 most likely belongs to {} with a {:.2f} percent confidence.'.format(class_names3_VT[np.argmax(score5_VT)], 100 * np.max(score5_VT)))
        print("The tranche3 most likely belongs to {} with a {:.2f} percent confidence.".format(class_names3_VT[np.argmax(score5_VT)], 100 * np.max(score5_VT)))

        path4 = r"piece4VT.png"
        img_VT4 = keras.preprocessing.image.load_img(path4, target_size=(image_size))
        img_array_VT4 = keras.preprocessing.image.img_to_array(img_VT4)
        img_array_VT4 = tf.expand_dims(img_array_VT4, 0)  # Create batch axis
        predictions = modelVT1.predict(img_array_VT4)
        score6_VT = predictions[0]
        self.T5_VT.setText('The tranche4 most likely belongs to {} with a {:.2f} percent confidence.'.format(class_names3_VT[np.argmax(score6_VT)], 100 * np.max(score6_VT)))
        print("The tranche4 most likely belongs to {} with a {:.2f} percent confidence.".format(class_names3_VT[np.argmax(score6_VT)], 100 * np.max(score6_VT)))
       
        path5 = r"piece5VT.png"
        img_VT5 = keras.preprocessing.image.load_img(path5, target_size=(image_size))
        img_array_VT5 = keras.preprocessing.image.img_to_array(img_VT5)
        img_array_VT5 = tf.expand_dims(img_array_VT5, 0)  # Create batch axis
        predictions = modelVT1.predict(img_array_VT5)
        score7_VT = predictions[0]
        self.T6_VT.setText('The tranche5 most likely belongs to {} with a {:.2f} percent confidence.'.format(class_names3_VT[np.argmax(score7_VT)], 100 * np.max(score7_VT)))
        print("The tranche5 most likely belongs to {} with a {:.2f} percent confidence.".format(class_names3_VT[np.argmax(score7_VT)], 100 * np.max(score7_VT)))
    

        path6 = r"piece6VT.png"
        img_VT6 = keras.preprocessing.image.load_img(path6, target_size=(image_size))
        img_array_VT6 = keras.preprocessing.image.img_to_array(img_VT6)
        img_array_VT6 = tf.expand_dims(img_array_VT6, 0)  # Create batch axis
        predictions = modelVT1.predict(img_array_VT6)
        score8_VT = predictions[0]
        self.T7_VT.setText('The tranche6 most likely belongs to {} with a {:.2f} percent confidence.'.format(class_names3_VT[np.argmax(score8_VT)], 100 * np.max(score8_VT)))
        print("The tranche6 most likely belongs to {} with a {:.2f} percent confidence.".format(class_names3_VT[np.argmax(score8_VT)], 100 * np.max(score8_VT)))
        now3 = datetime.datetime.now()
        self.label_9.setText("{} : Prediction each slice of the product....".format(now3.strftime("%Y-%m-%d %H:%M:%S")))
        
        cntst_VT=textd_VT

        path7 = r"D:/PFE/programme 3/classification pour product vulkan_transparent/Product_image/black marks/IMG_20210330_111705 - Copie (3).jpg"
        img_VT7 = keras.preprocessing.image.load_img(path7, target_size=(image_size))
        img_array_VT7 = keras.preprocessing.image.img_to_array(img_VT7)
        img_array_VT7 = tf.expand_dims(img_array_VT7, 0)  # Create batch axis
        predictions = modelVT1.predict(img_array_VT7)
        score30_VT = predictions[0]
        print(" {} with a {:.2f} percent confidence.".format(class_names3_VT[np.argmax(score30_VT)], 100 * np.max(score30_VT)))
      
        
        path8 = r"D:/PFE/programme 3/classification pour product vulkan_transparent/Product_image/fingerprint/2 - Copie (2).PNG"
        img_VT8 = keras.preprocessing.image.load_img(path8, target_size=(image_size))
        img_array_VT8 = keras.preprocessing.image.img_to_array(img_VT8)
        img_array_VT8 = tf.expand_dims(img_array_VT8, 0)  # Create batch axis
        predictions = modelVT1.predict(img_array_VT8)
        score40_VT = predictions[0]
        print(" {} with a {:.2f} percent confidence.".format(class_names3_VT[np.argmax(score40_VT)], 100 * np.max(score40_VT)))
       

        path9 = r"D:/test_pfe11/piece35.png"
        img_VT9 = keras.preprocessing.image.load_img(path9, target_size=(image_size))
        img_array_VT9 = keras.preprocessing.image.img_to_array(img_VT9)
        img_array_VT9 = tf.expand_dims(img_array_VT9, 0)  # Create batch axis
        predictions = modelVT1.predict(img_array_VT9)
        score50_VT = predictions[0]
        print(" {} with a {:.2f} percent confidence.".format(class_names3_VT[np.argmax(score50_VT)], 100 * np.max(score50_VT)))


        path10 = r"D:/test_pfe11/piece25.png"
        img_VT10 = keras.preprocessing.image.load_img(path10, target_size=(image_size))
        img_array_VT10 = keras.preprocessing.image.img_to_array(img_VT10)
        img_array_VT10 = tf.expand_dims(img_array_VT10, 0)  # Create batch axis
        predictions = modelVT1.predict(img_array_VT10)
        score60_VT = predictions[0]
        print(" {} with a {:.2f} percent confidence.".format(class_names3_VT[np.argmax(score60_VT)], 100 * np.max(score60_VT)))
    
        
        self.total_defect_VT.setText("Total Defects")
        self.total_pes_VT.setText("Total Parts")
        self.num_defect_VT.display(cntst_VT)
        self.d1_VT.setText(class_names3_VT[0])
        self.d2_VT.setText(class_names3_VT[2])
        self.d3_VT.setText(class_names3_VT[3])
        self.d4_VT.setText(class_names3_VT[4])

        self.counter=self.counter + 1
        self.num_pes_VT.display(""+str(self.counter))
        self.label_28.setText("get number Pes....")
        now4 = datetime.datetime.now()
        self.label_10.setText("{} : Scanning for black marks....".format(now4.strftime("%Y-%m-%d %H:%M:%S")))

        if (np.argmax(score3_VT)==np.argmax(score30_VT)):
            self.numd1_VT.display(""+str(self.counter))
        elif (np.argmax(score4_VT)==np.argmax(score30_VT)):
            self.numd1_VT.display(""+str(self.counter))
        elif (np.argmax(score5_VT)==np.argmax(score30_VT)):
            self.numd1_VT.display(""+str(self.counter))
        elif (np.argmax(score6_VT)==np.argmax(score30_VT)):
            self.numd1_VT.display(""+str(self.counter))
        elif (np.argmax(score7_VT)==np.argmax(score30_VT)):
            self.numd1_VT.display(""+str(self.counter))
        elif (np.argmax(score8_VT)==np.argmax(score30_VT)):
            self.numd1_VT.display(""+str(self.counter))
        else :
            self.numd1_VT.display("0")
        now5 = datetime.datetime.now()
        self.label_11.setText("{} : Scanning for fingerprint....".format(now5.strftime("%Y-%m-%d %H:%M:%S")))

        if (np.argmax(score3_VT)==np.argmax(score40_VT)):
            self.numd2_VT.display(""+str(self.counter))
        elif (np.argmax(score4_VT)==np.argmax(score40_VT)):
            self.numd2_VT.display(""+str(self.counter))
        elif (np.argmax(score5_VT)==np.argmax(score40_VT)):
            self.numd2_VT.display(""+str(self.counter))
        elif (np.argmax(score6_VT)==np.argmax(score40_VT)):
            self.numd2_VT.display(""+str(self.counter))
        elif (np.argmax(score7_VT)==np.argmax(score40_VT)):
            self.numd2_VT.display(""+str(self.counter))
        elif (np.argmax(score8_VT)==np.argmax(score40_VT)):
            self.numd2_VT.display(""+str(self.counter))
        else :
            self.numd2_VT.display("0")
        now6 = datetime.datetime.now()
        self.label_12.setText("{} : Scanning for Scratch....".format(now6.strftime("%Y-%m-%d %H:%M:%S")))

        if (np.argmax(score3_VT)==np.argmax(score50_VT)):
            self.numd3_VT.display(""+str(self.counter))
        elif (np.argmax(score4_VT)==np.argmax(score50_VT)):
            self.numd3_VT.display(""+str(self.counter))
        elif (np.argmax(score5_VT)==np.argmax(score50_VT)):
            self.numd3_VT.display(""+str(self.counter))
        elif (np.argmax(score6_VT)==np.argmax(score50_VT)):
            self.numd3_VT.display(""+str(self.counter))
        elif (np.argmax(score7_VT)==np.argmax(score50_VT)):
            self.numd3_VT.display(""+str(self.counter))
        elif (np.argmax(score8_VT)==np.argmax(score50_VT)):
            self.numd3_VT.display(""+str(self.counter))
        else :
            self.numd3_VT.display("0")
        now7 = datetime.datetime.now()
        self.label_13.setText("{} : Scanning for White marks....".format(now7.strftime("%Y-%m-%d %H:%M:%S")))

        if (np.argmax(score3_VT)==np.argmax(score60_VT)):
            self.numd4_VT.display(""+str(self.counter))
        elif (np.argmax(score4_VT)==np.argmax(score60_VT)):
            self.numd4_VT.display(""+str(self.counter))
        elif (np.argmax(score5_VT)==np.argmax(score60_VT)):
            self.numd4_VT.display(""+str(self.counter))
        elif (np.argmax(score6_VT)==np.argmax(score60_VT)):
            self.numd4_VT.display(""+str(self.counter))
        elif (np.argmax(score7_VT)==np.argmax(score60_VT)):
            self.numd4_VT.display(""+str(self.counter))
        elif (np.argmax(score8_VT)==np.argmax(score60_VT)):
            self.numd4_VT.display(""+str(self.counter))
        else :
            self.numd4_VT.display("0")
    def imageW(self):
        now = datetime.datetime.now()
        self.label_7.setText("{} : Loading image of the product....".format(now.strftime("%Y-%m-%d %H:%M:%S")))
        img1 = cv2.imread('D:/Final Prog5/blackblankpic.png')
        img2 = cv2.imread('D:/Final Prog5/Photo-0 (2).jpg')
        img2 = cv2.resize(img2,(1400,800))
        #cv2.imshow("original",img2)

        #First get the original image roi
        rows,cols,channels = img2.shape
        roi = img1[0:rows, 0:cols ]

        #Original image converted to gray value
        img2gray = cv2.cvtColor(img2,cv2.COLOR_BGR2GRAY)
        #cv2.imshow('img2gray',img2gray)

        # Now create a mask of img and create its inverse mask also
        # Binarize the gray value to get the ROI area mask
        ret, mask = cv2.threshold(img2gray, 200, 255, cv2.THRESH_BINARY)
        #cv2.imshow('mask',mask)

        #ROI mask area reverse mask
        mask_inv = cv2.bitwise_not(mask)
        #cv2.imshow('mask_inv',mask_inv)

        #Mask display background
        # Now black-out the area of logo in ROI
        img1_bg = cv2.bitwise_and(roi,roi,mask = mask_inv)
        #cv2.imshow('img1_bg',img1_bg)


        #Mask display foreground
        img2_fg = cv2.bitwise_and(img2,img2,mask = mask)
        #cv2.imshow('img2_fg',img2_fg)


        #Front background image overlay
        dst = cv2.add(img1_bg,img2_fg)
        img1[0:rows, 0:cols ] = dst

        #cv2.imshow('res',img1)

        #-------------------------------------------
        img_hsv = cv2.cvtColor(img1, cv2.COLOR_BGR2HSV)

        IMG_mint = np.array([0, 0, 23],np.uint8)
        IMG_maxt = np.array([180, 18, 255],np.uint8)
        IMG = cv2.inRange(img_hsv, IMG_mint, IMG_maxt)
        areaArray = []
        #count = 1
        contours, _ = cv2.findContours(IMG, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        print("Number of contours found =", len(contours))
        for i, c in enumerate(contours):
            area = cv2.contourArea(c)
            areaArray.append(area)
        #first sort the array by area
        sorteddata = sorted(zip(areaArray, contours), key=lambda x: x[0], reverse=True)
        #find the nth largest contour [n-1][1], in this case 2
        largestcontour = sorteddata[0][1]

        #draw it
        x, y, w, h = cv2.boundingRect(largestcontour)
        cropped = img1[y:y+h, x:x+w]
        contrast = cv2.convertScaleAbs(cropped, alpha=3, beta=0)
        #cv2.rectangle(img1, (x, y), (x+w, y+h), (0,255,0), 2)
        #cv2.imshow("cropped",cropped)
        print("x=", x, "y=", y,"w=", w, "h=", h)

        #-----------------------------------
        img_blur = cv2.GaussianBlur(cropped, (7, 7), 1)
        img_gray = cv2.cvtColor(img_blur, cv2.COLOR_BGR2GRAY)
        img_canny = cv2.Canny(img_gray, 10, 10)
        #cv2.imshow("img_canny",img_canny)
        contours, hierarchy = cv2.findContours(img_canny,  
        cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)


        cv2.drawContours(cropped, contours, -1, (0, 0, 255), 3)
        
        
        #cv2.imshow('Contours', cropped)
        cv2.imwrite('result_W.png', cropped)
        now2 = datetime.datetime.now()
        self.label_8.setText("{} : Defect detection....".format(now2.strftime("%Y-%m-%d %H:%M:%S")))
        vulkan_W= cv2.imread('result_W.png')
        vulkan_W=cv2.resize(vulkan_W,(900,500))
        piece1 = vulkan_W[0:250, 0:300]
        cv2.imwrite('tranche1W.png', piece1)
        piece2 = vulkan_W[0:250, 300:600]
        cv2.imwrite('tranche2W.png', piece2)
        piece3 = vulkan_W[0:250, 600:900]
        cv2.imwrite('tranche3W.png', piece3)
        piece4 = vulkan_W[250:600, 0:300]
        cv2.imwrite('tranche4W.png', piece4)
        piece5 = vulkan_W[250:600, 300:600]
        cv2.imwrite('tranche5W.png', piece5)
        piece6 = vulkan_W[250:600, 600:900]
        cv2.imwrite('tranche6W.png', piece6)
    
        tranche1= cv2.imread('tranche1W.png')
        tranche1=cv2.resize(tranche1,(321,276))
        tranche2= cv2.imread('tranche2W.png')
        tranche2=cv2.resize(tranche2,(321,276))
        tranche3= cv2.imread('tranche3W.png')
        tranche3=cv2.resize(tranche3,(321,276))
        tranche4= cv2.imread('tranche4W.png')
        tranche4=cv2.resize(tranche4,(321,276))
        tranche5= cv2.imread('tranche5W.png')
        tranche5=cv2.resize(tranche5,(321,276))
        tranche6= cv2.imread('tranche6W.png')
        tranche6=cv2.resize(tranche6,(321,276))  
        
        self.W_tranche_1.setPixmap(QtGui.QPixmap("tranche1W.png"))
        self.W_tranche_2.setPixmap(QtGui.QPixmap("tranche2W.png"))
        self.W_tranche_3.setPixmap(QtGui.QPixmap("tranche3W.png"))
        self.W_tranche_4.setPixmap(QtGui.QPixmap("tranche4W.png"))
        self.W_tranche_5.setPixmap(QtGui.QPixmap("tranche5W.png"))
        self.W_tranche_6.setPixmap(QtGui.QPixmap("tranche6W.png"))
        now3 = datetime.datetime.now()
        self.label_9.setText("{} : Show each slice of the product....".format(now3.strftime("%Y-%m-%d %H:%M:%S")))
    def Model_W(self):
        now = datetime.datetime.now()
        modelW1 = load_model('modelprog1_.h5')
        self.label_7.setText("{} : Loading Model_W....".format(now.strftime("%Y-%m-%d %H:%M:%S")))
        image_size = (180, 180)
        img1 = cv2.imread('D:/Final Prog5/blackblankpic.png')
        img2 = cv2.imread('D:/Final Prog5/Photo-0 (2).jpg')
        img2 = cv2.resize(img2,(1400,800))
        now2 = datetime.datetime.now()
        self.label_8.setText("{} : Loading image of the product....".format(now2.strftime("%Y-%m-%d %H:%M:%S")))
        #cv2.imshow("original",img2)

        #First get the original image roi
        rows,cols,channels = img2.shape
        roi = img1[0:rows, 0:cols ]

        #Original image converted to gray value
        img2gray = cv2.cvtColor(img2,cv2.COLOR_BGR2GRAY)
        #cv2.imshow('img2gray',img2gray)

        # Now create a mask of img and create its inverse mask also
        # Binarize the gray value to get the ROI area mask
        ret, mask = cv2.threshold(img2gray, 200, 255, cv2.THRESH_BINARY)
        #cv2.imshow('mask',mask)

        #ROI mask area reverse mask
        mask_inv = cv2.bitwise_not(mask)
        #cv2.imshow('mask_inv',mask_inv)

        #Mask display background
        # Now black-out the area of logo in ROI
        img1_bg = cv2.bitwise_and(roi,roi,mask = mask_inv)
        #cv2.imshow('img1_bg',img1_bg)


        #Mask display foreground
        img2_fg = cv2.bitwise_and(img2,img2,mask = mask)
        #cv2.imshow('img2_fg',img2_fg)


        #Front background image overlay
        dst = cv2.add(img1_bg,img2_fg)
        img1[0:rows, 0:cols ] = dst

        #cv2.imshow('res',img1)

        #-------------------------------------------
        img_hsv = cv2.cvtColor(img1, cv2.COLOR_BGR2HSV)

        IMG_mint = np.array([0, 0, 23],np.uint8)
        IMG_maxt = np.array([180, 18, 255],np.uint8)
        IMG = cv2.inRange(img_hsv, IMG_mint, IMG_maxt)
        areaArray = []
        #count = 1
        contours, _ = cv2.findContours(IMG, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        print("Number of contours found =", len(contours))
        for i, c in enumerate(contours):
            area = cv2.contourArea(c)
            areaArray.append(area)
        #first sort the array by area
        sorteddata = sorted(zip(areaArray, contours), key=lambda x: x[0], reverse=True)
        #find the nth largest contour [n-1][1], in this case 2
        largestcontour = sorteddata[0][1]

        #draw it
        x, y, w, h = cv2.boundingRect(largestcontour)
        cropped = img1[y:y+h, x:x+w]
        contrast = cv2.convertScaleAbs(cropped, alpha=3, beta=0)
        #cv2.rectangle(img1, (x, y), (x+w, y+h), (0,255,0), 2)
        #cv2.imshow("cropped",cropped)
        print("x=", x, "y=", y,"w=", w, "h=", h)

        #-----------------------------------
        img_blur = cv2.GaussianBlur(cropped, (7, 7), 1)
        img_gray = cv2.cvtColor(img_blur, cv2.COLOR_BGR2GRAY)
        img_canny = cv2.Canny(img_gray, 10, 10)
        #cv2.imshow("img_canny",img_canny)
        contours, hierarchy = cv2.findContours(img_canny,  
        cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)
  
        for c in contours:
            area = cv2.contourArea(c)
            if area > 40:
                cv2.drawContours(cropped, contours, -1, (0, 0, 255), 3)
                cnts_W = list(filter(lambda cnt: cv2.contourArea(cnt)>40,contours))
                textd_W=("{} ".format(len(cnts_W)))
        #cv2.imshow('Contours', result_W)
        if (len(cnts_W)>5):
            self.T1_W.setText('=> This product is defected')
            print(" This product is defected")
        else:
            self.T1_W.setText('=> This product is defected')
            print(" This product is not defected")
       
        class_names3_W = ["black marks","correcte","yellow marks"]
        vulkan_W= cv2.imread('D:/Final Prog - Copy44/IMG_20210317_150539.jpg')
        vulkan_W=cv2.resize(vulkan_W,(900,500))
        piece1 = vulkan_W[0:250, 0:300]
        cv2.imwrite('piece1W.png', piece1)
        piece2 = vulkan_W[0:250, 300:600]
        cv2.imwrite('piece2W.png', piece2)
        piece3 = vulkan_W[0:250, 600:900]
        cv2.imwrite('piece3W.png', piece3)
        piece4 = vulkan_W[250:600, 0:300]
        cv2.imwrite('piece4W.png', piece4)
        piece5 = vulkan_W[250:600, 300:600]
        cv2.imwrite('piece5W.png', piece5)
        piece6 = vulkan_W[250:600, 600:900]
        cv2.imwrite('piece6W.png', piece6)
        path1 = r"piece1W.png"
        img_W1 = keras.preprocessing.image.load_img(path1, target_size=(image_size))
        img_array_W1 = keras.preprocessing.image.img_to_array(img_W1)
        img_array_W1 = tf.expand_dims(img_array_W1, 0)  # Create batch axis
        predictions = modelW1.predict(img_array_W1)
        score3_W = predictions[0]
        self.T2_W.setText('The tranche1 most likely belongs to {} with a {:.2f} percent confidence.'.format(class_names3_W[np.argmax(score3_W)], 100 * np.max(score3_W)))
        print("The tranche1 most likely belongs to {} with a {:.2f} percent confidence.".format(class_names3_W[np.argmax(score3_W)], 100 * np.max(score3_W)))
        
        path2 = r"piece2W.png"
        img_W2 = keras.preprocessing.image.load_img(path2, target_size=(image_size))
        img_array_W2 = keras.preprocessing.image.img_to_array(img_W2)
        img_array_W2 = tf.expand_dims(img_array_W2, 0)  # Create batch axis
        predictions = modelW1.predict(img_array_W2)
        score4_W = predictions[0]
        self.T3_W.setText('The tranche2 most likely belongs to {} with a {:.2f} percent confidence.'.format(class_names3_W[np.argmax(score4_W)], 100 * np.max(score4_W)))
        print("The tranche2 most likely belongs to {} with a {:.2f} percent confidence.".format(class_names3_W[np.argmax(score4_W)], 100 * np.max(score4_W)))
       
        path3 = r"piece3W.png"
        img_W3 = keras.preprocessing.image.load_img(path3, target_size=(image_size))
        img_array_W3 = keras.preprocessing.image.img_to_array(img_W3)
        img_array_W3 = tf.expand_dims(img_array_W3, 0)  # Create batch axis
        predictions = modelW1.predict(img_array_W3)
        score5_W = predictions[0]
        self.T4_W.setText('The tranche3 most likely belongs to {} with a {:.2f} percent confidence.'.format(class_names3_W[np.argmax(score5_W)], 100 * np.max(score5_W)))
        print("The tranche3 most likely belongs to {} with a {:.2f} percent confidence.".format(class_names3_W[np.argmax(score5_W)], 100 * np.max(score5_W)))
        
        path4 = r"piece4W.png"
        img_W4 = keras.preprocessing.image.load_img(path4, target_size=(image_size))
        img_array_W4 = keras.preprocessing.image.img_to_array(img_W4)
        img_array_W4 = tf.expand_dims(img_array_W4, 0)  # Create batch axis
        predictions = modelW1.predict(img_array_W4)
        score6_W = predictions[0]
        self.T5_W.setText('The tranche4 most likely belongs to {} with a {:.2f} percent confidence.'.format(class_names3_W[np.argmax(score6_W)], 100 * np.max(score6_W)))
        print("The tranche4 most likely belongs to {} with a {:.2f} percent confidence.".format(class_names3_W[np.argmax(score6_W)], 100 * np.max(score6_W)))
        
        path5 = r"piece5W.png"
        img_W5 = keras.preprocessing.image.load_img(path5, target_size=(image_size))
        img_array_W5 = keras.preprocessing.image.img_to_array(img_W5)
        img_array_W5 = tf.expand_dims(img_array_W5, 0)  # Create batch axis
        predictions = modelW1.predict(img_array_W5)
        score7_W = predictions[0]
        self.T6_W.setText('The tranche5 most likely belongs to {} with a {:.2f} percent confidence.'.format(class_names3_W[np.argmax(score7_W)], 100 * np.max(score7_W)))
        print("The tranche5 most likely belongs to {} with a {:.2f} percent confidence.".format(class_names3_W[np.argmax(score7_W)], 100 * np.max(score7_W)))
        

        path6 = r"piece6W.png"
        img_W6 = keras.preprocessing.image.load_img(path6, target_size=(image_size))
        img_array_W6 = keras.preprocessing.image.img_to_array(img_W6)
        img_array_W6 = tf.expand_dims(img_array_W6, 0)  # Create batch axis
        predictions = modelW1.predict(img_array_W6)
        score8_W = predictions[0]
        self.T7_W.setText('The tranche6 most likely belongs to {} with a {:.2f} percent confidence.'.format(class_names3_W[np.argmax(score8_W)], 100 * np.max(score8_W)))
        print("The tranche6 most likely belongs to {} with a {:.2f} percent confidence.".format(class_names3_W[np.argmax(score8_W)], 100 * np.max(score8_W)))
        now3 = datetime.datetime.now()
        self.label_9.setText("{} : Prediction each slice of the product....".format(now3.strftime("%Y-%m-%d %H:%M:%S")))
        
        
        cntst_W=textd_W

        path7 = r"D:/PFE/programme 3/classification pour product wolkan/product_images/black marks/IMG_5313 - Copie (30).JPG"
        img_W7 = keras.preprocessing.image.load_img(path7, target_size=(image_size))
        img_array_W7 = keras.preprocessing.image.img_to_array(img_W7)
        img_array_W7 = tf.expand_dims(img_array_W7, 0)  # Create batch axis
        predictions = modelW1.predict(img_array_W7)
        score30_W = predictions[0]
        print(" {} with a {:.2f} percent confidence.".format(class_names3_W[np.argmax(score30_W)], 100 * np.max(score30_W)))
      

        
        path8 = r"D:/test_pfe11/piece21.png"
        img_W8 = keras.preprocessing.image.load_img(path8, target_size=(image_size))
        img_array_W8 = keras.preprocessing.image.img_to_array(img_W8)
        img_array_W8 = tf.expand_dims(img_array_W8, 0)  # Create batch axis
        predictions = modelW1.predict(img_array_W8)
        score40_W = predictions[0]
        print(" {} with a {:.2f} percent confidence.".format(class_names3_W[np.argmax(score40_W)], 100 * np.max(score40_W)))
       

        
        self.total_defect_W.setText("Total Defects")
        self.total_pes_W.setText("Total Parts")
        self.num_defect_W.display(cntst_W)
      
        self.d1_W.setText(class_names3_W[0])
        self.d2_W.setText(class_names3_W[2])

        self.counter=self.counter + 1
        self.num_pes_W.display(""+str(self.counter))
        self.label_26.setText("get number Pes....")

        if (np.argmax(score3_W)==np.argmax(score30_W)):
            self.numd1_W.display(""+str(self.counter))
        elif (np.argmax(score4_W)==np.argmax(score30_W)):
            self.numd1_W.display(""+str(self.counter))
        elif (np.argmax(score5_W)==np.argmax(score30_W)):
            self.numd1_W.display(""+str(self.counter))
        elif (np.argmax(score6_W)==np.argmax(score30_W)):
            self.numd1_W.display(""+str(self.counter))
        elif (np.argmax(score7_W)==np.argmax(score30_W)):
            self.numd1_W.display(""+str(self.counter))
        elif (np.argmax(score8_W)==np.argmax(score30_W)):
            self.numd1_W.display(""+str(self.counter))
        else :
            self.numd1_W.display("0")
        now4 = datetime.datetime.now()
        self.label_10.setText("{} : Scanning for black marks....".format(now4.strftime("%Y-%m-%d %H:%M:%S")))

        if (np.argmax(score3_W)==np.argmax(score40_W)):
            self.numd2_W.display(""+str(self.counter))
        elif (np.argmax(score4_W)==np.argmax(score40_W)):
            self.numd2_W.display(""+str(self.counter))
        elif (np.argmax(score5_W)==np.argmax(score40_W)):
            self.numd2_W.display(""+str(self.counter))
        elif (np.argmax(score6_W)==np.argmax(score40_W)):
            self.numd2_W.display(""+str(self.counter))
        elif (np.argmax(score7_W)==np.argmax(score40_W)):
            self.numd2_W.display(""+str(self.counter))
        elif (np.argmax(score8_W)==np.argmax(score40_W)):
            self.numd2_W.display(""+str(self.counter))
        else :
            self.numd2_W.display("0")
        now5 = datetime.datetime.now()
        self.label_11.setText("{} : Scanning for Yellow marks....".format(now5.strftime("%Y-%m-%d %H:%M:%S")))

        

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(900, 500)
        MainWindow.setStyleSheet("background-color: rgb(0, 151, 152);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setSpacing(0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.main_header = QtWidgets.QFrame(self.centralwidget)
        self.main_header.setMaximumSize(QtCore.QSize(16777215, 50))
        self.main_header.setStyleSheet("QFrame{\n"
"    border-bottom: 1px solid #000;\n"
"    \n"
"    background-color: rgb(0, 151, 152);\n"
"}")
        self.main_header.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.main_header.setFrameShadow(QtWidgets.QFrame.Raised)
        self.main_header.setObjectName("main_header")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.main_header)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setSpacing(0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.tittle_bar_container = QtWidgets.QFrame(self.main_header)
        self.tittle_bar_container.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.tittle_bar_container.setFrameShadow(QtWidgets.QFrame.Raised)
        self.tittle_bar_container.setLineWidth(0)
        self.tittle_bar_container.setObjectName("tittle_bar_container")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout(self.tittle_bar_container)
        self.horizontalLayout_5.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_5.setSpacing(0)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.tittle_bar = QtWidgets.QFrame(self.tittle_bar_container)
        self.tittle_bar.setStyleSheet("QLabel{\n"
"    color: #fff;\n"
"}")
        self.tittle_bar.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.tittle_bar.setFrameShadow(QtWidgets.QFrame.Raised)
        self.tittle_bar.setObjectName("tittle_bar")
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout(self.tittle_bar)
        self.horizontalLayout_6.setContentsMargins(11, 0, -1, 0)
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.User = QtWidgets.QFrame(self.tittle_bar)
        self.User.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.User.setFrameShadow(QtWidgets.QFrame.Plain)
        self.User.setObjectName("User")
        self.horizontalLayout_9 = QtWidgets.QHBoxLayout(self.User)
        self.horizontalLayout_9.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_9.setSpacing(11)
        self.horizontalLayout_9.setObjectName("horizontalLayout_9")
        self.profile_icon_frame = QtWidgets.QFrame(self.User)
        self.profile_icon_frame.setMinimumSize(QtCore.QSize(50, 50))
        self.profile_icon_frame.setMaximumSize(QtCore.QSize(50, 50))
        self.profile_icon_frame.setStyleSheet("image: url(:/icons/icons1/cil-user.png);\n"
"background-color: rgb(0, 151, 152);\n"
"border-radius: 25px;\n"
"border: 3px solid rgb(99, 99, 99);\n"
"")
        self.profile_icon_frame.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.profile_icon_frame.setFrameShadow(QtWidgets.QFrame.Plain)
        self.profile_icon_frame.setObjectName("profile_icon_frame")
        self.horizontalLayout_9.addWidget(self.profile_icon_frame)
        self.username_title = QtWidgets.QLabel(self.User)
        self.username_title.setStyleSheet("font: 75 14pt \"Calibri\";\n"
"color: rgb(255, 255, 255);")
        self.username_title.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.username_title.setText("")
        self.username_title.setObjectName("username_title")
        self.horizontalLayout_9.addWidget(self.username_title)
        self.horizontalLayout_6.addWidget(self.User)
        self.frame = QtWidgets.QFrame(self.tittle_bar)
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Plain)
        self.frame.setObjectName("frame")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.frame)
        self.horizontalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_4.setSpacing(0)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.Logo = QtWidgets.QLabel(self.frame)
        self.Logo.setMinimumSize(QtCore.QSize(300, 41))
        self.Logo.setMaximumSize(QtCore.QSize(201, 41))
        self.Logo.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.Logo.setText("")
        self.Logo.setPixmap(QtGui.QPixmap(":/logo/LOGO_2.jpg"))
        self.Logo.setObjectName("Logo")
        self.horizontalLayout_4.addWidget(self.Logo)
        self.horizontalLayout_6.addWidget(self.frame)
        self.frame_2 = QtWidgets.QFrame(self.tittle_bar)
        self.frame_2.setMaximumSize(QtCore.QSize(400, 16777215))
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Plain)
        self.frame_2.setObjectName("frame_2")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.frame_2)
        self.horizontalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.Date = QtWidgets.QTextBrowser(self.frame_2)
        self.Date.setMaximumSize(QtCore.QSize(211, 41))
        self.Date.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 12pt \"Siemens Sans Black\";")
        self.Date.setFrameShadow(QtWidgets.QFrame.Plain)
        self.Date.setObjectName("Date")
        self.horizontalLayout_3.addWidget(self.Date)
        self.Time = QtWidgets.QTextBrowser(self.frame_2)
        self.Time.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 12pt \"Siemens Sans Black\";")
        self.Time.setFrameShadow(QtWidgets.QFrame.Plain)
        self.Time.setObjectName("Time")
        timer = QTimer(MainWindow)
        timer.timeout.connect(self.showTime)
        timer.start(1000) # update every second
        self.showTime()
        
        self.horizontalLayout_3.addWidget(self.Time)
        self.horizontalLayout_6.addWidget(self.frame_2)
        self.horizontalLayout_5.addWidget(self.tittle_bar)
        self.horizontalLayout_2.addWidget(self.tittle_bar_container)
        self.verticalLayout.addWidget(self.main_header)
        self.main_body = QtWidgets.QFrame(self.centralwidget)
        self.main_body.setStyleSheet("")
        self.main_body.setFrameShape(QtWidgets.QFrame.WinPanel)
        self.main_body.setFrameShadow(QtWidgets.QFrame.Raised)
        self.main_body.setObjectName("main_body")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.main_body)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setSpacing(0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.left_side_menu = QtWidgets.QFrame(self.main_body)
        self.left_side_menu.setMinimumSize(QtCore.QSize(130, 0))
        self.left_side_menu.setMaximumSize(QtCore.QSize(130, 16777215))
        self.left_side_menu.setStyleSheet("QFrame{\n"
"    background-color: rgb(0, 151, 152);\n"
"}\n"
"QPushButton{\n"
"    padding: 20px 10px;\n"
"    border: none;\n"
"    border-radius: 10px;\n"
"    background-color: rgb(0, 151, 152);\n"
"    color: #fff;\n"
"}\n"
"QPushButton:hover{\n"
"    background-color: rgb(0, 171, 172);\n"
"}\n"
"QPushButton:pressed {\n"
"    background-color:  rgb(0, 181, 182);\n"
"    border-bottom: 2px solid rgb(255, 165, 24);\n"
"}\n"
"\n"
"")
        self.left_side_menu.setFrameShape(QtWidgets.QFrame.Panel)
        self.left_side_menu.setFrameShadow(QtWidgets.QFrame.Raised)
        self.left_side_menu.setObjectName("left_side_menu")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.left_side_menu)
        self.verticalLayout_3.setContentsMargins(7, 0, 0, 0)
        self.verticalLayout_3.setSpacing(0)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.left_menu_top_buttons = QtWidgets.QFrame(self.left_side_menu)
        self.left_menu_top_buttons.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.left_menu_top_buttons.setFrameShadow(QtWidgets.QFrame.Raised)
        self.left_menu_top_buttons.setObjectName("left_menu_top_buttons")
        self.formLayout = QtWidgets.QFormLayout(self.left_menu_top_buttons)
        self.formLayout.setContentsMargins(0, 0, 0, 0)
        self.formLayout.setSpacing(0)
        self.formLayout.setObjectName("formLayout")
        self.home_button = QtWidgets.QPushButton(self.left_menu_top_buttons)
        self.home_button.setMinimumSize(QtCore.QSize(100, 0))
        self.home_button.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.home_button.setStyleSheet("background-image: url(:/icons/icons1/cil-home.png);\n"
"background-repeat: none;\n"
"padding-left: 50px;\n"
"background-position: center left;")
        self.home_button.setIconSize(QtCore.QSize(20, 20))
        self.home_button.setObjectName("home_button")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.SpanningRole, self.home_button)
        self.verticalLayout_3.addWidget(self.left_menu_top_buttons)
        self.settings_button = QtWidgets.QPushButton(self.left_side_menu)
        self.settings_button.setMinimumSize(QtCore.QSize(100, 0))
        self.settings_button.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.settings_button.setStyleSheet("background-image: url(:/icons/icons1/cil-settings.png);\n"
"background-repeat: none;\n"
"padding-left: 50px;\n"
"background-position: center left;")
        self.settings_button.setIconSize(QtCore.QSize(24, 24))
        self.settings_button.setObjectName("settings_button")
        self.verticalLayout_3.addWidget(self.settings_button, 0, QtCore.Qt.AlignLeft)
        self.horizontalLayout.addWidget(self.left_side_menu, 0, QtCore.Qt.AlignLeft)
        self.center_main_items = QtWidgets.QFrame(self.main_body)
        self.center_main_items.setStyleSheet("")
        self.center_main_items.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.center_main_items.setFrameShadow(QtWidgets.QFrame.Raised)
        self.center_main_items.setObjectName("center_main_items")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.center_main_items)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setSpacing(0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.stackedWidget = QtWidgets.QStackedWidget(self.center_main_items)
        self.stackedWidget.setEnabled(True)
        self.stackedWidget.setObjectName("stackedWidget")
        self.Login_page = QtWidgets.QWidget()
        self.Login_page.setObjectName("Login_page")
        self.verticalLayout_38 = QtWidgets.QVBoxLayout(self.Login_page)
        self.verticalLayout_38.setObjectName("verticalLayout_38")
        self.frame_50 = QtWidgets.QFrame(self.Login_page)
        self.frame_50.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_50.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_50.setObjectName("frame_50")
        self.horizontalLayout_39 = QtWidgets.QHBoxLayout(self.frame_50)
        self.horizontalLayout_39.setObjectName("horizontalLayout_39")
        self.frame_51 = QtWidgets.QFrame(self.frame_50)
        self.frame_51.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_51.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_51.setObjectName("frame_51")
        self.horizontalLayout_39.addWidget(self.frame_51)
        self.frame_52 = QtWidgets.QFrame(self.frame_50)
        self.frame_52.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_52.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_52.setObjectName("frame_52")
        self.horizontalLayout_40 = QtWidgets.QHBoxLayout(self.frame_52)
        self.horizontalLayout_40.setObjectName("horizontalLayout_40")
        self.label_33 = QtWidgets.QLabel(self.frame_52)
        self.label_33.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 75 28pt \"Times New Roman\";")
        self.label_33.setObjectName("label_33")
        self.horizontalLayout_40.addWidget(self.label_33, 0, QtCore.Qt.AlignHCenter)
        self.horizontalLayout_39.addWidget(self.frame_52, 0, QtCore.Qt.AlignBottom)
        self.frame_68 = QtWidgets.QFrame(self.frame_50)
        self.frame_68.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_68.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_68.setObjectName("frame_68")
        self.horizontalLayout_39.addWidget(self.frame_68)
        self.verticalLayout_38.addWidget(self.frame_50)
        self.frame_70 = QtWidgets.QFrame(self.Login_page)
        self.frame_70.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_70.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_70.setObjectName("frame_70")
        self.horizontalLayout_49 = QtWidgets.QHBoxLayout(self.frame_70)
        self.horizontalLayout_49.setObjectName("horizontalLayout_49")
        self.frame_71 = QtWidgets.QFrame(self.frame_70)
        self.frame_71.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_71.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_71.setObjectName("frame_71")
        self.horizontalLayout_49.addWidget(self.frame_71)
        self.frame_72 = QtWidgets.QFrame(self.frame_70)
        self.frame_72.setMinimumSize(QtCore.QSize(420, 321))
        self.frame_72.setMaximumSize(QtCore.QSize(400, 321))
        self.frame_72.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_72.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_72.setObjectName("frame_72")
        self.createaccbutton = QtWidgets.QPushButton(self.frame_72)
        self.createaccbutton.setGeometry(QtCore.QRect(320, 270, 93, 28))
        self.createaccbutton.setStyleSheet("QPushButton{\n"
"    font: 8pt \"Times New Roman\";\n"
"    background-color: rgb(0, 151, 152);\n"
"color: rgb(255, 255, 255);\n"
"}")
        self.createaccbutton.setObjectName("createaccbutton")
        self.label_34 = QtWidgets.QLabel(self.frame_72)
        self.label_34.setGeometry(QtCore.QRect(180, 270, 141, 31))
        self.label_34.setStyleSheet("color:rgb(255, 255, 255);\n"
"font: 8pt \"Times New Roman\";")
        self.label_34.setObjectName("label_34")
        self.password = QtWidgets.QLineEdit(self.frame_72)
        self.password.setGeometry(QtCore.QRect(170, 100, 241, 41))
        self.password.setEchoMode(QtWidgets.QLineEdit.Password)
        self.password.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"font: 10pt \"Times New Roman\";")
        self.password.setObjectName("password")
        self.label_35 = QtWidgets.QLabel(self.frame_72)
        self.label_35.setGeometry(QtCore.QRect(40, 100, 111, 31))
        self.label_35.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 14pt \"Times New Roman\";")
        self.label_35.setObjectName("label_35")
        self.label_36 = QtWidgets.QLabel(self.frame_72)
        self.label_36.setGeometry(QtCore.QRect(40, 30, 111, 41))
        self.label_36.setStyleSheet("color: rgb(255, 255, 255); \n"
"font: 14pt \"Times New Roman\";")
        self.label_36.setObjectName("label_36")
        self.loginbutton = QtWidgets.QPushButton(self.frame_72)
        self.loginbutton.setGeometry(QtCore.QRect(270, 170, 141, 51))
        self.loginbutton.setStyleSheet("font: 12pt \"Times New Roman\";\n"
"background-color: rgb(255, 255, 255);")
        self.loginbutton.setObjectName("loginbutton")
        self.Email = QtWidgets.QLineEdit(self.frame_72)
        self.Email.setGeometry(QtCore.QRect(170, 30, 241, 41))
        self.Email.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"font: 10pt \"Times New Roman\";")
        self.Email.setObjectName("Email")
        self.warning = QtWidgets.QLabel(self.frame_72)
        self.warning.setGeometry(QtCore.QRect(10, 170, 251, 61))
        self.warning.setStyleSheet("font: 10pt \"Times New Roman\";\n"
"color: rgb(255, 255, 255);")
        self.warning.setText("")
        self.warning.setObjectName("warning")
        self.horizontalLayout_49.addWidget(self.frame_72)
        self.frame_73 = QtWidgets.QFrame(self.frame_70)
        self.frame_73.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_73.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_73.setObjectName("frame_73")
        self.horizontalLayout_49.addWidget(self.frame_73)
        self.verticalLayout_38.addWidget(self.frame_70)
        self.frame_69 = QtWidgets.QFrame(self.Login_page)
        self.frame_69.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_69.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_69.setObjectName("frame_69")
        self.verticalLayout_38.addWidget(self.frame_69)
        self.stackedWidget.addWidget(self.Login_page)
        self.SignUp_page = QtWidgets.QWidget()
        self.SignUp_page.setObjectName("SignUp_page")
        self.verticalLayout_39 = QtWidgets.QVBoxLayout(self.SignUp_page)
        self.verticalLayout_39.setObjectName("verticalLayout_39")
        self.frame_75 = QtWidgets.QFrame(self.SignUp_page)
        self.frame_75.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_75.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_75.setObjectName("frame_75")
        self.horizontalLayout_50 = QtWidgets.QHBoxLayout(self.frame_75)
        self.horizontalLayout_50.setObjectName("horizontalLayout_50")
        self.frame_76 = QtWidgets.QFrame(self.frame_75)
        self.frame_76.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_76.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_76.setObjectName("frame_76")
        self.horizontalLayout_50.addWidget(self.frame_76)
        self.frame_77 = QtWidgets.QFrame(self.frame_75)
        self.frame_77.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_77.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_77.setObjectName("frame_77")
        self.horizontalLayout_51 = QtWidgets.QHBoxLayout(self.frame_77)
        self.horizontalLayout_51.setObjectName("horizontalLayout_51")
        self.label_37 = QtWidgets.QLabel(self.frame_77)
        self.label_37.setStyleSheet("font: 28pt \"Times New Roman\";\n"
"color: rgb(255, 255, 255);")
        self.label_37.setObjectName("label_37")
        self.horizontalLayout_51.addWidget(self.label_37, 0, QtCore.Qt.AlignHCenter)
        self.horizontalLayout_50.addWidget(self.frame_77, 0, QtCore.Qt.AlignBottom)
        self.frame_78 = QtWidgets.QFrame(self.frame_75)
        self.frame_78.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_78.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_78.setObjectName("frame_78")
        self.horizontalLayout_50.addWidget(self.frame_78)
        self.verticalLayout_39.addWidget(self.frame_75)
        self.frame_79 = QtWidgets.QFrame(self.SignUp_page)
        self.frame_79.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_79.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_79.setObjectName("frame_79")
        self.horizontalLayout_52 = QtWidgets.QHBoxLayout(self.frame_79)
        self.horizontalLayout_52.setObjectName("horizontalLayout_52")
        self.frame_80 = QtWidgets.QFrame(self.frame_79)
        self.frame_80.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_80.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_80.setObjectName("frame_80")
        self.horizontalLayout_52.addWidget(self.frame_80)
        self.frame_81 = QtWidgets.QFrame(self.frame_79)
        self.frame_81.setMinimumSize(QtCore.QSize(471, 281))
        self.frame_81.setMaximumSize(QtCore.QSize(471, 281))
        self.frame_81.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_81.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_81.setObjectName("frame_81")
        self.signupbutton = QtWidgets.QPushButton(self.frame_81)
        self.signupbutton.setGeometry(QtCore.QRect(330, 200, 131, 51))
        self.signupbutton.setStyleSheet("font: 12pt \"Times New Roman\";\n"
"background-color: rgb(255, 255, 255);")
        self.signupbutton.setObjectName("signupbutton")
        self.label_38 = QtWidgets.QLabel(self.frame_81)
        self.label_38.setGeometry(QtCore.QRect(20, 140, 191, 31))
        self.label_38.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 14pt \"Times New Roman\";")
        self.label_38.setObjectName("label_38")
        self.password_3 = QtWidgets.QLineEdit(self.frame_81)
        self.password_3.setGeometry(QtCore.QRect(220, 80, 241, 41))
        self.password_3.setEchoMode(QtWidgets.QLineEdit.Password)
        self.password_3.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"font: 10pt \"Times New Roman\";")
        self.password_3.setObjectName("password_3")
        self.label_39 = QtWidgets.QLabel(self.frame_81)
        self.label_39.setGeometry(QtCore.QRect(60, 80, 111, 31))
        self.label_39.setStyleSheet("color: rgb(255, 255, 255); \n"
"font: 14pt \"Times New Roman\";")
        self.label_39.setObjectName("label_39")
        self.label_40 = QtWidgets.QLabel(self.frame_81)
        self.label_40.setGeometry(QtCore.QRect(60, 10, 111, 41))
        self.label_40.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 16pt \"Times New Roman\";")
        self.label_40.setObjectName("label_40")
        self.password_2 = QtWidgets.QLineEdit(self.frame_81)
        self.password_2.setGeometry(QtCore.QRect(220, 140, 241, 41))
        self.password_2.setEchoMode(QtWidgets.QLineEdit.Password)
        self.password_2.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"font: 10pt \"Times New Roman\";")
        self.password_2.setObjectName("password_2")
        self.Warninglabel = QtWidgets.QLabel(self.frame_81)
        self.Warninglabel.setGeometry(QtCore.QRect(50, 200, 251, 61))
        self.Warninglabel.setStyleSheet("font: 10pt \"Times New Roman\";\n"
"color: rgb(255, 255, 255);")
        self.Warninglabel.setText("")
        self.Warninglabel.setObjectName("Warninglabel")
        self.Email_2 = QtWidgets.QLineEdit(self.frame_81)
        self.Email_2.setGeometry(QtCore.QRect(220, 20, 241, 41))
        self.Email_2.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"font: 10pt \"Times New Roman\";")
        self.Email_2.setObjectName("Email_2")
        self.horizontalLayout_52.addWidget(self.frame_81)
        self.frame_82 = QtWidgets.QFrame(self.frame_79)
        self.frame_82.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_82.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_82.setObjectName("frame_82")
        self.horizontalLayout_52.addWidget(self.frame_82)
        self.verticalLayout_39.addWidget(self.frame_79)
        self.frame_74 = QtWidgets.QFrame(self.SignUp_page)
        self.frame_74.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_74.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_74.setObjectName("frame_74")
        self.verticalLayout_39.addWidget(self.frame_74)
        self.stackedWidget.addWidget(self.SignUp_page)
        self.home_page = QtWidgets.QWidget()
        self.home_page.setStyleSheet("")
        self.home_page.setObjectName("home_page")
        self.verticalLayout_15 = QtWidgets.QVBoxLayout(self.home_page)
        self.verticalLayout_15.setObjectName("verticalLayout_15")
        self.home1 = QtWidgets.QFrame(self.home_page)
        self.home1.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.home1.setFrameShadow(QtWidgets.QFrame.Raised)
        self.home1.setObjectName("home1")
        self.verticalLayout_11 = QtWidgets.QVBoxLayout(self.home1)
        self.verticalLayout_11.setObjectName("verticalLayout_11")
        self.Welcome_title = QtWidgets.QLabel(self.home1)
        self.Welcome_title.setStyleSheet("font: 75 24pt \"\"Calibri\"\";\n"
"color: rgb(255, 255, 255);")
        self.Welcome_title.setObjectName("Welcome_title")
        self.verticalLayout_11.addWidget(self.Welcome_title)
        self.Products_selection_1 = QtWidgets.QFrame(self.home1)
        self.Products_selection_1.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.Products_selection_1.setFrameShadow(QtWidgets.QFrame.Raised)
        self.Products_selection_1.setObjectName("Products_selection_1")
        self.horizontalLayout_8 = QtWidgets.QHBoxLayout(self.Products_selection_1)
        self.horizontalLayout_8.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_8.setSpacing(11)
        self.horizontalLayout_8.setObjectName("horizontalLayout_8")
        self.prod_mess_start = QtWidgets.QLabel(self.Products_selection_1)
        self.prod_mess_start.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 16pt \"Calibri\";")
        self.prod_mess_start.setObjectName("prod_mess_start")
        self.horizontalLayout_8.addWidget(self.prod_mess_start, 0, QtCore.Qt.AlignLeft)
        self.comboBox = QtWidgets.QComboBox(self.Products_selection_1)
        self.comboBox.setMinimumSize(QtCore.QSize(515, 28))
        self.comboBox.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 12pt \"Calibri\";")
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.horizontalLayout_8.addWidget(self.comboBox, 0, QtCore.Qt.AlignHCenter)
        self.frame_22 = QtWidgets.QFrame(self.Products_selection_1)
        self.frame_22.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_22.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_22.setObjectName("frame_22")
        self.horizontalLayout_8.addWidget(self.frame_22)
        self.verticalLayout_11.addWidget(self.Products_selection_1)
        self.imgh1 = QtWidgets.QFrame(self.home1)
        self.imgh1.setStyleSheet("")
        self.imgh1.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.imgh1.setFrameShadow(QtWidgets.QFrame.Raised)
        self.imgh1.setObjectName("imgh1")
        self.horizontalLayout_17 = QtWidgets.QHBoxLayout(self.imgh1)
        self.horizontalLayout_17.setObjectName("horizontalLayout_17")
        self.frame_15 = QtWidgets.QFrame(self.imgh1)
        self.frame_15.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_15.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_15.setObjectName("frame_15")
        self.horizontalLayout_17.addWidget(self.frame_15)
        self.imagehome1 = QtWidgets.QFrame(self.imgh1)
        self.imagehome1.setMinimumSize(QtCore.QSize(231, 161))
        self.imagehome1.setMaximumSize(QtCore.QSize(231, 161))
        self.imagehome1.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.imagehome1.setFrameShadow(QtWidgets.QFrame.Raised)
        self.imagehome1.setObjectName("imagehome1")
        self.gridLayout_7 = QtWidgets.QGridLayout(self.imagehome1)
        self.gridLayout_7.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_7.setSpacing(0)
        self.gridLayout_7.setObjectName("gridLayout_7")
        self.line = QtWidgets.QFrame(self.imagehome1)
        self.line.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.gridLayout_7.addWidget(self.line, 0, 0, 1, 2)
        self.line_4 = QtWidgets.QFrame(self.imagehome1)
        self.line_4.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.line_4.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_4.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_4.setObjectName("line_4")
        self.gridLayout_7.addWidget(self.line_4, 0, 2, 3, 1)
        self.line_3 = QtWidgets.QFrame(self.imagehome1)
        self.line_3.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.line_3.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_3.setObjectName("line_3")
        self.gridLayout_7.addWidget(self.line_3, 1, 0, 1, 1)
        self.Pic_1 = QtWidgets.QLabel(self.imagehome1)
        self.Pic_1.setStyleSheet("Qlabel{border-top-color: rgb(255, 255, 255);\n"
"border-left-color: rgb(255, 255, 255);\n"
"border-bottom-color: rgb(255, 255, 255);\n"
"border-right-color: rgb(255, 255, 255);\n"
"image: url(:/Vulkan/vulkan(pd).png);}\n"
"")
        self.Pic_1.setText("")
        self.Pic_1.setObjectName("Pic_1")
        self.gridLayout_7.addWidget(self.Pic_1, 1, 1, 1, 1)
        self.line_2 = QtWidgets.QFrame(self.imagehome1)
        self.line_2.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.line_2.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.gridLayout_7.addWidget(self.line_2, 2, 0, 1, 2)
        self.horizontalLayout_17.addWidget(self.imagehome1)
        self.frame_16 = QtWidgets.QFrame(self.imgh1)
        self.frame_16.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_16.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_16.setObjectName("frame_16")
        self.horizontalLayout_17.addWidget(self.frame_16)
        self.verticalLayout_11.addWidget(self.imgh1)
        self.Product_type = QtWidgets.QFrame(self.home1)
        self.Product_type.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.Product_type.setFrameShadow(QtWidgets.QFrame.Raised)
        self.Product_type.setObjectName("Product_type")
        self.horizontalLayout_18 = QtWidgets.QHBoxLayout(self.Product_type)
        self.horizontalLayout_18.setObjectName("horizontalLayout_18")
        self.prod_mess_start_1_2 = QtWidgets.QLabel(self.Product_type)
        self.prod_mess_start_1_2.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 16pt \"Calibri\";")
        self.prod_mess_start_1_2.setObjectName("prod_mess_start_1_2")
        self.horizontalLayout_18.addWidget(self.prod_mess_start_1_2, 0, QtCore.Qt.AlignLeft)
        self.verticalLayout_6 = QtWidgets.QVBoxLayout()
        self.verticalLayout_6.setSpacing(0)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.comboBox_2 = QtWidgets.QComboBox(self.Product_type)
        self.comboBox_2.setMinimumSize(QtCore.QSize(515, 0))
        self.comboBox_2.setMaximumSize(QtCore.QSize(515, 16777215))
        self.comboBox_2.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 12pt \"Calibri\";")
        self.comboBox_2.setObjectName("comboBox_2")
        self.comboBox_2.addItem("")
        self.verticalLayout_6.addWidget(self.comboBox_2)
        self.horizontalLayout_18.addLayout(self.verticalLayout_6)
        self.frame_23 = QtWidgets.QFrame(self.Product_type)
        self.frame_23.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_23.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_23.setObjectName("frame_23")
        self.horizontalLayout_18.addWidget(self.frame_23)
        self.verticalLayout_11.addWidget(self.Product_type)
        self.imgh2 = QtWidgets.QFrame(self.home1)
        self.imgh2.setStyleSheet("")
        self.imgh2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.imgh2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.imgh2.setObjectName("imgh2")
        self.horizontalLayout_19 = QtWidgets.QHBoxLayout(self.imgh2)
        self.horizontalLayout_19.setObjectName("horizontalLayout_19")
        self.frame_19 = QtWidgets.QFrame(self.imgh2)
        self.frame_19.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_19.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_19.setObjectName("frame_19")
        self.horizontalLayout_19.addWidget(self.frame_19)
        self.frame_21 = QtWidgets.QFrame(self.imgh2)
        self.frame_21.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_21.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_21.setObjectName("frame_21")
        self.horizontalLayout_19.addWidget(self.frame_21)
        self.verticalLayout_11.addWidget(self.imgh2)
        self.verticalLayout_15.addWidget(self.home1)
        self.stackedWidget.addWidget(self.home_page)
        self.settings_page = QtWidgets.QWidget()
        self.settings_page.setStyleSheet("")
        self.settings_page.setObjectName("settings_page")
        self.verticalLayout_8 = QtWidgets.QVBoxLayout(self.settings_page)
        self.verticalLayout_8.setObjectName("verticalLayout_8")
        self.frame_9 = QtWidgets.QFrame(self.settings_page)
        self.frame_9.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.frame_9.setFrameShadow(QtWidgets.QFrame.Plain)
        self.frame_9.setObjectName("frame_9")
        self.verticalLayout_9 = QtWidgets.QVBoxLayout(self.frame_9)
        self.verticalLayout_9.setObjectName("verticalLayout_9")
        self.frame_11 = QtWidgets.QFrame(self.frame_9)
        self.frame_11.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.frame_11.setFrameShadow(QtWidgets.QFrame.Plain)
        self.frame_11.setObjectName("frame_11")
        self.horizontalLayout_37 = QtWidgets.QHBoxLayout(self.frame_11)
        self.horizontalLayout_37.setObjectName("horizontalLayout_37")
        self.excel_frame = QtWidgets.QFrame(self.frame_11)
        self.excel_frame.setMinimumSize(QtCore.QSize(541, 74))
        self.excel_frame.setMaximumSize(QtCore.QSize(541, 74))
        self.excel_frame.setStyleSheet("QLabel{\n"
"    color: #fff;\n"
"}\n"
"QPushButton{\n"
"    background-color: rgb(0, 151, 152);\n"
"    color: #fff;\n"
"}\n"
"QPushButton:hover{\n"
"    border-color: rgb(255, 255, 255);\n"
"    background-color: rgb(0, 181, 182);\n"
"}\n"
"QPushButton:pressed {\n"
"    background-color:  rgb(0, 191, 192);\n"
"    border-bottom: 2px solid rgb(255, 165, 24);\n"
"}")
        self.excel_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.excel_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.excel_frame.setObjectName("excel_frame")
        self.horizontalLayout_36 = QtWidgets.QHBoxLayout(self.excel_frame)
        self.horizontalLayout_36.setObjectName("horizontalLayout_36")
        self.label_32 = QtWidgets.QLabel(self.excel_frame)
        self.label_32.setStyleSheet("font: 75 14pt \"Calibri\";\n"
"color: rgb(255, 255, 255);")
        self.label_32.setObjectName("label_32")
        self.horizontalLayout_36.addWidget(self.label_32)
        self.excel__Button_2 = QtWidgets.QPushButton(self.excel_frame)
        self.excel__Button_2.setMaximumSize(QtCore.QSize(100, 28))
        self.excel__Button_2.setStyleSheet("color: rgb(255, 255, 255);\n"
"background-image: url(:/icons/icons1/cil-save.png);\n"
"background-repeat: none;\n"
"padding-left: 50px;\n"
"background-position: center left;")
        self.excel__Button_2.setObjectName("excel__Button_2")
        self.horizontalLayout_36.addWidget(self.excel__Button_2)
        self.horizontalLayout_37.addWidget(self.excel_frame)
        self.frame_48 = QtWidgets.QFrame(self.frame_11)
        self.frame_48.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_48.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_48.setObjectName("frame_48")
        self.horizontalLayout_53 = QtWidgets.QHBoxLayout(self.frame_48)
        self.horizontalLayout_53.setObjectName("horizontalLayout_53")
        self.label_41 = QtWidgets.QLabel(self.frame_48)
        self.label_41.setStyleSheet("color: rgb(255, 255, 255);\n"
"text-decoration: underline;\n"
"font: 75 italic 14pt \"Times New Roman\";")
        self.label_41.setText("")
        self.label_41.setObjectName("label_41")
        self.horizontalLayout_53.addWidget(self.label_41)
        self.horizontalLayout_37.addWidget(self.frame_48)
        self.verticalLayout_9.addWidget(self.frame_11)
        self.logout_frame = QtWidgets.QFrame(self.frame_9)
        self.logout_frame.setMinimumSize(QtCore.QSize(541, 74))
        self.logout_frame.setMaximumSize(QtCore.QSize(541, 74))
        self.logout_frame.setStyleSheet("QFrame{\n"
"    background-color: rgb(99, 99, 99);\n"
"    border-top-color: solid 1px  rgb(99, 99, 99);\n"
"}\n"
"QLabel{\n"
"    color: #fff;\n"
"}\n"
"QPushButton{\n"
"background-color: rgb(200, 0, 0);\n"
"color: rgb(255, 255, 255);}\n"
"QPushButton:hover{\n"
"    border-color: rgb(255, 255, 255);\n"
"    background-color: rgb(255, 0, 0)\n"
"}\n"
"QPushButton:pressed {\n"
"    background-color:  rgb(238, 115, 27)\n"
"    border-bottom: 2px solid rgb(255, 165, 24);\n"
"}")
        self.logout_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.logout_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.logout_frame.setObjectName("logout_frame")
        self.horizontalLayout_11 = QtWidgets.QHBoxLayout(self.logout_frame)
        self.horizontalLayout_11.setObjectName("horizontalLayout_11")
        self.profile_icon_frame_2 = QtWidgets.QFrame(self.logout_frame)
        self.profile_icon_frame_2.setMinimumSize(QtCore.QSize(50, 50))
        self.profile_icon_frame_2.setMaximumSize(QtCore.QSize(50, 50))
        self.profile_icon_frame_2.setStyleSheet("image: url(:/icons/icons1/cil-user.png);\n"
"border-radius: 25px;\n"
"border: 3px solid rgb(0, 151, 152);\n"
"")
        self.profile_icon_frame_2.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.profile_icon_frame_2.setFrameShadow(QtWidgets.QFrame.Plain)
        self.profile_icon_frame_2.setObjectName("profile_icon_frame_2")
        self.horizontalLayout_11.addWidget(self.profile_icon_frame_2)
        self.username_settings = QtWidgets.QLabel(self.logout_frame)
        self.username_settings.setStyleSheet("font: 75 14pt \"Calibri\";\n"
"color: rgb(255, 255, 255);")
        self.username_settings.setText("")
        self.username_settings.setObjectName("username_settings")
        self.horizontalLayout_11.addWidget(self.username_settings)
        self.Logout__Button = QtWidgets.QPushButton(self.logout_frame)
        self.Logout__Button.setMaximumSize(QtCore.QSize(100, 28))
        self.Logout__Button.setStyleSheet("")
        self.Logout__Button.setObjectName("Logout__Button")
        self.horizontalLayout_11.addWidget(self.Logout__Button)
        self.verticalLayout_9.addWidget(self.logout_frame, 0, QtCore.Qt.AlignHCenter)
        self.Logout_verification_widget = QtWidgets.QWidget(self.frame_9)
        self.Logout_verification_widget.setMinimumSize(QtCore.QSize(381, 131))
        self.Logout_verification_widget.setMaximumSize(QtCore.QSize(541, 131))
        self.Logout_verification_widget.setContextMenuPolicy(QtCore.Qt.PreventContextMenu)
        self.Logout_verification_widget.setStyleSheet("QWidget{background-color: rgb(0, 177, 177);}\n"
"\n"
"QPushButton{\n"
"    background-color: rgb(0, 177, 177);\n"
"    color: #fff;\n"
"}\n"
"QPushButton:hover{\n"
"    border-color: rgb(255, 255, 255);\n"
"    background-color: rgb(0, 151, 152);\n"
"}\n"
"QPushButton:pressed {\n"
"    background-color:  rgb(0, 191, 192);\n"
"    border-bottom: 2px solid rgb(255, 165, 24);\n"
"}")
        self.Logout_verification_widget.setInputMethodHints(QtCore.Qt.ImhHiddenText)
        self.Logout_verification_widget.setObjectName("Logout_verification_widget")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.Logout_verification_widget)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.logout_message = QtWidgets.QLabel(self.Logout_verification_widget)
        self.logout_message.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 16pt \"Calibri\";")
        self.logout_message.setText("")
        self.logout_message.setObjectName("logout_message")
        self.verticalLayout_4.addWidget(self.logout_message)
        self.frame_49 = QtWidgets.QFrame(self.Logout_verification_widget)
        self.frame_49.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_49.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_49.setObjectName("frame_49")
        self.horizontalLayout_38 = QtWidgets.QHBoxLayout(self.frame_49)
        self.horizontalLayout_38.setObjectName("horizontalLayout_38")
        self.pushButton = QtWidgets.QPushButton(self.frame_49)
        self.pushButton.setMaximumSize(QtCore.QSize(100, 16777215))
        self.pushButton.setObjectName("pushButton")
        self.horizontalLayout_38.addWidget(self.pushButton)
        self.pushButton_3 = QtWidgets.QPushButton(self.frame_49)
        self.pushButton_3.setMaximumSize(QtCore.QSize(100, 16777215))
        self.pushButton_3.setObjectName("pushButton_3")
        self.horizontalLayout_38.addWidget(self.pushButton_3)
        self.verticalLayout_4.addWidget(self.frame_49)
        self.verticalLayout_9.addWidget(self.Logout_verification_widget, 0, QtCore.Qt.AlignHCenter)
        self.frame_10 = QtWidgets.QFrame(self.frame_9)
        self.frame_10.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.frame_10.setFrameShadow(QtWidgets.QFrame.Plain)
        self.frame_10.setObjectName("frame_10")
        self.verticalLayout_9.addWidget(self.frame_10)
        self.verticalLayout_8.addWidget(self.frame_9)
        self.stackedWidget.addWidget(self.settings_page)
        self.HomescreenVG = QtWidgets.QWidget()
        self.HomescreenVG.setObjectName("HomescreenVG")
        self.verticalLayout_17 = QtWidgets.QVBoxLayout(self.HomescreenVG)
        self.verticalLayout_17.setContentsMargins(-1, 0, -1, -1)
        self.verticalLayout_17.setObjectName("verticalLayout_17")
        self.frame_3 = QtWidgets.QFrame(self.HomescreenVG)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frame_3.sizePolicy().hasHeightForWidth())
        self.frame_3.setSizePolicy(sizePolicy)
        self.frame_3.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Plain)
        self.frame_3.setObjectName("frame_3")
        self.verticalLayout_16 = QtWidgets.QVBoxLayout(self.frame_3)
        self.verticalLayout_16.setContentsMargins(11, 0, 11, 11)
        self.verticalLayout_16.setSpacing(0)
        self.verticalLayout_16.setObjectName("verticalLayout_16")
        self.frame_4 = QtWidgets.QFrame(self.frame_3)
        self.frame_4.setMinimumSize(QtCore.QSize(1218, 33))
        self.frame_4.setMaximumSize(QtCore.QSize(1218, 33))
        self.frame_4.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_4.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_4.setObjectName("frame_4")
        self.verticalLayout_16.addWidget(self.frame_4)
        self.frame_12 = QtWidgets.QFrame(self.frame_3)
        self.frame_12.setMinimumSize(QtCore.QSize(0, 86))
        self.frame_12.setMaximumSize(QtCore.QSize(16777215, 86))
        self.frame_12.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.frame_12.setFrameShadow(QtWidgets.QFrame.Plain)
        self.frame_12.setObjectName("frame_12")
        self.horizontalLayout_20 = QtWidgets.QHBoxLayout(self.frame_12)
        self.horizontalLayout_20.setObjectName("horizontalLayout_20")
        self.Start_VG = QtWidgets.QFrame(self.frame_12)
        self.Start_VG.setMinimumSize(QtCore.QSize(491, 57))
        self.Start_VG.setMaximumSize(QtCore.QSize(491, 57))
        self.Start_VG.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.Start_VG.setFrameShadow(QtWidgets.QFrame.Plain)
        self.Start_VG.setObjectName("Start_VG")
        self.horizontalLayout_12 = QtWidgets.QHBoxLayout(self.Start_VG)
        self.horizontalLayout_12.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_12.setObjectName("horizontalLayout_12")
        self.VG_message_start = QtWidgets.QLabel(self.Start_VG)
        self.VG_message_start.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 16pt \"Calibri\";")
        self.VG_message_start.setObjectName("VG_message_start")
        self.horizontalLayout_12.addWidget(self.VG_message_start)
        self.StartButton_VG = QtWidgets.QPushButton(self.Start_VG)
        self.StartButton_VG.setMaximumSize(QtCore.QSize(93, 28))
        self.StartButton_VG.setStyleSheet("color: rgb(0, 171, 172);\n"
"background-color: rgb(255, 255, 255);")
        self.StartButton_VG.setObjectName("StartButton_VG")
        self.horizontalLayout_12.addWidget(self.StartButton_VG)
        self.horizontalLayout_20.addWidget(self.Start_VG)
        self.frame_13 = QtWidgets.QFrame(self.frame_12)
        self.frame_13.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.frame_13.setFrameShadow(QtWidgets.QFrame.Plain)
        self.frame_13.setObjectName("frame_13")
        self.horizontalLayout_20.addWidget(self.frame_13)
        self.StatsVG = QtWidgets.QFrame(self.frame_12)
        self.StatsVG.setMinimumSize(QtCore.QSize(221, 57))
        self.StatsVG.setMaximumSize(QtCore.QSize(221, 57))
        self.StatsVG.setStyleSheet("QPushButton{\n"
"    background-color: rgb(0, 151, 152);\n"
"    color: #fff;\n"
"}\n"
"QPushButton:hover{\n"
"    border-color: rgb(255, 255, 255);\n"
"    background-color: rgb(0, 181, 182);\n"
"}\n"
"QPushButton:pressed {\n"
"    background-color:  rgb(0, 191, 192);\n"
"    border-bottom: 2px solid rgb(255, 165, 24);\n"
"}")
        self.StatsVG.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.StatsVG.setFrameShadow(QtWidgets.QFrame.Plain)
        self.StatsVG.setObjectName("StatsVG")
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout(self.StatsVG)
        self.horizontalLayout_7.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_7.setSpacing(0)
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.statistics1 = QtWidgets.QLabel(self.StatsVG)
        self.statistics1.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 16pt \"Calibri\";")
        self.statistics1.setObjectName("statistics1")
        self.horizontalLayout_7.addWidget(self.statistics1)
        self.StatsVG_Button = QtWidgets.QPushButton(self.StatsVG)
        self.StatsVG_Button.setMaximumSize(QtCore.QSize(93, 28))
        self.StatsVG_Button.setStyleSheet("")
        self.StatsVG_Button.setObjectName("StatsVG_Button")
        self.horizontalLayout_7.addWidget(self.StatsVG_Button)
        self.horizontalLayout_20.addWidget(self.StatsVG)
        self.verticalLayout_16.addWidget(self.frame_12)
        self.Image_VG = QtWidgets.QFrame(self.frame_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Image_VG.sizePolicy().hasHeightForWidth())
        self.Image_VG.setSizePolicy(sizePolicy)
        self.Image_VG.setMinimumSize(QtCore.QSize(800, 350))
        self.Image_VG.setStyleSheet("background-color: rgb(83, 181, 173);\n"
"")
        self.Image_VG.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.Image_VG.setFrameShadow(QtWidgets.QFrame.Plain)
        self.Image_VG.setObjectName("Image_VG")
        self.gridLayout = QtWidgets.QGridLayout(self.Image_VG)
        self.gridLayout.setObjectName("gridLayout")
        self.VG_tranche_1 = QtWidgets.QLabel(self.Image_VG)
        self.VG_tranche_1.setText("")
        self.VG_tranche_1.setObjectName("VG_tranche_1")
        self.gridLayout.addWidget(self.VG_tranche_1, 0, 0, 1, 1)
        self.VG_tranche_2 = QtWidgets.QLabel(self.Image_VG)
        self.VG_tranche_2.setText("")
        self.VG_tranche_2.setObjectName("VG_tranche_2")
        self.VG_tranche_2.setMaximumSize(QtCore.QSize(250, 200))
        self.gridLayout.addWidget(self.VG_tranche_2, 0, 1, 1, 1)
        self.VG_tranche_3 = QtWidgets.QLabel(self.Image_VG)
        self.VG_tranche_3.setText("")
        self.VG_tranche_3.setObjectName("VG_tranche_3")
        self.gridLayout.addWidget(self.VG_tranche_3, 0, 2, 1, 1)
        self.VG_tranche_4 = QtWidgets.QLabel(self.Image_VG)
        self.VG_tranche_4.setText("")
        self.VG_tranche_4.setObjectName("VG_tranche_4")
        self.gridLayout.addWidget(self.VG_tranche_4, 1, 0, 1, 1)
        self.VG_tranche_5 = QtWidgets.QLabel(self.Image_VG)
        self.VG_tranche_5.setText("")
        self.VG_tranche_5.setObjectName("VG_tranche_5")
        self.gridLayout.addWidget(self.VG_tranche_5, 1, 1, 1, 1)
        self.VG_tranche_6 = QtWidgets.QLabel(self.Image_VG)
        self.VG_tranche_6.setText("")
        self.VG_tranche_6.setObjectName("VG_tranche_6")
        self.gridLayout.addWidget(self.VG_tranche_6, 1, 2, 1, 1)
        self.verticalLayout_16.addWidget(self.Image_VG, 0, QtCore.Qt.AlignHCenter|QtCore.Qt.AlignVCenter)
        self.verticalLayout_17.addWidget(self.frame_3)
        self.stackedWidget.addWidget(self.HomescreenVG)
        self.Statistics_VG = QtWidgets.QWidget()
        self.Statistics_VG.setObjectName("Statistics_VG")
        self.verticalLayout_19 = QtWidgets.QVBoxLayout(self.Statistics_VG)
        self.verticalLayout_19.setObjectName("verticalLayout_19")
        self.frame_14 = QtWidgets.QFrame(self.Statistics_VG)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frame_14.sizePolicy().hasHeightForWidth())
        self.frame_14.setSizePolicy(sizePolicy)
        self.frame_14.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_14.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_14.setObjectName("frame_14")
        self.verticalLayout_18 = QtWidgets.QVBoxLayout(self.frame_14)
        self.verticalLayout_18.setObjectName("verticalLayout_18")
        self.frame_42 = QtWidgets.QFrame(self.frame_14)
        self.frame_42.setMinimumSize(QtCore.QSize(0, 32))
        self.frame_42.setMaximumSize(QtCore.QSize(16777215, 32))
        self.frame_42.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_42.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_42.setObjectName("frame_42")
        self.horizontalLayout_34 = QtWidgets.QHBoxLayout(self.frame_42)
        self.horizontalLayout_34.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_34.setSpacing(0)
        self.horizontalLayout_34.setObjectName("horizontalLayout_34")
        self.frame_43 = QtWidgets.QFrame(self.frame_42)
        self.frame_43.setStyleSheet("")
        self.frame_43.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_43.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_43.setObjectName("frame_43")
        self.horizontalLayout_34.addWidget(self.frame_43)
        self.frame_44 = QtWidgets.QFrame(self.frame_42)
        self.frame_44.setMaximumSize(QtCore.QSize(16777215, 30))
        self.frame_44.setStyleSheet("QPushButton{\n"
"    background-color: rgb(0, 151, 152);\n"
"    color: #fff;\n"
"}\n"
"QPushButton:hover{\n"
"    border-color: rgb(255, 255, 255);\n"
"    background-color: rgb(0, 181, 182);\n"
"}\n"
"QPushButton:pressed {\n"
"    background-color:  rgb(0, 191, 192);\n"
"    border-bottom: 2px solid rgb(255, 165, 24);\n"
"}")
        self.frame_44.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_44.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_44.setObjectName("frame_44")
        self.horizontalLayout_35 = QtWidgets.QHBoxLayout(self.frame_44)
        self.horizontalLayout_35.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_35.setSpacing(0)
        self.horizontalLayout_35.setObjectName("horizontalLayout_35")
        self.pushButton_2 = QtWidgets.QPushButton(self.frame_44)
        self.pushButton_2.setMinimumSize(QtCore.QSize(93, 28))
        self.pushButton_2.setMaximumSize(QtCore.QSize(93, 28))
        self.pushButton_2.setObjectName("pushButton_2")
        self.horizontalLayout_35.addWidget(self.pushButton_2)
        self.horizontalLayout_34.addWidget(self.frame_44)
        self.frame_45 = QtWidgets.QFrame(self.frame_42)
        self.frame_45.setStyleSheet("")
        self.frame_45.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_45.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_45.setObjectName("frame_45")
        self.horizontalLayout_34.addWidget(self.frame_45)
        self.verticalLayout_18.addWidget(self.frame_42)
        self.Stats_1_VG = QtWidgets.QFrame(self.frame_14)
        self.Stats_1_VG.setMinimumSize(QtCore.QSize(800, 250))
        self.Stats_1_VG.setMaximumSize(QtCore.QSize(800, 250))
        self.Stats_1_VG.setStyleSheet("background-color: rgb(83, 181, 173);\n"
"")
        self.Stats_1_VG.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.Stats_1_VG.setFrameShadow(QtWidgets.QFrame.Plain)
        self.Stats_1_VG.setObjectName("Stats_1_VG")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.Stats_1_VG)
        self.verticalLayout_5.setContentsMargins(10, 0, 10, 20)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.T1_VG = QtWidgets.QLabel(self.Stats_1_VG)
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(13)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.T1_VG.setFont(font)
        self.T1_VG.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 10pt \"MS Shell Dlg 2\";")
        self.T1_VG.setText("")
        self.T1_VG.setWordWrap(False)
        self.T1_VG.setObjectName("T1_VG")
        self.verticalLayout_5.addWidget(self.T1_VG)
        self.T2_VG = QtWidgets.QLabel(self.Stats_1_VG)
        self.T2_VG.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 10pt \"MS Shell Dlg 2\";")
        self.T2_VG.setText("")
        self.T2_VG.setWordWrap(False)
        self.T2_VG.setObjectName("T2_VG")
        self.verticalLayout_5.addWidget(self.T2_VG)
        self.T3_VG = QtWidgets.QLabel(self.Stats_1_VG)
        self.T3_VG.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 10pt \"MS Shell Dlg 2\";")
        self.T3_VG.setText("")
        self.T3_VG.setWordWrap(False)
        self.T3_VG.setObjectName("T3_VG")
        self.verticalLayout_5.addWidget(self.T3_VG)
        self.T4_VG = QtWidgets.QLabel(self.Stats_1_VG)
        self.T4_VG.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 10pt \"MS Shell Dlg 2\";")
        self.T4_VG.setText("")
        self.T4_VG.setWordWrap(False)
        self.T4_VG.setObjectName("T4_VG")
        self.verticalLayout_5.addWidget(self.T4_VG)
        self.T5_VG = QtWidgets.QLabel(self.Stats_1_VG)
        self.T5_VG.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 10pt \"MS Shell Dlg 2\";")
        self.T5_VG.setText("")
        self.T5_VG.setWordWrap(False)
        self.T5_VG.setObjectName("T5_VG")
        self.verticalLayout_5.addWidget(self.T5_VG)
        self.T6_VG = QtWidgets.QLabel(self.Stats_1_VG)
        self.T6_VG.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 10pt \"MS Shell Dlg 2\";")
        self.T6_VG.setText("")
        self.T6_VG.setWordWrap(False)
        self.T6_VG.setObjectName("T6_VG")
        self.verticalLayout_5.addWidget(self.T6_VG)
        self.T7_VG = QtWidgets.QLabel(self.Stats_1_VG)
        self.T7_VG.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 10pt \"MS Shell Dlg 2\";")
        self.T7_VG.setText("")
        self.T7_VG.setWordWrap(False)
        self.T7_VG.setObjectName("T7_VG")
        self.verticalLayout_5.addWidget(self.T7_VG)
        self.verticalLayout_18.addWidget(self.Stats_1_VG, 0, QtCore.Qt.AlignHCenter|QtCore.Qt.AlignTop)
        self.frame_17 = QtWidgets.QFrame(self.frame_14)
        self.frame_17.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_17.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_17.setObjectName("frame_17")
        self.horizontalLayout_21 = QtWidgets.QHBoxLayout(self.frame_17)
        self.horizontalLayout_21.setObjectName("horizontalLayout_21")
        self.Stats_2_VG = QtWidgets.QFrame(self.frame_17)
        self.Stats_2_VG.setMinimumSize(QtCore.QSize(500, 120))
        self.Stats_2_VG.setMaximumSize(QtCore.QSize(500, 120))
        self.Stats_2_VG.setStyleSheet("background-color: rgb(83, 181, 173);\n"
"")
        self.Stats_2_VG.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.Stats_2_VG.setFrameShadow(QtWidgets.QFrame.Raised)
        self.Stats_2_VG.setObjectName("Stats_2_VG")
        self.gridLayout_6 = QtWidgets.QGridLayout(self.Stats_2_VG)
        self.gridLayout_6.setObjectName("gridLayout_6")
        self.total_pes_VG = QtWidgets.QLabel(self.Stats_2_VG)
        self.total_pes_VG.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 10pt \"Calibri\";")
        self.total_pes_VG.setText("total pes")
        self.total_pes_VG.setObjectName("total_pes_VG")
        self.gridLayout_6.addWidget(self.total_pes_VG, 0, 0, 1, 1)
        self.total_defect_VG = QtWidgets.QLabel(self.Stats_2_VG)
        self.total_defect_VG.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 10pt \"Calibri\";")
        self.total_defect_VG.setText("total defect")
        self.total_defect_VG.setObjectName("total_defect_VG")
        self.gridLayout_6.addWidget(self.total_defect_VG, 1, 0, 1, 1)
        self.num_pes_VG = QtWidgets.QLCDNumber(self.Stats_2_VG)
        self.num_pes_VG.setStyleSheet("color: rgb(255, 255, 255);")
        self.num_pes_VG.setObjectName("num_pes_VG")
        self.num_pes_VG.display("")
        self.gridLayout_6.addWidget(self.num_pes_VG, 0, 1, 1, 1)
        self.num_defect_VG = QtWidgets.QLCDNumber(self.Stats_2_VG)
        self.num_defect_VG.setStyleSheet("color: rgb(255, 255, 255);")
        self.num_defect_VG.setObjectName("num_defect_VG")
        self.num_defect_VG.display("")
        self.gridLayout_6.addWidget(self.num_defect_VG, 1, 1, 1, 1)
        self.horizontalLayout_21.addWidget(self.Stats_2_VG)
        self.Stats_3_VG = QtWidgets.QFrame(self.frame_17)
        self.Stats_3_VG.setMinimumSize(QtCore.QSize(500, 150))
        self.Stats_3_VG.setMaximumSize(QtCore.QSize(500, 150))
        self.Stats_3_VG.setStyleSheet("background-color: rgb(83, 181, 173);\n"
"")
        self.Stats_3_VG.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.Stats_3_VG.setFrameShadow(QtWidgets.QFrame.Raised)
        self.Stats_3_VG.setObjectName("Stats_3_VG")
        self.gridLayout_5 = QtWidgets.QGridLayout(self.Stats_3_VG)
        self.gridLayout_5.setObjectName("gridLayout_5")
        self.numd1_VG = QtWidgets.QLCDNumber(self.Stats_3_VG)
        self.numd1_VG.setStyleSheet("color: rgb(255, 255, 255);")
        self.numd1_VG.setObjectName("numd1_VG")
        self.numd1_VG.display("")
        self.gridLayout_5.addWidget(self.numd1_VG, 1, 1, 1, 1)
        self.d3_VG = QtWidgets.QLabel(self.Stats_3_VG)
        self.d3_VG.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 10pt \"Calibri\";")
        self.d3_VG.setText("")
        self.d3_VG.setObjectName("d3_VG")
        self.gridLayout_5.addWidget(self.d3_VG, 3, 0, 1, 1)
        self.d4_VG = QtWidgets.QLabel(self.Stats_3_VG)
        self.d4_VG.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 10pt \"Calibri\";")
        self.d4_VG.setText("")
        self.d4_VG.setObjectName("d4_VG")
        self.gridLayout_5.addWidget(self.d4_VG, 4, 0, 1, 1)
        self.numd4_VG = QtWidgets.QLCDNumber(self.Stats_3_VG)
        self.numd4_VG.setStyleSheet("color: rgb(255, 255, 255);")
        self.numd4_VG.setObjectName("numd4_VG")
        self.numd4_VG.display("")
        self.gridLayout_5.addWidget(self.numd4_VG, 4, 1, 1, 1)
        self.d2_VG = QtWidgets.QLabel(self.Stats_3_VG)
        self.d2_VG.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 10pt \"Calibri\";")
        self.d2_VG.setText("")
        self.d2_VG.setObjectName("d2_VG")
        self.gridLayout_5.addWidget(self.d2_VG, 2, 0, 1, 1)
        self.numd2_VG = QtWidgets.QLCDNumber(self.Stats_3_VG)
        self.numd2_VG.setStyleSheet("color: rgb(255, 255, 255);")
        self.numd2_VG.setObjectName("numd2_VG")
        self.numd2_VG.display("")
        self.gridLayout_5.addWidget(self.numd2_VG, 2, 1, 1, 1)
        self.d1_VG = QtWidgets.QLabel(self.Stats_3_VG)
        self.d1_VG.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 10pt \"Calibri\";")
        self.d1_VG.setText("")
        self.d1_VG.setObjectName("d1_VG")
        self.gridLayout_5.addWidget(self.d1_VG, 1, 0, 1, 1)
        self.numd3_VG = QtWidgets.QLCDNumber(self.Stats_3_VG)
        self.numd3_VG.setStyleSheet("color: rgb(255, 255, 255);")
        self.numd3_VG.setObjectName("numd3_VG")
        self.numd3_VG.display("")
        self.gridLayout_5.addWidget(self.numd3_VG, 3, 1, 1, 1)
        self.label = QtWidgets.QLabel(self.Stats_3_VG)
        self.label.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 75 12pt \"Calibri\";")
        self.label.setText("")
        self.label.setObjectName("label")
        self.gridLayout_5.addWidget(self.label, 0, 0, 1, 2)
        self.horizontalLayout_21.addWidget(self.Stats_3_VG)
        self.verticalLayout_18.addWidget(self.frame_17)
        self.verticalLayout_19.addWidget(self.frame_14)
        self.stackedWidget.addWidget(self.Statistics_VG)
        self.HomescreenVB = QtWidgets.QWidget()
        self.HomescreenVB.setObjectName("HomescreenVB")
        self.verticalLayout_21 = QtWidgets.QVBoxLayout(self.HomescreenVB)
        self.verticalLayout_21.setContentsMargins(-1, 0, -1, -1)
        self.verticalLayout_21.setObjectName("verticalLayout_21")
        self.frame_5 = QtWidgets.QFrame(self.HomescreenVB)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frame_5.sizePolicy().hasHeightForWidth())
        self.frame_5.setSizePolicy(sizePolicy)
        self.frame_5.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.frame_5.setFrameShadow(QtWidgets.QFrame.Plain)
        self.frame_5.setObjectName("frame_5")
        self.verticalLayout_20 = QtWidgets.QVBoxLayout(self.frame_5)
        self.verticalLayout_20.setContentsMargins(0, 0, 11, 11)
        self.verticalLayout_20.setSpacing(0)
        self.verticalLayout_20.setObjectName("verticalLayout_20")
        self.frame_18 = QtWidgets.QFrame(self.frame_5)
        self.frame_18.setMinimumSize(QtCore.QSize(1218, 33))
        self.frame_18.setMaximumSize(QtCore.QSize(1218, 33))
        self.frame_18.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_18.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_18.setObjectName("frame_18")
        self.verticalLayout_20.addWidget(self.frame_18)
        self.frame_20 = QtWidgets.QFrame(self.frame_5)
        self.frame_20.setMinimumSize(QtCore.QSize(0, 86))
        self.frame_20.setMaximumSize(QtCore.QSize(16777215, 86))
        self.frame_20.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.frame_20.setFrameShadow(QtWidgets.QFrame.Plain)
        self.frame_20.setObjectName("frame_20")
        self.horizontalLayout_22 = QtWidgets.QHBoxLayout(self.frame_20)
        self.horizontalLayout_22.setObjectName("horizontalLayout_22")
        self.Start_VB = QtWidgets.QFrame(self.frame_20)
        self.Start_VB.setMinimumSize(QtCore.QSize(491, 57))
        self.Start_VB.setMaximumSize(QtCore.QSize(491, 57))
        self.Start_VB.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.Start_VB.setFrameShadow(QtWidgets.QFrame.Plain)
        self.Start_VB.setObjectName("Start_VB")
        self.horizontalLayout_13 = QtWidgets.QHBoxLayout(self.Start_VB)
        self.horizontalLayout_13.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_13.setObjectName("horizontalLayout_13")
        self.VB_message_start = QtWidgets.QLabel(self.Start_VB)
        self.VB_message_start.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 16pt \"Calibri\";")
        self.VB_message_start.setObjectName("VB_message_start")
        self.horizontalLayout_13.addWidget(self.VB_message_start)
        self.StartButton_VB = QtWidgets.QPushButton(self.Start_VB)
        self.StartButton_VB.setMaximumSize(QtCore.QSize(93, 28))
        self.StartButton_VB.setStyleSheet("color: rgb(0, 171, 172);\n"
"background-color: rgb(255, 255, 255);")
        self.StartButton_VB.setObjectName("StartButton_VB")
        self.horizontalLayout_13.addWidget(self.StartButton_VB)
        self.horizontalLayout_22.addWidget(self.Start_VB)
        self.frame_24 = QtWidgets.QFrame(self.frame_20)
        self.frame_24.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.frame_24.setFrameShadow(QtWidgets.QFrame.Plain)
        self.frame_24.setObjectName("frame_24")
        self.horizontalLayout_22.addWidget(self.frame_24)
        self.StatsVB = QtWidgets.QFrame(self.frame_20)
        self.StatsVB.setMinimumSize(QtCore.QSize(221, 57))
        self.StatsVB.setMaximumSize(QtCore.QSize(221, 57))
        self.StatsVB.setStyleSheet("QPushButton{\n"
"    background-color: rgb(0, 151, 152);\n"
"    color: #fff;\n"
"}\n"
"QPushButton:hover{\n"
"    border-color: rgb(255, 255, 255);\n"
"    background-color: rgb(0, 181, 182);\n"
"}\n"
"QPushButton:pressed {\n"
"    background-color:  rgb(0, 191, 192);\n"
"    border-bottom: 2px solid rgb(255, 165, 24);\n"
"}")
        self.StatsVB.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.StatsVB.setFrameShadow(QtWidgets.QFrame.Plain)
        self.StatsVB.setObjectName("StatsVB")
        self.horizontalLayout_23 = QtWidgets.QHBoxLayout(self.StatsVB)
        self.horizontalLayout_23.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_23.setSpacing(0)
        self.horizontalLayout_23.setObjectName("horizontalLayout_23")
        self.statistics2 = QtWidgets.QLabel(self.StatsVB)
        self.statistics2.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 16pt \"Calibri\";")
        self.statistics2.setObjectName("statistics2")
        self.horizontalLayout_23.addWidget(self.statistics2)
        self.StatsVB_Button = QtWidgets.QPushButton(self.StatsVB)
        self.StatsVB_Button.setMaximumSize(QtCore.QSize(93, 28))
        self.StatsVB_Button.setStyleSheet("")
        self.StatsVB_Button.setObjectName("StatsVB_Button")
        self.horizontalLayout_23.addWidget(self.StatsVB_Button)
        self.horizontalLayout_22.addWidget(self.StatsVB)
        self.verticalLayout_20.addWidget(self.frame_20)
        self.Image_VB = QtWidgets.QFrame(self.frame_5)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Image_VB.sizePolicy().hasHeightForWidth())
        self.Image_VB.setSizePolicy(sizePolicy)
        self.Image_VB.setMinimumSize(QtCore.QSize(1000, 581))
        self.Image_VB.setStyleSheet("background-color: rgb(83, 181, 173);\n"
"")
        self.Image_VB.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.Image_VB.setFrameShadow(QtWidgets.QFrame.Plain)
        self.Image_VB.setObjectName("Image_VB")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.Image_VB)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.VB_tranche_1 = QtWidgets.QLabel(self.Image_VB)
        self.VB_tranche_1.setMaximumSize(QtCore.QSize(391, 16777215))
        self.VB_tranche_1.setText("")
        self.VB_tranche_1.setObjectName("VB_tranche_1")
        self.gridLayout_2.addWidget(self.VB_tranche_1, 0, 0, 1, 1)
        self.VB_tranche_2 = QtWidgets.QLabel(self.Image_VB)
        self.VB_tranche_2.setText("")
        self.VB_tranche_2.setObjectName("VB_tranche_2")
        self.gridLayout_2.addWidget(self.VB_tranche_2, 0, 1, 1, 1)
        self.VB_tranche_3 = QtWidgets.QLabel(self.Image_VB)
        self.VB_tranche_3.setText("")
        self.VB_tranche_3.setObjectName("VB_tranche_3")
        self.gridLayout_2.addWidget(self.VB_tranche_3, 0, 2, 1, 1)
        self.VB_tranche_4 = QtWidgets.QLabel(self.Image_VB)
        self.VB_tranche_4.setText("")
        self.VB_tranche_4.setObjectName("VB_tranche_4")
        self.gridLayout_2.addWidget(self.VB_tranche_4, 1, 0, 1, 1)
        self.VB_tranche_5 = QtWidgets.QLabel(self.Image_VB)
        self.VB_tranche_5.setText("")
        self.VB_tranche_5.setObjectName("VB_tranche_5")
        self.gridLayout_2.addWidget(self.VB_tranche_5, 1, 1, 1, 1)
        self.VB_tranche_6 = QtWidgets.QLabel(self.Image_VB)
        self.VB_tranche_6.setText("")
        self.VB_tranche_6.setObjectName("VB_tranche_6")
        self.gridLayout_2.addWidget(self.VB_tranche_6, 1, 2, 1, 1)
        self.verticalLayout_20.addWidget(self.Image_VB, 0, QtCore.Qt.AlignHCenter|QtCore.Qt.AlignVCenter)
        self.verticalLayout_21.addWidget(self.frame_5)
        self.stackedWidget.addWidget(self.HomescreenVB)
        self.Statistics_VB = QtWidgets.QWidget()
        self.Statistics_VB.setObjectName("Statistics_VB")
        self.verticalLayout_29 = QtWidgets.QVBoxLayout(self.Statistics_VB)
        self.verticalLayout_29.setObjectName("verticalLayout_29")
        self.frame_34 = QtWidgets.QFrame(self.Statistics_VB)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frame_34.sizePolicy().hasHeightForWidth())
        self.frame_34.setSizePolicy(sizePolicy)
        self.frame_34.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_34.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_34.setObjectName("frame_34")
        self.verticalLayout_28 = QtWidgets.QVBoxLayout(self.frame_34)
        self.verticalLayout_28.setObjectName("verticalLayout_28")
        self.frame_46 = QtWidgets.QFrame(self.frame_34)
        self.frame_46.setMinimumSize(QtCore.QSize(0, 32))
        self.frame_46.setMaximumSize(QtCore.QSize(16777215, 32))
        self.frame_46.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_46.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_46.setObjectName("frame_46")
        self.horizontalLayout_41 = QtWidgets.QHBoxLayout(self.frame_46)
        self.horizontalLayout_41.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_41.setSpacing(0)
        self.horizontalLayout_41.setObjectName("horizontalLayout_41")
        self.frame_53 = QtWidgets.QFrame(self.frame_46)
        self.frame_53.setStyleSheet("")
        self.frame_53.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_53.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_53.setObjectName("frame_53")
        self.horizontalLayout_41.addWidget(self.frame_53)
        self.frame_54 = QtWidgets.QFrame(self.frame_46)
        self.frame_54.setMaximumSize(QtCore.QSize(16777215, 30))
        self.frame_54.setStyleSheet("QPushButton{\n"
"    background-color: rgb(0, 151, 152);\n"
"    color: #fff;\n"
"}\n"
"QPushButton:hover{\n"
"    border-color: rgb(255, 255, 255);\n"
"    background-color: rgb(0, 181, 182);\n"
"}\n"
"QPushButton:pressed {\n"
"    background-color:  rgb(0, 191, 192);\n"
"    border-bottom: 2px solid rgb(255, 165, 24);\n"
"}")
        self.frame_54.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_54.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_54.setObjectName("frame_54")
        self.horizontalLayout_42 = QtWidgets.QHBoxLayout(self.frame_54)
        self.horizontalLayout_42.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_42.setSpacing(0)
        self.horizontalLayout_42.setObjectName("horizontalLayout_42")
        self.pushButton_6 = QtWidgets.QPushButton(self.frame_54)
        self.pushButton_6.setMinimumSize(QtCore.QSize(93, 28))
        self.pushButton_6.setMaximumSize(QtCore.QSize(93, 28))
        self.pushButton_6.setObjectName("pushButton_6")
        self.horizontalLayout_42.addWidget(self.pushButton_6)
        self.horizontalLayout_41.addWidget(self.frame_54)
        self.frame_55 = QtWidgets.QFrame(self.frame_46)
        self.frame_55.setStyleSheet("")
        self.frame_55.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_55.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_55.setObjectName("frame_55")
        self.horizontalLayout_41.addWidget(self.frame_55)
        self.verticalLayout_28.addWidget(self.frame_46)
        self.Stats_1_VB = QtWidgets.QFrame(self.frame_34)
        self.Stats_1_VB.setMinimumSize(QtCore.QSize(900, 411))
        self.Stats_1_VB.setMaximumSize(QtCore.QSize(900, 411))
        self.Stats_1_VB.setStyleSheet("background-color: rgb(83, 181, 173);\n"
"")
        self.Stats_1_VB.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.Stats_1_VB.setFrameShadow(QtWidgets.QFrame.Raised)
        self.Stats_1_VB.setObjectName("Stats_1_VB")
        self.verticalLayout_7 = QtWidgets.QVBoxLayout(self.Stats_1_VB)
        self.verticalLayout_7.setContentsMargins(10, 0, 10, 20)
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.T1_VB = QtWidgets.QLabel(self.Stats_1_VB)
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(13)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.T1_VB.setFont(font)
        self.T1_VB.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 13pt \"MS Shell Dlg 2\";")
        self.T1_VB.setText("")
        self.T1_VB.setWordWrap(False)
        self.T1_VB.setObjectName("T1_VB")
        self.verticalLayout_7.addWidget(self.T1_VB)
        self.T2_VB = QtWidgets.QLabel(self.Stats_1_VB)
        self.T2_VB.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 13pt \"MS Shell Dlg 2\";")
        self.T2_VB.setText("")
        self.T2_VB.setWordWrap(False)
        self.T2_VB.setObjectName("T2_VB")
        self.verticalLayout_7.addWidget(self.T2_VB)
        self.T3_VB = QtWidgets.QLabel(self.Stats_1_VB)
        self.T3_VB.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 13pt \"MS Shell Dlg 2\";")
        self.T3_VB.setText("")
        self.T3_VB.setWordWrap(False)
        self.T3_VB.setObjectName("T3_VB")
        self.verticalLayout_7.addWidget(self.T3_VB)
        self.T4_VB = QtWidgets.QLabel(self.Stats_1_VB)
        self.T4_VB.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 13pt \"MS Shell Dlg 2\";")
        self.T4_VB.setText("")
        self.T4_VB.setWordWrap(False)
        self.T4_VB.setObjectName("T4_VB")
        self.verticalLayout_7.addWidget(self.T4_VB)
        self.T5_VB = QtWidgets.QLabel(self.Stats_1_VB)
        self.T5_VB.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 13pt \"MS Shell Dlg 2\";")
        self.T5_VB.setText("")
        self.T5_VB.setWordWrap(False)
        self.T5_VB.setObjectName("T5_VB")
        self.verticalLayout_7.addWidget(self.T5_VB)
        self.T6_VB = QtWidgets.QLabel(self.Stats_1_VB)
        self.T6_VB.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 13pt \"MS Shell Dlg 2\";")
        self.T6_VB.setText("")
        self.T6_VB.setWordWrap(False)
        self.T6_VB.setObjectName("T6_VB")
        self.verticalLayout_7.addWidget(self.T6_VB)
        self.T7_VB = QtWidgets.QLabel(self.Stats_1_VB)
        self.T7_VB.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 13pt \"MS Shell Dlg 2\";")
        self.T7_VB.setText("")
        self.T7_VB.setWordWrap(False)
        self.T7_VB.setObjectName("T7_VB")
        self.verticalLayout_7.addWidget(self.T7_VB)
        self.verticalLayout_28.addWidget(self.Stats_1_VB, 0, QtCore.Qt.AlignHCenter)
        self.frame_35 = QtWidgets.QFrame(self.frame_34)
        self.frame_35.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_35.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_35.setObjectName("frame_35")
        self.horizontalLayout_30 = QtWidgets.QHBoxLayout(self.frame_35)
        self.horizontalLayout_30.setObjectName("horizontalLayout_30")
        self.Stats_2_VB = QtWidgets.QFrame(self.frame_35)
        self.Stats_2_VB.setMinimumSize(QtCore.QSize(571, 131))
        self.Stats_2_VB.setMaximumSize(QtCore.QSize(571, 131))
        self.Stats_2_VB.setStyleSheet("background-color: rgb(83, 181, 173);\n"
"")
        self.Stats_2_VB.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.Stats_2_VB.setFrameShadow(QtWidgets.QFrame.Raised)
        self.Stats_2_VB.setObjectName("Stats_2_VB")
        self.gridLayout_9 = QtWidgets.QGridLayout(self.Stats_2_VB)
        self.gridLayout_9.setObjectName("gridLayout_9")
        self.total_pes_VB = QtWidgets.QLabel(self.Stats_2_VB)
        self.total_pes_VB.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 12pt \"Calibri\";")
        self.total_pes_VB.setText("")
        self.total_pes_VB.setObjectName("total_pes_VB")
        self.gridLayout_9.addWidget(self.total_pes_VB, 0, 0, 1, 1)
        self.total_defect_VB = QtWidgets.QLabel(self.Stats_2_VB)
        self.total_defect_VB.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 12pt \"Calibri\";")
        self.total_defect_VB.setText("")
        self.total_defect_VB.setObjectName("total_defect_VB")
        self.gridLayout_9.addWidget(self.total_defect_VB, 1, 0, 1, 1)
        self.num_pes_VB = QtWidgets.QLCDNumber(self.Stats_2_VB)
        self.num_pes_VB.setStyleSheet("color: rgb(255, 255, 255);")
        self.num_pes_VB.setObjectName("num_pes_VB")
        self.num_pes_VB.display("")
        self.gridLayout_9.addWidget(self.num_pes_VB, 0, 1, 1, 1)
        self.num_defect_VB = QtWidgets.QLCDNumber(self.Stats_2_VB)
        self.num_defect_VB.setStyleSheet("color: rgb(255, 255, 255);")
        self.num_defect_VB.setObjectName("num_defect_VB")
        self.num_defect_VB.display("")
        self.gridLayout_9.addWidget(self.num_defect_VB, 1, 1, 1, 1)
        self.horizontalLayout_30.addWidget(self.Stats_2_VB)
        self.Stats_3_VB = QtWidgets.QFrame(self.frame_35)
        self.Stats_3_VB.setMinimumSize(QtCore.QSize(0, 230))
        self.Stats_3_VB.setMaximumSize(QtCore.QSize(601, 201))
        self.Stats_3_VB.setStyleSheet("background-color: rgb(83, 181, 173);\n"
"")
        self.Stats_3_VB.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.Stats_3_VB.setFrameShadow(QtWidgets.QFrame.Raised)
        self.Stats_3_VB.setObjectName("Stats_3_VB")
        self.gridLayout_15 = QtWidgets.QGridLayout(self.Stats_3_VB)
        self.gridLayout_15.setObjectName("gridLayout_15")
        self.numd2_VB = QtWidgets.QLCDNumber(self.Stats_3_VB)
        self.numd2_VB.setStyleSheet("color: rgb(255, 255, 255);")
        self.numd2_VB.setObjectName("numd2_VB")
        self.numd2_VB.display("")
        self.gridLayout_15.addWidget(self.numd2_VB, 2, 1, 1, 1)
        self.numd1_VB = QtWidgets.QLCDNumber(self.Stats_3_VB)
        self.numd1_VB.setStyleSheet("color: rgb(255, 255, 255);")
        self.numd1_VB.setObjectName("numd1_VB")
        self.numd1_VB.display("")
        self.gridLayout_15.addWidget(self.numd1_VB, 1, 1, 1, 1)
        self.d3_VB = QtWidgets.QLabel(self.Stats_3_VB)
        self.d3_VB.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 12pt \"Calibri\";")
        self.d3_VB.setText("")
        self.d3_VB.setObjectName("d3_VB")
        self.gridLayout_15.addWidget(self.d3_VB, 3, 0, 1, 1)
        self.numd3_VB = QtWidgets.QLCDNumber(self.Stats_3_VB)
        self.numd3_VB.setStyleSheet("color: rgb(255, 255, 255);")
        self.numd3_VB.setObjectName("numd3_VB")
        self.numd3_VB.display("")
        self.gridLayout_15.addWidget(self.numd3_VB, 3, 1, 1, 1)
        self.d2_VB = QtWidgets.QLabel(self.Stats_3_VB)
        self.d2_VB.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 12pt \"Calibri\";")
        self.d2_VB.setText("")
        self.d2_VB.setObjectName("d2_VB")
        self.gridLayout_15.addWidget(self.d2_VB, 2, 0, 1, 1)
        self.d1_VB = QtWidgets.QLabel(self.Stats_3_VB)
        self.d1_VB.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 12pt \"Calibri\";")
        self.d1_VB.setText("")
        self.d1_VB.setObjectName("d1_VB")
        self.gridLayout_15.addWidget(self.d1_VB, 1, 0, 1, 1)
        self.label_2 = QtWidgets.QLabel(self.Stats_3_VB)
        self.label_2.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 75 12pt \"Calibri\";\n"
"")
        self.label_2.setText("")
        self.label_2.setObjectName("label_2")
        self.gridLayout_15.addWidget(self.label_2, 0, 0, 1, 2)
        self.horizontalLayout_30.addWidget(self.Stats_3_VB)
        self.verticalLayout_28.addWidget(self.frame_35)
        self.verticalLayout_29.addWidget(self.frame_34)
        self.stackedWidget.addWidget(self.Statistics_VB)
        self.HomescreenVT = QtWidgets.QWidget()
        self.HomescreenVT.setObjectName("HomescreenVT")
        self.verticalLayout_23 = QtWidgets.QVBoxLayout(self.HomescreenVT)
        self.verticalLayout_23.setContentsMargins(11, 0, -1, 11)
        self.verticalLayout_23.setObjectName("verticalLayout_23")
        self.frame_6 = QtWidgets.QFrame(self.HomescreenVT)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frame_6.sizePolicy().hasHeightForWidth())
        self.frame_6.setSizePolicy(sizePolicy)
        self.frame_6.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.frame_6.setFrameShadow(QtWidgets.QFrame.Plain)
        self.frame_6.setObjectName("frame_6")
        self.verticalLayout_22 = QtWidgets.QVBoxLayout(self.frame_6)
        self.verticalLayout_22.setContentsMargins(11, 0, 11, 11)
        self.verticalLayout_22.setSpacing(0)
        self.verticalLayout_22.setObjectName("verticalLayout_22")
        self.frame_25 = QtWidgets.QFrame(self.frame_6)
        self.frame_25.setMinimumSize(QtCore.QSize(1218, 33))
        self.frame_25.setMaximumSize(QtCore.QSize(1218, 33))
        self.frame_25.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_25.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_25.setObjectName("frame_25")
        self.verticalLayout_22.addWidget(self.frame_25)
        self.frame_26 = QtWidgets.QFrame(self.frame_6)
        self.frame_26.setMinimumSize(QtCore.QSize(0, 86))
        self.frame_26.setMaximumSize(QtCore.QSize(16777215, 86))
        self.frame_26.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.frame_26.setFrameShadow(QtWidgets.QFrame.Plain)
        self.frame_26.setObjectName("frame_26")
        self.horizontalLayout_24 = QtWidgets.QHBoxLayout(self.frame_26)
        self.horizontalLayout_24.setObjectName("horizontalLayout_24")
        self.Start_VT = QtWidgets.QFrame(self.frame_26)
        self.Start_VT.setMinimumSize(QtCore.QSize(491, 57))
        self.Start_VT.setMaximumSize(QtCore.QSize(491, 57))
        self.Start_VT.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.Start_VT.setFrameShadow(QtWidgets.QFrame.Plain)
        self.Start_VT.setObjectName("Start_VT")
        self.horizontalLayout_14 = QtWidgets.QHBoxLayout(self.Start_VT)
        self.horizontalLayout_14.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_14.setObjectName("horizontalLayout_14")
        self.VT_message_start = QtWidgets.QLabel(self.Start_VT)
        self.VT_message_start.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 16pt \"Calibri\";")
        self.VT_message_start.setObjectName("VT_message_start")
        self.horizontalLayout_14.addWidget(self.VT_message_start)
        self.StartButton_VT = QtWidgets.QPushButton(self.Start_VT)
        self.StartButton_VT.setMaximumSize(QtCore.QSize(93, 28))
        self.StartButton_VT.setStyleSheet("color: rgb(0, 171, 172);\n"
"background-color: rgb(255, 255, 255);")
        self.StartButton_VT.setObjectName("StartButton_VT")
        self.horizontalLayout_14.addWidget(self.StartButton_VT)
        self.horizontalLayout_24.addWidget(self.Start_VT)
        self.frame_27 = QtWidgets.QFrame(self.frame_26)
        self.frame_27.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.frame_27.setFrameShadow(QtWidgets.QFrame.Plain)
        self.frame_27.setObjectName("frame_27")
        self.horizontalLayout_24.addWidget(self.frame_27)
        self.StatsVT = QtWidgets.QFrame(self.frame_26)
        self.StatsVT.setMinimumSize(QtCore.QSize(221, 57))
        self.StatsVT.setMaximumSize(QtCore.QSize(221, 57))
        self.StatsVT.setStyleSheet("QPushButton{\n"
"    background-color: rgb(0, 151, 152);\n"
"    color: #fff;\n"
"}\n"
"QPushButton:hover{\n"
"    border-color: rgb(255, 255, 255);\n"
"    background-color: rgb(0, 181, 182);\n"
"}\n"
"QPushButton:pressed {\n"
"    background-color:  rgb(0, 191, 192);\n"
"    border-bottom: 2px solid rgb(255, 165, 24);\n"
"}")
        self.StatsVT.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.StatsVT.setFrameShadow(QtWidgets.QFrame.Plain)
        self.StatsVT.setObjectName("StatsVT")
        self.horizontalLayout_25 = QtWidgets.QHBoxLayout(self.StatsVT)
        self.horizontalLayout_25.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_25.setSpacing(0)
        self.horizontalLayout_25.setObjectName("horizontalLayout_25")
        self.statistics3 = QtWidgets.QLabel(self.StatsVT)
        self.statistics3.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 16pt \"Calibri\";")
        self.statistics3.setObjectName("statistics3")
        self.horizontalLayout_25.addWidget(self.statistics3)
        self.StatsVT_Button = QtWidgets.QPushButton(self.StatsVT)
        self.StatsVT_Button.setMaximumSize(QtCore.QSize(93, 28))
        self.StatsVT_Button.setStyleSheet("")
        self.StatsVT_Button.setObjectName("StatsVT_Button")
        self.horizontalLayout_25.addWidget(self.StatsVT_Button)
        self.horizontalLayout_24.addWidget(self.StatsVT)
        self.verticalLayout_22.addWidget(self.frame_26)
        self.Image_VT = QtWidgets.QFrame(self.frame_6)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Image_VT.sizePolicy().hasHeightForWidth())
        self.Image_VT.setSizePolicy(sizePolicy)
        self.Image_VT.setMinimumSize(QtCore.QSize(1000, 581))
        self.Image_VT.setStyleSheet("background-color: rgb(83, 181, 173);\n"
"")
        self.Image_VT.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.Image_VT.setFrameShadow(QtWidgets.QFrame.Plain)
        self.Image_VT.setObjectName("Image_VT")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.Image_VT)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.VT_tranche_1 = QtWidgets.QLabel(self.Image_VT)
        self.VT_tranche_1.setMaximumSize(QtCore.QSize(391, 16777215))
        self.VT_tranche_1.setText("")
        self.VT_tranche_1.setObjectName("VT_tranche_1")
        self.gridLayout_3.addWidget(self.VT_tranche_1, 0, 0, 1, 1)
        self.VT_tranche_2 = QtWidgets.QLabel(self.Image_VT)
        self.VT_tranche_2.setText("")
        self.VT_tranche_2.setObjectName("VT_tranche_2")
        self.gridLayout_3.addWidget(self.VT_tranche_2, 0, 1, 1, 1)
        self.VT_tranche_3 = QtWidgets.QLabel(self.Image_VT)
        self.VT_tranche_3.setText("")
        self.VT_tranche_3.setObjectName("VT_tranche_3")
        self.gridLayout_3.addWidget(self.VT_tranche_3, 0, 2, 1, 1)
        self.VT_tranche_4 = QtWidgets.QLabel(self.Image_VT)
        self.VT_tranche_4.setText("")
        self.VT_tranche_4.setObjectName("VT_tranche_4")
        self.gridLayout_3.addWidget(self.VT_tranche_4, 1, 0, 1, 1)
        self.VT_tranche_5 = QtWidgets.QLabel(self.Image_VT)
        self.VT_tranche_5.setText("")
        self.VT_tranche_5.setObjectName("VT_tranche_5")
        self.gridLayout_3.addWidget(self.VT_tranche_5, 1, 1, 1, 1)
        self.VT_tranche_6 = QtWidgets.QLabel(self.Image_VT)
        self.VT_tranche_6.setText("")
        self.VT_tranche_6.setObjectName("VT_tranche_6")
        self.gridLayout_3.addWidget(self.VT_tranche_6, 1, 2, 1, 1)
        self.verticalLayout_22.addWidget(self.Image_VT, 0, QtCore.Qt.AlignHCenter|QtCore.Qt.AlignVCenter)
        self.verticalLayout_23.addWidget(self.frame_6)
        self.stackedWidget.addWidget(self.HomescreenVT)
        self.Statistics_VT = QtWidgets.QWidget()
        self.Statistics_VT.setObjectName("Statistics_VT")
        self.verticalLayout_31 = QtWidgets.QVBoxLayout(self.Statistics_VT)
        self.verticalLayout_31.setObjectName("verticalLayout_31")
        self.frame_36 = QtWidgets.QFrame(self.Statistics_VT)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frame_36.sizePolicy().hasHeightForWidth())
        self.frame_36.setSizePolicy(sizePolicy)
        self.frame_36.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_36.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_36.setObjectName("frame_36")
        self.verticalLayout_30 = QtWidgets.QVBoxLayout(self.frame_36)
        self.verticalLayout_30.setObjectName("verticalLayout_30")
        self.frame_56 = QtWidgets.QFrame(self.frame_36)
        self.frame_56.setMinimumSize(QtCore.QSize(0, 32))
        self.frame_56.setMaximumSize(QtCore.QSize(16777215, 32))
        self.frame_56.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_56.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_56.setObjectName("frame_56")
        self.horizontalLayout_43 = QtWidgets.QHBoxLayout(self.frame_56)
        self.horizontalLayout_43.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_43.setSpacing(0)
        self.horizontalLayout_43.setObjectName("horizontalLayout_43")
        self.frame_57 = QtWidgets.QFrame(self.frame_56)
        self.frame_57.setStyleSheet("")
        self.frame_57.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_57.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_57.setObjectName("frame_57")
        self.horizontalLayout_43.addWidget(self.frame_57)
        self.frame_58 = QtWidgets.QFrame(self.frame_56)
        self.frame_58.setMaximumSize(QtCore.QSize(16777215, 30))
        self.frame_58.setStyleSheet("QPushButton{\n"
"    background-color: rgb(0, 151, 152);\n"
"    color: #fff;\n"
"}\n"
"QPushButton:hover{\n"
"    border-color: rgb(255, 255, 255);\n"
"    background-color: rgb(0, 181, 182);\n"
"}\n"
"QPushButton:pressed {\n"
"    background-color:  rgb(0, 191, 192);\n"
"    border-bottom: 2px solid rgb(255, 165, 24);\n"
"}")
        self.frame_58.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_58.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_58.setObjectName("frame_58")
        self.horizontalLayout_44 = QtWidgets.QHBoxLayout(self.frame_58)
        self.horizontalLayout_44.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_44.setSpacing(0)
        self.horizontalLayout_44.setObjectName("horizontalLayout_44")
        self.pushButton_7 = QtWidgets.QPushButton(self.frame_58)
        self.pushButton_7.setMinimumSize(QtCore.QSize(93, 28))
        self.pushButton_7.setMaximumSize(QtCore.QSize(93, 28))
        self.pushButton_7.setObjectName("pushButton_7")
        self.horizontalLayout_44.addWidget(self.pushButton_7)
        self.horizontalLayout_43.addWidget(self.frame_58)
        self.frame_59 = QtWidgets.QFrame(self.frame_56)
        self.frame_59.setStyleSheet("")
        self.frame_59.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_59.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_59.setObjectName("frame_59")
        self.horizontalLayout_43.addWidget(self.frame_59)
        self.verticalLayout_30.addWidget(self.frame_56)
        self.Stats_1_VT = QtWidgets.QFrame(self.frame_36)
        self.Stats_1_VT.setMinimumSize(QtCore.QSize(900, 411))
        self.Stats_1_VT.setMaximumSize(QtCore.QSize(900, 411))
        self.Stats_1_VT.setStyleSheet("background-color: rgb(83, 181, 173);\n"
"")
        self.Stats_1_VT.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.Stats_1_VT.setFrameShadow(QtWidgets.QFrame.Raised)
        self.Stats_1_VT.setObjectName("Stats_1_VT")
        self.verticalLayout_12 = QtWidgets.QVBoxLayout(self.Stats_1_VT)
        self.verticalLayout_12.setContentsMargins(10, 0, 10, 20)
        self.verticalLayout_12.setObjectName("verticalLayout_12")
        self.T1_VT = QtWidgets.QLabel(self.Stats_1_VT)
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(13)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.T1_VT.setFont(font)
        self.T1_VT.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 13pt \"MS Shell Dlg 2\";")
        self.T1_VT.setText("")
        self.T1_VT.setWordWrap(False)
        self.T1_VT.setObjectName("T1_VT")
        self.verticalLayout_12.addWidget(self.T1_VT)
        self.T2_VT = QtWidgets.QLabel(self.Stats_1_VT)
        self.T2_VT.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 13pt \"MS Shell Dlg 2\";")
        self.T2_VT.setText("")
        self.T2_VT.setWordWrap(False)
        self.T2_VT.setObjectName("T2_VT")
        self.verticalLayout_12.addWidget(self.T2_VT)
        self.T3_VT = QtWidgets.QLabel(self.Stats_1_VT)
        self.T3_VT.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 13pt \"MS Shell Dlg 2\";")
        self.T3_VT.setText("")
        self.T3_VT.setWordWrap(False)
        self.T3_VT.setObjectName("T3_VT")
        self.verticalLayout_12.addWidget(self.T3_VT)
        self.T4_VT = QtWidgets.QLabel(self.Stats_1_VT)
        self.T4_VT.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 13pt \"MS Shell Dlg 2\";")
        self.T4_VT.setText("")
        self.T4_VT.setWordWrap(False)
        self.T4_VT.setObjectName("T4_VT")
        self.verticalLayout_12.addWidget(self.T4_VT)
        self.T5_VT = QtWidgets.QLabel(self.Stats_1_VT)
        self.T5_VT.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 13pt \"MS Shell Dlg 2\";")
        self.T5_VT.setText("")
        self.T5_VT.setWordWrap(False)
        self.T5_VT.setObjectName("T5_VT")
        self.verticalLayout_12.addWidget(self.T5_VT)
        self.T6_VT = QtWidgets.QLabel(self.Stats_1_VT)
        self.T6_VT.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 13pt \"MS Shell Dlg 2\";")
        self.T6_VT.setText("")
        self.T6_VT.setWordWrap(False)
        self.T6_VT.setObjectName("T6_VT")
        self.verticalLayout_12.addWidget(self.T6_VT)
        self.T7_VT = QtWidgets.QLabel(self.Stats_1_VT)
        self.T7_VT.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 13pt \"MS Shell Dlg 2\";")
        self.T7_VT.setText("")
        self.T7_VT.setWordWrap(False)
        self.T7_VT.setObjectName("T7_VT")
        self.verticalLayout_12.addWidget(self.T7_VT)
        self.T8_VT = QtWidgets.QLabel(self.Stats_1_VT)
        self.T8_VT.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 13pt \"MS Shell Dlg 2\";")
        self.T8_VT.setText("")
        self.T8_VT.setWordWrap(False)
        self.T8_VT.setObjectName("T8_VT")
        self.verticalLayout_12.addWidget(self.T8_VT)
        self.T9_VT = QtWidgets.QLabel(self.Stats_1_VT)
        self.T9_VT.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 13pt \"MS Shell Dlg 2\";")
        self.T9_VT.setText("")
        self.T9_VT.setWordWrap(False)
        self.T9_VT.setObjectName("T9_VT")
        self.verticalLayout_12.addWidget(self.T9_VT)
        self.T10_VT = QtWidgets.QLabel(self.Stats_1_VT)
        self.T10_VT.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 13pt \"MS Shell Dlg 2\";")
        self.T10_VT.setText("")
        self.T10_VT.setWordWrap(False)
        self.T10_VT.setObjectName("T10_VT")
        self.verticalLayout_12.addWidget(self.T10_VT)
        self.verticalLayout_30.addWidget(self.Stats_1_VT, 0, QtCore.Qt.AlignHCenter)
        self.frame_37 = QtWidgets.QFrame(self.frame_36)
        self.frame_37.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_37.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_37.setObjectName("frame_37")
        self.horizontalLayout_31 = QtWidgets.QHBoxLayout(self.frame_37)
        self.horizontalLayout_31.setObjectName("horizontalLayout_31")
        self.Stats_2_VT = QtWidgets.QFrame(self.frame_37)
        self.Stats_2_VT.setMinimumSize(QtCore.QSize(571, 131))
        self.Stats_2_VT.setMaximumSize(QtCore.QSize(571, 131))
        self.Stats_2_VT.setStyleSheet("background-color: rgb(83, 181, 173);\n"
"")
        self.Stats_2_VT.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.Stats_2_VT.setFrameShadow(QtWidgets.QFrame.Raised)
        self.Stats_2_VT.setObjectName("Stats_2_VT")
        self.gridLayout_10 = QtWidgets.QGridLayout(self.Stats_2_VT)
        self.gridLayout_10.setObjectName("gridLayout_10")
        self.total_pes_VT = QtWidgets.QLabel(self.Stats_2_VT)
        self.total_pes_VT.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 12pt \"Calibri\";")
        self.total_pes_VT.setText("")
        self.total_pes_VT.setObjectName("total_pes_VT")
        self.gridLayout_10.addWidget(self.total_pes_VT, 0, 0, 1, 1)
        self.total_defect_VT = QtWidgets.QLabel(self.Stats_2_VT)
        self.total_defect_VT.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 12pt \"Calibri\";")
        self.total_defect_VT.setText("")
        self.total_defect_VT.setObjectName("total_defect_VT")
        self.gridLayout_10.addWidget(self.total_defect_VT, 1, 0, 1, 1)
        self.num_pes_VT = QtWidgets.QLCDNumber(self.Stats_2_VT)
        self.num_pes_VT.setStyleSheet("color: rgb(255, 255, 255);")
        self.num_pes_VT.setObjectName("num_pes_VT")
        self.num_pes_VT.display("")
        self.gridLayout_10.addWidget(self.num_pes_VT, 0, 1, 1, 1)
        self.num_defect_VT = QtWidgets.QLCDNumber(self.Stats_2_VT)
        self.num_defect_VT.setStyleSheet("color: rgb(255, 255, 255);")
        self.num_defect_VT.setObjectName("num_defect_VT")
        self.num_defect_VT.display("")
        self.gridLayout_10.addWidget(self.num_defect_VT, 1, 1, 1, 1)
        self.horizontalLayout_31.addWidget(self.Stats_2_VT)
        self.Stats_3_VT = QtWidgets.QFrame(self.frame_37)
        self.Stats_3_VT.setMinimumSize(QtCore.QSize(0, 230))
        self.Stats_3_VT.setMaximumSize(QtCore.QSize(601, 301))
        self.Stats_3_VT.setStyleSheet("background-color: rgb(83, 181, 173);\n"
"")
        self.Stats_3_VT.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.Stats_3_VT.setFrameShadow(QtWidgets.QFrame.Raised)
        self.Stats_3_VT.setObjectName("Stats_3_VT")
        self.gridLayout_17 = QtWidgets.QGridLayout(self.Stats_3_VT)
        self.gridLayout_17.setObjectName("gridLayout_17")
        self.numd4_VT = QtWidgets.QLCDNumber(self.Stats_3_VT)
        self.numd4_VT.setStyleSheet("color: rgb(255, 255, 255);")
        self.numd4_VT.setObjectName("numd4_VT")
        self.numd4_VT.display("")
        self.gridLayout_17.addWidget(self.numd4_VT, 5, 1, 1, 1)
        self.numd1_VT = QtWidgets.QLCDNumber(self.Stats_3_VT)
        self.numd1_VT.setStyleSheet("color: rgb(255, 255, 255);")
        self.numd1_VT.setObjectName("numd1_VT")
        self.numd1_VT.display("")
        self.gridLayout_17.addWidget(self.numd1_VT, 1, 1, 1, 1)
        self.d3_VT = QtWidgets.QLabel(self.Stats_3_VT)
        self.d3_VT.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 12pt \"Calibri\";")
        self.d3_VT.setText("")
        self.d3_VT.setObjectName("d3_VT")
        self.gridLayout_17.addWidget(self.d3_VT, 3, 0, 1, 1)
        self.d4_VT = QtWidgets.QLabel(self.Stats_3_VT)
        self.d4_VT.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 12pt \"Calibri\";")
        self.d4_VT.setText("")
        self.d4_VT.setObjectName("d4_VT")
        self.gridLayout_17.addWidget(self.d4_VT, 5, 0, 1, 1)
        self.numd3_VT = QtWidgets.QLCDNumber(self.Stats_3_VT)
        self.numd3_VT.setStyleSheet("color: rgb(255, 255, 255);")
        self.numd3_VT.setObjectName("numd3_VT")
        self.numd3_VT.display("")
        self.gridLayout_17.addWidget(self.numd3_VT, 3, 1, 1, 1)
        self.d1_VT = QtWidgets.QLabel(self.Stats_3_VT)
        self.d1_VT.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 12pt \"Calibri\";")
        self.d1_VT.setText("")
        self.d1_VT.setObjectName("d1_VT")
        self.gridLayout_17.addWidget(self.d1_VT, 1, 0, 1, 1)
        self.d2_VT = QtWidgets.QLabel(self.Stats_3_VT)
        self.d2_VT.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 12pt \"Calibri\";")
        self.d2_VT.setText("")
        self.d2_VT.setObjectName("d2_VT")
        self.gridLayout_17.addWidget(self.d2_VT, 2, 0, 1, 1)
        self.numd2_VT = QtWidgets.QLCDNumber(self.Stats_3_VT)
        self.numd2_VT.setStyleSheet("color: rgb(255, 255, 255);")
        self.numd2_VT.setObjectName("numd2_VT")
        self.numd2_VT.display("")
        self.gridLayout_17.addWidget(self.numd2_VT, 2, 1, 1, 1)
        self.label_3 = QtWidgets.QLabel(self.Stats_3_VT)
        self.label_3.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 75 12pt \"Calibri\";\n"
"")
        self.label_3.setText("")
        self.label_3.setObjectName("label_3")
        self.gridLayout_17.addWidget(self.label_3, 0, 0, 1, 2)
        self.horizontalLayout_31.addWidget(self.Stats_3_VT)
        self.verticalLayout_30.addWidget(self.frame_37)
        self.verticalLayout_31.addWidget(self.frame_36)
        self.stackedWidget.addWidget(self.Statistics_VT)
        self.HomescreenW = QtWidgets.QWidget()
        self.HomescreenW.setObjectName("HomescreenW")
        self.verticalLayout_25 = QtWidgets.QVBoxLayout(self.HomescreenW)
        self.verticalLayout_25.setContentsMargins(-1, 0, -1, -1)
        self.verticalLayout_25.setObjectName("verticalLayout_25")
        self.frame_7 = QtWidgets.QFrame(self.HomescreenW)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frame_7.sizePolicy().hasHeightForWidth())
        self.frame_7.setSizePolicy(sizePolicy)
        self.frame_7.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.frame_7.setFrameShadow(QtWidgets.QFrame.Plain)
        self.frame_7.setObjectName("frame_7")
        self.verticalLayout_24 = QtWidgets.QVBoxLayout(self.frame_7)
        self.verticalLayout_24.setContentsMargins(11, 0, 11, 11)
        self.verticalLayout_24.setSpacing(0)
        self.verticalLayout_24.setObjectName("verticalLayout_24")
        self.frame_28 = QtWidgets.QFrame(self.frame_7)
        self.frame_28.setMinimumSize(QtCore.QSize(1218, 33))
        self.frame_28.setMaximumSize(QtCore.QSize(1218, 33))
        self.frame_28.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_28.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_28.setObjectName("frame_28")
        self.verticalLayout_24.addWidget(self.frame_28)
        self.frame_29 = QtWidgets.QFrame(self.frame_7)
        self.frame_29.setMinimumSize(QtCore.QSize(0, 86))
        self.frame_29.setMaximumSize(QtCore.QSize(16777215, 86))
        self.frame_29.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.frame_29.setFrameShadow(QtWidgets.QFrame.Plain)
        self.frame_29.setObjectName("frame_29")
        self.horizontalLayout_26 = QtWidgets.QHBoxLayout(self.frame_29)
        self.horizontalLayout_26.setObjectName("horizontalLayout_26")
        self.Start_W = QtWidgets.QFrame(self.frame_29)
        self.Start_W.setMinimumSize(QtCore.QSize(491, 57))
        self.Start_W.setMaximumSize(QtCore.QSize(491, 57))
        self.Start_W.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.Start_W.setFrameShadow(QtWidgets.QFrame.Plain)
        self.Start_W.setObjectName("Start_W")
        self.horizontalLayout_15 = QtWidgets.QHBoxLayout(self.Start_W)
        self.horizontalLayout_15.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_15.setObjectName("horizontalLayout_15")
        self.W_message_start = QtWidgets.QLabel(self.Start_W)
        self.W_message_start.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 16pt \"Calibri\";")
        self.W_message_start.setObjectName("W_message_start")
        self.horizontalLayout_15.addWidget(self.W_message_start)
        self.StartButton_W = QtWidgets.QPushButton(self.Start_W)
        self.StartButton_W.setMaximumSize(QtCore.QSize(93, 28))
        self.StartButton_W.setStyleSheet("color: rgb(0, 171, 172);\n"
"background-color: rgb(255, 255, 255);")
        self.StartButton_W.setObjectName("StartButton_W")
        self.horizontalLayout_15.addWidget(self.StartButton_W)
        self.horizontalLayout_26.addWidget(self.Start_W)
        self.frame_30 = QtWidgets.QFrame(self.frame_29)
        self.frame_30.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.frame_30.setFrameShadow(QtWidgets.QFrame.Plain)
        self.frame_30.setObjectName("frame_30")
        self.horizontalLayout_26.addWidget(self.frame_30)
        self.StatsW = QtWidgets.QFrame(self.frame_29)
        self.StatsW.setMinimumSize(QtCore.QSize(221, 57))
        self.StatsW.setMaximumSize(QtCore.QSize(221, 57))
        self.StatsW.setStyleSheet("QPushButton{\n"
"    background-color: rgb(0, 151, 152);\n"
"    color: #fff;\n"
"}\n"
"QPushButton:hover{\n"
"    border-color: rgb(255, 255, 255);\n"
"    background-color: rgb(0, 181, 182);\n"
"}\n"
"QPushButton:pressed {\n"
"    background-color:  rgb(0, 191, 192);\n"
"    border-bottom: 2px solid rgb(255, 165, 24);\n"
"}")
        self.StatsW.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.StatsW.setFrameShadow(QtWidgets.QFrame.Plain)
        self.StatsW.setObjectName("StatsW")
        self.horizontalLayout_27 = QtWidgets.QHBoxLayout(self.StatsW)
        self.horizontalLayout_27.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_27.setSpacing(0)
        self.horizontalLayout_27.setObjectName("horizontalLayout_27")
        self.statistics4 = QtWidgets.QLabel(self.StatsW)
        self.statistics4.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 16pt \"Calibri\";")
        self.statistics4.setObjectName("statistics4")
        self.horizontalLayout_27.addWidget(self.statistics4)
        self.StatsW_Button = QtWidgets.QPushButton(self.StatsW)
        self.StatsW_Button.setMaximumSize(QtCore.QSize(93, 28))
        self.StatsW_Button.setStyleSheet("")
        self.StatsW_Button.setObjectName("StatsW_Button")
        self.horizontalLayout_27.addWidget(self.StatsW_Button)
        self.horizontalLayout_26.addWidget(self.StatsW)
        self.verticalLayout_24.addWidget(self.frame_29)
        self.Image_W = QtWidgets.QFrame(self.frame_7)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Image_W.sizePolicy().hasHeightForWidth())
        self.Image_W.setSizePolicy(sizePolicy)
        self.Image_W.setMinimumSize(QtCore.QSize(1000, 581))
        self.Image_W.setStyleSheet("background-color: rgb(83, 181, 173);\n"
"")
        self.Image_W.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.Image_W.setFrameShadow(QtWidgets.QFrame.Plain)
        self.Image_W.setObjectName("Image_W")
        self.gridLayout_4 = QtWidgets.QGridLayout(self.Image_W)
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.W_tranche_1 = QtWidgets.QLabel(self.Image_W)
        self.W_tranche_1.setMaximumSize(QtCore.QSize(391, 16777215))
        self.W_tranche_1.setText("")
        self.W_tranche_1.setObjectName("W_tranche_1")
        self.gridLayout_4.addWidget(self.W_tranche_1, 0, 0, 1, 1)
        self.W_tranche_2 = QtWidgets.QLabel(self.Image_W)
        self.W_tranche_2.setText("")
        self.W_tranche_2.setObjectName("W_tranche_2")
        self.gridLayout_4.addWidget(self.W_tranche_2, 0, 1, 1, 1)
        self.W_tranche_3 = QtWidgets.QLabel(self.Image_W)
        self.W_tranche_3.setText("")
        self.W_tranche_3.setObjectName("W_tranche_3")
        self.gridLayout_4.addWidget(self.W_tranche_3, 0, 2, 1, 1)
        self.W_tranche_4 = QtWidgets.QLabel(self.Image_W)
        self.W_tranche_4.setText("")
        self.W_tranche_4.setObjectName("W_tranche_4")
        self.gridLayout_4.addWidget(self.W_tranche_4, 1, 0, 1, 1)
        self.W_tranche_5 = QtWidgets.QLabel(self.Image_W)
        self.W_tranche_5.setText("")
        self.W_tranche_5.setObjectName("W_tranche_5")
        self.gridLayout_4.addWidget(self.W_tranche_5, 1, 1, 1, 1)
        self.W_tranche_6 = QtWidgets.QLabel(self.Image_W)
        self.W_tranche_6.setText("")
        self.W_tranche_6.setObjectName("W_tranche_6")
        self.gridLayout_4.addWidget(self.W_tranche_6, 1, 2, 1, 1)
        self.verticalLayout_24.addWidget(self.Image_W, 0, QtCore.Qt.AlignHCenter|QtCore.Qt.AlignVCenter)
        self.verticalLayout_25.addWidget(self.frame_7)
        self.stackedWidget.addWidget(self.HomescreenW)
        self.Statistics_W = QtWidgets.QWidget()
        self.Statistics_W.setObjectName("Statistics_W")
        self.verticalLayout_33 = QtWidgets.QVBoxLayout(self.Statistics_W)
        self.verticalLayout_33.setObjectName("verticalLayout_33")
        self.frame_60 = QtWidgets.QFrame(self.Statistics_W)
        self.frame_60.setMinimumSize(QtCore.QSize(0, 32))
        self.frame_60.setMaximumSize(QtCore.QSize(16777215, 32))
        self.frame_60.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_60.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_60.setObjectName("frame_60")
        self.horizontalLayout_45 = QtWidgets.QHBoxLayout(self.frame_60)
        self.horizontalLayout_45.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_45.setSpacing(0)
        self.horizontalLayout_45.setObjectName("horizontalLayout_45")
        self.frame_61 = QtWidgets.QFrame(self.frame_60)
        self.frame_61.setStyleSheet("")
        self.frame_61.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_61.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_61.setObjectName("frame_61")
        self.horizontalLayout_45.addWidget(self.frame_61)
        self.frame_62 = QtWidgets.QFrame(self.frame_60)
        self.frame_62.setMaximumSize(QtCore.QSize(16777215, 30))
        self.frame_62.setStyleSheet("QPushButton{\n"
"    background-color: rgb(0, 151, 152);\n"
"    color: #fff;\n"
"}\n"
"QPushButton:hover{\n"
"    border-color: rgb(255, 255, 255);\n"
"    background-color: rgb(0, 181, 182);\n"
"}\n"
"QPushButton:pressed {\n"
"    background-color:  rgb(0, 191, 192);\n"
"    border-bottom: 2px solid rgb(255, 165, 24);\n"
"}")
        self.frame_62.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_62.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_62.setObjectName("frame_62")
        self.horizontalLayout_46 = QtWidgets.QHBoxLayout(self.frame_62)
        self.horizontalLayout_46.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_46.setSpacing(0)
        self.horizontalLayout_46.setObjectName("horizontalLayout_46")
        self.pushButton_8 = QtWidgets.QPushButton(self.frame_62)
        self.pushButton_8.setMinimumSize(QtCore.QSize(93, 28))
        self.pushButton_8.setMaximumSize(QtCore.QSize(93, 28))
        self.pushButton_8.setObjectName("pushButton_8")
        self.horizontalLayout_46.addWidget(self.pushButton_8)
        self.horizontalLayout_45.addWidget(self.frame_62)
        self.frame_63 = QtWidgets.QFrame(self.frame_60)
        self.frame_63.setStyleSheet("")
        self.frame_63.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_63.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_63.setObjectName("frame_63")
        self.horizontalLayout_45.addWidget(self.frame_63)
        self.verticalLayout_33.addWidget(self.frame_60)
        self.frame_38 = QtWidgets.QFrame(self.Statistics_W)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frame_38.sizePolicy().hasHeightForWidth())
        self.frame_38.setSizePolicy(sizePolicy)
        self.frame_38.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_38.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_38.setObjectName("frame_38")
        self.verticalLayout_32 = QtWidgets.QVBoxLayout(self.frame_38)
        self.verticalLayout_32.setContentsMargins(-1, 0, -1, -1)
        self.verticalLayout_32.setObjectName("verticalLayout_32")
        self.Stats_1_W = QtWidgets.QFrame(self.frame_38)
        self.Stats_1_W.setMinimumSize(QtCore.QSize(900, 411))
        self.Stats_1_W.setMaximumSize(QtCore.QSize(900, 411))
        self.Stats_1_W.setStyleSheet("background-color: rgb(83, 181, 173);\n"
"")
        self.Stats_1_W.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.Stats_1_W.setFrameShadow(QtWidgets.QFrame.Raised)
        self.Stats_1_W.setObjectName("Stats_1_W")
        self.verticalLayout_13 = QtWidgets.QVBoxLayout(self.Stats_1_W)
        self.verticalLayout_13.setContentsMargins(10, 0, 10, 20)
        self.verticalLayout_13.setObjectName("verticalLayout_13")
        self.T1_W = QtWidgets.QLabel(self.Stats_1_W)
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(13)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.T1_W.setFont(font)
        self.T1_W.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 13pt \"MS Shell Dlg 2\";")
        self.T1_W.setText("")
        self.T1_W.setWordWrap(False)
        self.T1_W.setObjectName("T1_W")
        self.verticalLayout_13.addWidget(self.T1_W)
        self.T2_W = QtWidgets.QLabel(self.Stats_1_W)
        self.T2_W.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 13pt \"MS Shell Dlg 2\";")
        self.T2_W.setText("")
        self.T2_W.setWordWrap(False)
        self.T2_W.setObjectName("T2_W")
        self.verticalLayout_13.addWidget(self.T2_W)
        self.T3_W = QtWidgets.QLabel(self.Stats_1_W)
        self.T3_W.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 13pt \"MS Shell Dlg 2\";")
        self.T3_W.setText("")
        self.T3_W.setWordWrap(False)
        self.T3_W.setObjectName("T3_W")
        self.verticalLayout_13.addWidget(self.T3_W)
        self.T4_W = QtWidgets.QLabel(self.Stats_1_W)
        self.T4_W.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 13pt \"MS Shell Dlg 2\";")
        self.T4_W.setText("")
        self.T4_W.setWordWrap(False)
        self.T4_W.setObjectName("T4_W")
        self.verticalLayout_13.addWidget(self.T4_W)
        self.T5_W = QtWidgets.QLabel(self.Stats_1_W)
        self.T5_W.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 13pt \"MS Shell Dlg 2\";")
        self.T5_W.setText("")
        self.T5_W.setWordWrap(False)
        self.T5_W.setObjectName("T5_W")
        self.verticalLayout_13.addWidget(self.T5_W)
        self.T6_W = QtWidgets.QLabel(self.Stats_1_W)
        self.T6_W.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 13pt \"MS Shell Dlg 2\";")
        self.T6_W.setText("")
        self.T6_W.setWordWrap(False)
        self.T6_W.setObjectName("T6_W")
        self.verticalLayout_13.addWidget(self.T6_W)
        self.T7_W = QtWidgets.QLabel(self.Stats_1_W)
        self.T7_W.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 13pt \"MS Shell Dlg 2\";")
        self.T7_W.setText("")
        self.T7_W.setWordWrap(False)
        self.T7_W.setObjectName("T7_W")
        self.verticalLayout_13.addWidget(self.T7_W)
        self.verticalLayout_32.addWidget(self.Stats_1_W, 0, QtCore.Qt.AlignHCenter)
        self.frame_39 = QtWidgets.QFrame(self.frame_38)
        self.frame_39.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_39.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_39.setObjectName("frame_39")
        self.horizontalLayout_32 = QtWidgets.QHBoxLayout(self.frame_39)
        self.horizontalLayout_32.setObjectName("horizontalLayout_32")
        self.Stats_2_W = QtWidgets.QFrame(self.frame_39)
        self.Stats_2_W.setMinimumSize(QtCore.QSize(571, 131))
        self.Stats_2_W.setMaximumSize(QtCore.QSize(571, 131))
        self.Stats_2_W.setStyleSheet("background-color: rgb(83, 181, 173);\n"
"")
        self.Stats_2_W.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.Stats_2_W.setFrameShadow(QtWidgets.QFrame.Raised)
        self.Stats_2_W.setObjectName("Stats_2_W")
        self.gridLayout_11 = QtWidgets.QGridLayout(self.Stats_2_W)
        self.gridLayout_11.setObjectName("gridLayout_11")
        self.total_pes_W = QtWidgets.QLabel(self.Stats_2_W)
        self.total_pes_W.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 12pt \"Calibri\";")
        self.total_pes_W.setText("")
        self.total_pes_W.setObjectName("total_pes_W")
        self.gridLayout_11.addWidget(self.total_pes_W, 0, 0, 1, 1)
        self.total_defect_W = QtWidgets.QLabel(self.Stats_2_W)
        self.total_defect_W.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 12pt \"Calibri\";")
        self.total_defect_W.setText("")
        self.total_defect_W.setObjectName("total_defect_W")
        self.gridLayout_11.addWidget(self.total_defect_W, 1, 0, 1, 1)
        self.num_pes_W = QtWidgets.QLCDNumber(self.Stats_2_W)
        self.num_pes_W.setStyleSheet("color: rgb(255, 255, 255);")
        self.num_pes_W.setObjectName("num_pes_W")
        self.num_pes_W.display("")
        self.gridLayout_11.addWidget(self.num_pes_W, 0, 1, 1, 1)
        self.num_defect_W = QtWidgets.QLCDNumber(self.Stats_2_W)
        self.num_defect_W.setStyleSheet("color: rgb(255, 255, 255);")
        self.num_defect_W.setObjectName("num_defect_W")
        self.num_defect_W.display("")
        self.gridLayout_11.addWidget(self.num_defect_W, 1, 1, 1, 1)
        self.horizontalLayout_32.addWidget(self.Stats_2_W)
        self.Stats_3_W = QtWidgets.QFrame(self.frame_39)
        self.Stats_3_W.setMinimumSize(QtCore.QSize(0, 161))
        self.Stats_3_W.setMaximumSize(QtCore.QSize(601, 131))
        self.Stats_3_W.setStyleSheet("background-color: rgb(83, 181, 173);\n"
"")
        self.Stats_3_W.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.Stats_3_W.setFrameShadow(QtWidgets.QFrame.Raised)
        self.Stats_3_W.setObjectName("Stats_3_W")
        self.gridLayout_19 = QtWidgets.QGridLayout(self.Stats_3_W)
        self.gridLayout_19.setObjectName("gridLayout_19")
        self.d1_W = QtWidgets.QLabel(self.Stats_3_W)
        self.d1_W.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 12pt \"Calibri\";")
        self.d1_W.setText("")
        self.d1_W.setObjectName("d1_W")
        self.gridLayout_19.addWidget(self.d1_W, 1, 0, 1, 1)
        self.numd1_W = QtWidgets.QLCDNumber(self.Stats_3_W)
        self.numd1_W.setStyleSheet("color: rgb(255, 255, 255);")
        self.numd1_W.setObjectName("numd1_W")
        self.numd1_W.display("")
        self.gridLayout_19.addWidget(self.numd1_W, 1, 1, 1, 1)
        self.d2_W = QtWidgets.QLabel(self.Stats_3_W)
        self.d2_W.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 12pt \"Calibri\";")
        self.d2_W.setText("")
        self.d2_W.setObjectName("d2_W")
        self.gridLayout_19.addWidget(self.d2_W, 2, 0, 1, 1)
        self.numd2_W = QtWidgets.QLCDNumber(self.Stats_3_W)
        self.numd2_W.setStyleSheet("color: rgb(255, 255, 255);")
        self.numd2_W.setObjectName("numd2_W")
        self.numd2_W.display("")
        self.gridLayout_19.addWidget(self.numd2_W, 2, 1, 1, 1)
        self.label_4 = QtWidgets.QLabel(self.Stats_3_W)
        self.label_4.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 75 12pt \"Calibri\";")
        self.label_4.setText("")
        self.label_4.setObjectName("label_4")
        self.gridLayout_19.addWidget(self.label_4, 0, 0, 1, 2)
        self.horizontalLayout_32.addWidget(self.Stats_3_W)
        self.verticalLayout_32.addWidget(self.frame_39)
        self.verticalLayout_33.addWidget(self.frame_38)
        self.stackedWidget.addWidget(self.Statistics_W)
        self.HomescreenD = QtWidgets.QWidget()
        self.HomescreenD.setObjectName("HomescreenD")
        self.verticalLayout_27 = QtWidgets.QVBoxLayout(self.HomescreenD)
        self.verticalLayout_27.setContentsMargins(-1, 0, -1, -1)
        self.verticalLayout_27.setObjectName("verticalLayout_27")
        self.frame_8 = QtWidgets.QFrame(self.HomescreenD)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frame_8.sizePolicy().hasHeightForWidth())
        self.frame_8.setSizePolicy(sizePolicy)
        self.frame_8.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.frame_8.setFrameShadow(QtWidgets.QFrame.Plain)
        self.frame_8.setObjectName("frame_8")
        self.verticalLayout_26 = QtWidgets.QVBoxLayout(self.frame_8)
        self.verticalLayout_26.setContentsMargins(11, 0, 11, 11)
        self.verticalLayout_26.setSpacing(0)
        self.verticalLayout_26.setObjectName("verticalLayout_26")
        self.frame_31 = QtWidgets.QFrame(self.frame_8)
        self.frame_31.setMinimumSize(QtCore.QSize(1218, 33))
        self.frame_31.setMaximumSize(QtCore.QSize(1218, 33))
        self.frame_31.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_31.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_31.setObjectName("frame_31")
        self.verticalLayout_26.addWidget(self.frame_31)
        self.frame_32 = QtWidgets.QFrame(self.frame_8)
        self.frame_32.setMinimumSize(QtCore.QSize(0, 86))
        self.frame_32.setMaximumSize(QtCore.QSize(16777215, 86))
        self.frame_32.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.frame_32.setFrameShadow(QtWidgets.QFrame.Plain)
        self.frame_32.setObjectName("frame_32")
        self.horizontalLayout_28 = QtWidgets.QHBoxLayout(self.frame_32)
        self.horizontalLayout_28.setObjectName("horizontalLayout_28")
        self.Start_D = QtWidgets.QFrame(self.frame_32)
        self.Start_D.setMinimumSize(QtCore.QSize(491, 57))
        self.Start_D.setMaximumSize(QtCore.QSize(491, 57))
        self.Start_D.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.Start_D.setFrameShadow(QtWidgets.QFrame.Plain)
        self.Start_D.setObjectName("Start_D")
        self.horizontalLayout_16 = QtWidgets.QHBoxLayout(self.Start_D)
        self.horizontalLayout_16.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_16.setObjectName("horizontalLayout_16")
        self.D_message_start = QtWidgets.QLabel(self.Start_D)
        self.D_message_start.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 16pt \"Calibri\";")
        self.D_message_start.setObjectName("D_message_start")
        self.horizontalLayout_16.addWidget(self.D_message_start)
        self.StartButton_D = QtWidgets.QPushButton(self.Start_D)
        self.StartButton_D.setMaximumSize(QtCore.QSize(93, 28))
        self.StartButton_D.setStyleSheet("color: rgb(0, 171, 172);\n"
"background-color: rgb(255, 255, 255);")
        self.StartButton_D.setObjectName("StartButton_D")
        self.horizontalLayout_16.addWidget(self.StartButton_D)
        self.horizontalLayout_28.addWidget(self.Start_D)
        self.frame_33 = QtWidgets.QFrame(self.frame_32)
        self.frame_33.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.frame_33.setFrameShadow(QtWidgets.QFrame.Plain)
        self.frame_33.setObjectName("frame_33")
        self.horizontalLayout_28.addWidget(self.frame_33)
        self.StatsD = QtWidgets.QFrame(self.frame_32)
        self.StatsD.setMinimumSize(QtCore.QSize(221, 57))
        self.StatsD.setMaximumSize(QtCore.QSize(221, 57))
        self.StatsD.setStyleSheet("QPushButton{\n"
"    background-color: rgb(0, 151, 152);\n"
"    color: #fff;\n"
"}\n"
"QPushButton:hover{\n"
"    border-color: rgb(255, 255, 255);\n"
"    background-color: rgb(0, 181, 182);\n"
"}\n"
"QPushButton:pressed {\n"
"    background-color:  rgb(0, 191, 192);\n"
"    border-bottom: 2px solid rgb(255, 165, 24);\n"
"}")
        self.StatsD.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.StatsD.setFrameShadow(QtWidgets.QFrame.Plain)
        self.StatsD.setObjectName("StatsD")
        self.horizontalLayout_29 = QtWidgets.QHBoxLayout(self.StatsD)
        self.horizontalLayout_29.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_29.setSpacing(0)
        self.horizontalLayout_29.setObjectName("horizontalLayout_29")
        self.statistics5 = QtWidgets.QLabel(self.StatsD)
        self.statistics5.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 16pt \"Calibri\";")
        self.statistics5.setObjectName("statistics5")
        self.horizontalLayout_29.addWidget(self.statistics5)
        self.StatsD_Button = QtWidgets.QPushButton(self.StatsD)
        self.StatsD_Button.setMaximumSize(QtCore.QSize(93, 28))
        self.StatsD_Button.setStyleSheet("")
        self.StatsD_Button.setObjectName("StatsD_Button")
        self.horizontalLayout_29.addWidget(self.StatsD_Button)
        self.horizontalLayout_28.addWidget(self.StatsD)
        self.verticalLayout_26.addWidget(self.frame_32)
        self.image_D = QtWidgets.QFrame(self.frame_8)
        self.image_D.setMinimumSize(QtCore.QSize(0, 0))
        self.image_D.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.image_D.setStyleSheet("background-color: rgb(83, 181, 173);\n"
"")
        self.image_D.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.image_D.setFrameShadow(QtWidgets.QFrame.Raised)
        self.image_D.setObjectName("image_D")
        self.horizontalLayout_10 = QtWidgets.QHBoxLayout(self.image_D)
        self.horizontalLayout_10.setObjectName("horizontalLayout_10")
        self.D_tranche_1 = QtWidgets.QLabel(self.image_D)
        self.D_tranche_1.setText("")
        self.D_tranche_1.setObjectName("D_tranche_1")
        self.horizontalLayout_10.addWidget(self.D_tranche_1)
        self.D_tranche_2 = QtWidgets.QLabel(self.image_D)
        self.D_tranche_2.setText("")
        self.D_tranche_2.setObjectName("D_tranche_2")
        self.horizontalLayout_10.addWidget(self.D_tranche_2)
        self.verticalLayout_26.addWidget(self.image_D)
        self.verticalLayout_27.addWidget(self.frame_8)
        self.stackedWidget.addWidget(self.HomescreenD)
        self.Statistics_D = QtWidgets.QWidget()
        self.Statistics_D.setObjectName("Statistics_D")
        self.verticalLayout_35 = QtWidgets.QVBoxLayout(self.Statistics_D)
        self.verticalLayout_35.setObjectName("verticalLayout_35")
        self.frame_64 = QtWidgets.QFrame(self.Statistics_D)
        self.frame_64.setMinimumSize(QtCore.QSize(0, 32))
        self.frame_64.setMaximumSize(QtCore.QSize(16777215, 32))
        self.frame_64.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_64.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_64.setObjectName("frame_64")
        self.horizontalLayout_47 = QtWidgets.QHBoxLayout(self.frame_64)
        self.horizontalLayout_47.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_47.setSpacing(0)
        self.horizontalLayout_47.setObjectName("horizontalLayout_47")
        self.frame_65 = QtWidgets.QFrame(self.frame_64)
        self.frame_65.setStyleSheet("")
        self.frame_65.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_65.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_65.setObjectName("frame_65")
        self.horizontalLayout_47.addWidget(self.frame_65)
        self.frame_66 = QtWidgets.QFrame(self.frame_64)
        self.frame_66.setMaximumSize(QtCore.QSize(16777215, 30))
        self.frame_66.setStyleSheet("QPushButton{\n"
"    background-color: rgb(0, 151, 152);\n"
"    color: #fff;\n"
"}\n"
"QPushButton:hover{\n"
"    border-color: rgb(255, 255, 255);\n"
"    background-color: rgb(0, 181, 182);\n"
"}\n"
"QPushButton:pressed {\n"
"    background-color:  rgb(0, 191, 192);\n"
"    border-bottom: 2px solid rgb(255, 165, 24);\n"
"}")
        self.frame_66.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_66.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_66.setObjectName("frame_66")
        self.horizontalLayout_48 = QtWidgets.QHBoxLayout(self.frame_66)
        self.horizontalLayout_48.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_48.setSpacing(0)
        self.horizontalLayout_48.setObjectName("horizontalLayout_48")
        self.pushButton_9 = QtWidgets.QPushButton(self.frame_66)
        self.pushButton_9.setMinimumSize(QtCore.QSize(93, 28))
        self.pushButton_9.setMaximumSize(QtCore.QSize(93, 28))
        self.pushButton_9.setObjectName("pushButton_9")
        self.horizontalLayout_48.addWidget(self.pushButton_9)
        self.horizontalLayout_47.addWidget(self.frame_66)
        self.frame_67 = QtWidgets.QFrame(self.frame_64)
        self.frame_67.setStyleSheet("")
        self.frame_67.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_67.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_67.setObjectName("frame_67")
        self.horizontalLayout_47.addWidget(self.frame_67)
        self.verticalLayout_35.addWidget(self.frame_64)
        self.frame_40 = QtWidgets.QFrame(self.Statistics_D)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frame_40.sizePolicy().hasHeightForWidth())
        self.frame_40.setSizePolicy(sizePolicy)
        self.frame_40.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_40.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_40.setObjectName("frame_40")
        self.verticalLayout_34 = QtWidgets.QVBoxLayout(self.frame_40)
        self.verticalLayout_34.setContentsMargins(-1, 0, -1, -1)
        self.verticalLayout_34.setObjectName("verticalLayout_34")
        self.Stats_1_D = QtWidgets.QFrame(self.frame_40)
        self.Stats_1_D.setMinimumSize(QtCore.QSize(900, 411))
        self.Stats_1_D.setMaximumSize(QtCore.QSize(900, 411))
        self.Stats_1_D.setStyleSheet("background-color: rgb(83, 181, 173);\n"
"")
        self.Stats_1_D.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.Stats_1_D.setFrameShadow(QtWidgets.QFrame.Raised)
        self.Stats_1_D.setObjectName("Stats_1_D")
        self.verticalLayout_14 = QtWidgets.QVBoxLayout(self.Stats_1_D)
        self.verticalLayout_14.setContentsMargins(10, 0, 10, 20)
        self.verticalLayout_14.setObjectName("verticalLayout_14")
        self.T1_D = QtWidgets.QLabel(self.Stats_1_D)
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(13)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.T1_D.setFont(font)
        self.T1_D.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 13pt \"MS Shell Dlg 2\";")
        self.T1_D.setText("")
        self.T1_D.setWordWrap(False)
        self.T1_D.setObjectName("T1_D")
        self.verticalLayout_14.addWidget(self.T1_D)
        self.T2_D = QtWidgets.QLabel(self.Stats_1_D)
        self.T2_D.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 13pt \"MS Shell Dlg 2\";")
        self.T2_D.setText("")
        self.T2_D.setWordWrap(False)
        self.T2_D.setObjectName("T2_D")
        self.verticalLayout_14.addWidget(self.T2_D)
        self.T3_D = QtWidgets.QLabel(self.Stats_1_D)
        self.T3_D.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 13pt \"MS Shell Dlg 2\";")
        self.T3_D.setText("")
        self.T3_D.setWordWrap(False)
        self.T3_D.setObjectName("T3_D")
        self.verticalLayout_14.addWidget(self.T3_D)
        self.T4_D = QtWidgets.QLabel(self.Stats_1_D)
        self.T4_D.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 13pt \"MS Shell Dlg 2\";")
        self.T4_D.setText("")
        self.T4_D.setWordWrap(False)
        self.T4_D.setObjectName("T4_D")
        self.verticalLayout_14.addWidget(self.T4_D)
        self.T5_D = QtWidgets.QLabel(self.Stats_1_D)
        self.T5_D.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 13pt \"MS Shell Dlg 2\";")
        self.T5_D.setText("")
        self.T5_D.setWordWrap(False)
        self.T5_D.setObjectName("T5_D")
        self.verticalLayout_14.addWidget(self.T5_D)
        self.T6_D = QtWidgets.QLabel(self.Stats_1_D)
        self.T6_D.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 13pt \"MS Shell Dlg 2\";")
        self.T6_D.setText("")
        self.T6_D.setWordWrap(False)
        self.T6_D.setObjectName("T6_D")
        self.verticalLayout_14.addWidget(self.T6_D)
        self.T7_D = QtWidgets.QLabel(self.Stats_1_D)
        self.T7_D.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 13pt \"MS Shell Dlg 2\";")
        self.T7_D.setText("")
        self.T7_D.setWordWrap(False)
        self.T7_D.setObjectName("T7_D")
        self.verticalLayout_14.addWidget(self.T7_D)
        self.verticalLayout_34.addWidget(self.Stats_1_D, 0, QtCore.Qt.AlignHCenter)
        self.frame_41 = QtWidgets.QFrame(self.frame_40)
        self.frame_41.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_41.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_41.setObjectName("frame_41")
        self.horizontalLayout_33 = QtWidgets.QHBoxLayout(self.frame_41)
        self.horizontalLayout_33.setObjectName("horizontalLayout_33")
        self.Stats_2_D = QtWidgets.QFrame(self.frame_41)
        self.Stats_2_D.setMinimumSize(QtCore.QSize(571, 131))
        self.Stats_2_D.setMaximumSize(QtCore.QSize(571, 131))
        self.Stats_2_D.setStyleSheet("background-color: rgb(83, 181, 173);\n"
"")
        self.Stats_2_D.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.Stats_2_D.setFrameShadow(QtWidgets.QFrame.Raised)
        self.Stats_2_D.setObjectName("Stats_2_D")
        self.gridLayout_12 = QtWidgets.QGridLayout(self.Stats_2_D)
        self.gridLayout_12.setObjectName("gridLayout_12")
        self.total_pes_D = QtWidgets.QLabel(self.Stats_2_D)
        self.total_pes_D.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 12pt \"Calibri\";")
        self.total_pes_D.setText("")
        self.total_pes_D.setObjectName("total_pes_D")
        self.gridLayout_12.addWidget(self.total_pes_D, 0, 0, 1, 1)
        self.total_defect_D = QtWidgets.QLabel(self.Stats_2_D)
        self.total_defect_D.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 12pt \"Calibri\";")
        self.total_defect_D.setText("")
        self.total_defect_D.setObjectName("total_defect_D")
        self.gridLayout_12.addWidget(self.total_defect_D, 1, 0, 1, 1)
        self.num_pes_D = QtWidgets.QLCDNumber(self.Stats_2_D)
        self.num_pes_D.setStyleSheet("color: rgb(255, 255, 255);")
        self.num_pes_D.setObjectName("num_pes_D")
        self.gridLayout_12.addWidget(self.num_pes_D, 0, 1, 1, 1)
        self.num_defect_D = QtWidgets.QLCDNumber(self.Stats_2_D)
        self.num_defect_D.setStyleSheet("color: rgb(255, 255, 255);")
        self.num_defect_D.setObjectName("num_defect_D")
        self.gridLayout_12.addWidget(self.num_defect_D, 1, 1, 1, 1)
        self.horizontalLayout_33.addWidget(self.Stats_2_D)
        self.Stats_3_D = QtWidgets.QFrame(self.frame_41)
        self.Stats_3_D.setMinimumSize(QtCore.QSize(0, 230))
        self.Stats_3_D.setMaximumSize(QtCore.QSize(601, 201))
        self.Stats_3_D.setStyleSheet("background-color: rgb(83, 181, 173);\n"
"")
        self.Stats_3_D.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.Stats_3_D.setFrameShadow(QtWidgets.QFrame.Raised)
        self.Stats_3_D.setObjectName("Stats_3_D")
        self.gridLayout_21 = QtWidgets.QGridLayout(self.Stats_3_D)
        self.gridLayout_21.setObjectName("gridLayout_21")
        self.numd1_D = QtWidgets.QLCDNumber(self.Stats_3_D)
        self.numd1_D.setStyleSheet("color: rgb(255, 255, 255);")
        self.numd1_D.setObjectName("numd1_D")
        self.gridLayout_21.addWidget(self.numd1_D, 1, 1, 1, 1)
        self.d3_D = QtWidgets.QLabel(self.Stats_3_D)
        self.d3_D.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 12pt \"Calibri\";")
        self.d3_D.setText("")
        self.d3_D.setObjectName("d3_D")
        self.gridLayout_21.addWidget(self.d3_D, 3, 0, 1, 1)
        self.d2_D = QtWidgets.QLabel(self.Stats_3_D)
        self.d2_D.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 12pt \"Calibri\";")
        self.d2_D.setText("")
        self.d2_D.setObjectName("d2_D")
        self.gridLayout_21.addWidget(self.d2_D, 2, 0, 1, 1)
        self.numd2_D = QtWidgets.QLCDNumber(self.Stats_3_D)
        self.numd2_D.setStyleSheet("color: rgb(255, 255, 255);")
        self.numd2_D.setObjectName("numd2_D")
        self.gridLayout_21.addWidget(self.numd2_D, 2, 1, 1, 1)
        self.de1_D = QtWidgets.QLabel(self.Stats_3_D)
        self.de1_D.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 12pt \"Calibri\";")
        self.de1_D.setText("")
        self.de1_D.setObjectName("de1_D")
        self.gridLayout_21.addWidget(self.de1_D, 1, 0, 1, 1)
        self.numd3_D = QtWidgets.QLCDNumber(self.Stats_3_D)
        self.numd3_D.setStyleSheet("color: rgb(255, 255, 255);")
        self.numd3_D.setObjectName("numd3_D")
        self.gridLayout_21.addWidget(self.numd3_D, 3, 1, 1, 1)
        self.label_5 = QtWidgets.QLabel(self.Stats_3_D)
        self.label_5.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 75 12pt \"Calibri\";")
        self.label_5.setText("")
        self.label_5.setObjectName("label_5")
        self.gridLayout_21.addWidget(self.label_5, 0, 0, 1, 2)
        self.horizontalLayout_33.addWidget(self.Stats_3_D)
        self.verticalLayout_34.addWidget(self.frame_41)
        self.verticalLayout_35.addWidget(self.frame_40)
        self.stackedWidget.addWidget(self.Statistics_D)
        self.verticalLayout_2.addWidget(self.stackedWidget)
        self.horizontalLayout.addWidget(self.center_main_items)
        self.verticalLayout.addWidget(self.main_body)
        self.main_footer = QtWidgets.QFrame(self.centralwidget)
        self.main_footer.setMinimumSize(QtCore.QSize(0, 150))
        self.main_footer.setMaximumSize(QtCore.QSize(16777215, 150))
        self.main_footer.setStyleSheet("QFrame{\n"
"    background-color: rgb(99, 99, 99);\n"
"    border-top-color: solid 1px  rgb(99, 99, 99);\n"
"}\n"
"QLabel{\n"
"    color: #fff;\n"
"}")
        self.main_footer.setFrameShape(QtWidgets.QFrame.WinPanel)
        self.main_footer.setFrameShadow(QtWidgets.QFrame.Raised)
        self.main_footer.setObjectName("main_footer")
        self.verticalLayout_10 = QtWidgets.QVBoxLayout(self.main_footer)
        self.verticalLayout_10.setObjectName("verticalLayout_10")
        self.frame_47 = QtWidgets.QFrame(self.main_footer)
        self.frame_47.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_47.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_47.setObjectName("frame_47")
        self.verticalLayout_36 = QtWidgets.QVBoxLayout(self.frame_47)
        self.verticalLayout_36.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_36.setObjectName("verticalLayout_36")
        self.scrollArea = QtWidgets.QScrollArea(self.frame_47)
        self.scrollArea.setMaximumSize(QtCore.QSize(16777215, 100))
        self.scrollArea.setStyleSheet("background-color: rgb(0, 151, 152);")
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 1367, 613))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.verticalLayout_37 = QtWidgets.QVBoxLayout(self.scrollAreaWidgetContents)
        self.verticalLayout_37.setObjectName("verticalLayout_37")
        self.label_6 = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.label_6.setText("")
        self.label_6.setObjectName("label_6")
        self.verticalLayout_37.addWidget(self.label_6)
        self.label_7 = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.label_7.setText("")
        self.label_7.setObjectName("label_7")
        self.verticalLayout_37.addWidget(self.label_7)
        self.label_8 = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.label_8.setText("")
        self.label_8.setObjectName("label_8")
        self.verticalLayout_37.addWidget(self.label_8)
        self.label_9 = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.label_9.setText("")
        self.label_9.setObjectName("label_9")
        self.verticalLayout_37.addWidget(self.label_9)
        self.label_10 = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.label_10.setText("")
        self.label_10.setObjectName("label_10")
        self.verticalLayout_37.addWidget(self.label_10)
        self.label_11 = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.label_11.setText("")
        self.label_11.setObjectName("label_11")
        self.verticalLayout_37.addWidget(self.label_11)
        self.label_12 = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.label_12.setText("")
        self.label_12.setObjectName("label_12")
        self.verticalLayout_37.addWidget(self.label_12)
        self.label_13 = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.label_13.setText("")
        self.label_13.setObjectName("label_13")
        self.verticalLayout_37.addWidget(self.label_13)
        self.label_14 = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.label_14.setText("")
        self.label_14.setObjectName("label_14")
        self.verticalLayout_37.addWidget(self.label_14)
        self.label_15 = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.label_15.setText("")
        self.label_15.setObjectName("label_15")
        self.verticalLayout_37.addWidget(self.label_15)
        self.label_16 = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.label_16.setText("")
        self.label_16.setObjectName("label_16")
        self.verticalLayout_37.addWidget(self.label_16)
        self.label_17 = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.label_17.setText("")
        self.label_17.setObjectName("label_17")
        self.verticalLayout_37.addWidget(self.label_17)
        self.label_18 = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.label_18.setText("")
        self.label_18.setObjectName("label_18")
        self.verticalLayout_37.addWidget(self.label_18)
        self.label_19 = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.label_19.setText("")
        self.label_19.setObjectName("label_19")
        self.verticalLayout_37.addWidget(self.label_19)
        self.label_20 = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.label_20.setText("")
        self.label_20.setObjectName("label_20")
        self.verticalLayout_37.addWidget(self.label_20)
        self.label_21 = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.label_21.setText("")
        self.label_21.setObjectName("label_21")
        self.verticalLayout_37.addWidget(self.label_21)
        self.label_22 = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.label_22.setText("")
        self.label_22.setObjectName("label_22")
        self.verticalLayout_37.addWidget(self.label_22)
        self.label_23 = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.label_23.setText("")
        self.label_23.setObjectName("label_23")
        self.verticalLayout_37.addWidget(self.label_23)
        self.label_24 = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.label_24.setText("")
        self.label_24.setObjectName("label_24")
        self.verticalLayout_37.addWidget(self.label_24)
        self.label_25 = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.label_25.setText("")
        self.label_25.setObjectName("label_25")
        self.verticalLayout_37.addWidget(self.label_25)
        self.label_26 = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.label_26.setText("")
        self.label_26.setObjectName("label_26")
        self.verticalLayout_37.addWidget(self.label_26)
        self.label_27 = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.label_27.setText("")
        self.label_27.setObjectName("label_27")
        self.verticalLayout_37.addWidget(self.label_27)
        self.label_28 = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.label_28.setText("")
        self.label_28.setObjectName("label_28")
        self.verticalLayout_37.addWidget(self.label_28)
        self.label_29 = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.label_29.setText("")
        self.label_29.setObjectName("label_29")
        self.verticalLayout_37.addWidget(self.label_29)
        self.label_30 = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.label_30.setText("")
        self.label_30.setObjectName("label_30")
        self.verticalLayout_37.addWidget(self.label_30)
        self.label_31 = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.label_31.setText("")
        self.label_31.setObjectName("label_31")
        self.verticalLayout_37.addWidget(self.label_31)
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.verticalLayout_36.addWidget(self.scrollArea)
        self.verticalLayout_10.addWidget(self.frame_47)
        self.appversion = QtWidgets.QLabel(self.main_footer)
        self.appversion.setMaximumSize(QtCore.QSize(16777215, 30))
        self.appversion.setStyleSheet("font: 8pt \"Times New Roman\";")
        self.appversion.setObjectName("appversion")
        self.verticalLayout_10.addWidget(self.appversion)
        self.verticalLayout.addWidget(self.main_footer)
        MainWindow.setCentralWidget(self.centralwidget)

        self.Logout_verification_widget.hide()
        self.counter=0

        self.retranslateUi(MainWindow)
        self.stackedWidget.setCurrentIndex(3)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.comboBox_2.hide()
        self.prod_mess_start_1_2.hide()
        self.comboBox.addItem("Vulkan")
        self.comboBox.addItem("Walkman")
        self.comboBox.addItem("Daimler")

        self.comboBox.activated[str].connect(self.onChanged)
        self.comboBox_2.activated[str].connect(self.onChanged)

        self.profile_icon_frame.hide()
        self.left_side_menu.hide()
        self.Date.hide()
        self.Time.hide()
        self.username_title.hide()
        self.main_footer.hide()

        # STACKED PAGES (DEFAUT /CURRENT PAGE)============================================
        #Set the page that will be visible by default when the app is opened 
        self.stackedWidget.setCurrentWidget(self.Login_page)
        
        # STACKED PAGES NAVIGATION============================================
        #Using side menu buttons
        #navigate to Home page
        self.home_button.clicked.connect(lambda: self.stackedWidget.setCurrentWidget(self.home_page))
        
        #navigate to Settings page
        self.settings_button.clicked.connect(lambda: self.stackedWidget.setCurrentWidget(self.settings_page))
      
        #model and navigation to Stats page================================
        self.createaccbutton.clicked.connect(lambda: self.stackedWidget.setCurrentWidget(self.SignUp_page))
        self.loginbutton.clicked.connect(self.loginfunction)
        self.signupbutton.clicked.connect(self.insertData)

        self.StartButton_VG.clicked.connect(self.imageVG)
        self.StatsVG_Button.clicked.connect(lambda: self.stackedWidget.setCurrentWidget(self.Statistics_VG))
        self.pushButton_2.clicked.connect(self.Model_VG)

        self.StartButton_VB.clicked.connect(self.imageVB)
        self.StatsVB_Button.clicked.connect(lambda: self.stackedWidget.setCurrentWidget(self.Statistics_VB))
        self.pushButton_6.clicked.connect(self.Model_VB)


        self.StartButton_VT.clicked.connect(self.imageVT)
        self.StatsVT_Button.clicked.connect(lambda: self.stackedWidget.setCurrentWidget(self.Statistics_VT))
        self.pushButton_7.clicked.connect(self.Model_VT)

        self.StartButton_W.clicked.connect(self.imageW)
        self.StatsW_Button.clicked.connect(lambda: self.stackedWidget.setCurrentWidget(self.Statistics_W))
        self.pushButton_8.clicked.connect(self.Model_W)

        #self.StartButton_D.clicked.connect(self.imageD)
        self.StatsD_Button.clicked.connect(lambda: self.stackedWidget.setCurrentWidget(self.Statistics_D))
        #self.pushButton_9.clicked.connect(self.Model_D)
        
        self.Logout__Button.clicked.connect(self.on_logout_button)
        self.pushButton.clicked.connect(self.logout)
        #self.pushButton_3.clicked.connect(self.logout)
        self.excel__Button_2.clicked.connect(self.excel_data)

    def loginfunction(self):
        Username = self.Email.text()
        Password = self.password.text()
        connection = sqlite3.connect("login.db")
        result = connection.execute("SELECT * FROM USERS WHERE USERNAME = ? AND PASSWORD = ?",(Username,Password))
        if(len(result.fetchall())>0):
            print("User Found")
            self.stackedWidget.setCurrentWidget(self.home_page)
            self.profile_icon_frame.show()
            self.left_side_menu.show()
            self.Date.show()
            self.Time.show()
            self.main_footer.show()
            self.username_title.show()
            self.username_title.setText(Username)
            self.username_settings.setText(Username)
            connection.close()
            
                        
        else:
            print("User Not Found")
            self.warning.setText('Warning! \nInvalid Username and Password')

    def insertData(self):
        Username = self.Email_2.text()
        Password = self.password_2.text()
        Confirmpassword = self.password_3.text()
        
        if Password==Confirmpassword:
            connection = sqlite3.connect("login.db")
            connection.execute("INSERT INTO USERS VALUES(?,?)",(Username,Password))
            connection.commit()
            print("Successfully created acc with email: ", Username, "and password: ", Password)
            self.stackedWidget.setCurrentWidget(self.Login_page)
            connection.close()

        else:
            self.Warninglabel.setText('Warning! \nPasswords do not match.')
    def excel_data(self):
        connection2 = sqlite3.connect("data.db")
        Username = self.Email.text()
        Password = self.password.text()
        date = self.Date.toPlainText()
        time= self.Time.toPlainText()
        product=self.comboBox.currentText()
        connection2.execute("INSERT INTO Data VALUES(?,?,?,?,?)",(Username,Password,date,time,product))
        connection2.commit()
        connection2.close()
        new_df = pd.read_sql("select * from Data", sqlite3.connect("data.db"))
        new_df.to_excel("out.xlsx")
        self.label_41.setText("Sucessfully saved an excel file (out)")
    

    def on_logout_button(self):
        self.Logout_verification_widget.show()
        self.logout_message.setText("Are you sure you want to exit the program?")
        
    def logout(self,text):
        print("GoodBye {}!")
        self.stackedWidget.setCurrentWidget(self.Login_page)
        self.Email.clear()
        self.password.clear()
        self.warning.setText('')
        self.profile_icon_frame.hide()
        self.left_side_menu.hide()
        self.Date.hide()
        self.Time.hide()
        self.username_title.hide()
        self.main_footer.hide()
        index = self.comboBox_2.findText("Vulkan Gray")
        self.comboBox_2.removeItem(index)
        index_1 = self.comboBox_2.findText("Vulkan Black")
        self.comboBox_2.removeItem(index_1)
        index_2 = self.comboBox_2.findText("Vulkan Transparent")
        self.comboBox_2.removeItem(index_2)
        index = self.comboBox_2.findText("Walkman Gray")
        self.comboBox_2.removeItem(index)
        index_1 = self.comboBox_2.findText("Walkman Black")
        self.comboBox_2.removeItem(index_1)
        index_2 = self.comboBox_2.findText("Walkman White")
        self.comboBox_2.removeItem(index_2)
        self.VG_tranche_1.hide()
        self.VG_tranche_2.hide()
        self.VG_tranche_3.hide()
        self.VG_tranche_4.hide()
        self.VG_tranche_5.hide()
        self.VG_tranche_6.hide()
        self.label_7.hide()
        self.label_8.hide()
        self.label_9.hide()
        self.T1_VG.hide()
        self.T2_VG.hide()
        self.T3_VG.hide()
        self.T4_VG.hide()
        self.T5_VG.hide()
        self.T6_VG.hide()
        self.T7_VG.hide()
        self.VB_tranche_1.hide()
        self.VB_tranche_2.hide()
        self.VB_tranche_3.hide()
        self.VB_tranche_4.hide()
        self.VB_tranche_5.hide()
        self.VB_tranche_6.hide()
        
        
        
        
        
        #Show Time============================================
    def showTime(self):
        currentTime = QTime.currentTime()
        displayTxt = currentTime.toString('hh:mm:ss')
        print(displayTxt)
        self.Time.setText(displayTxt)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.Date.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Siemens Sans Black\'; font-size:12pt; font-weight:400; font-style:normal;\">\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-family:\'MS Shell Dlg 2\'; font-size:8.25pt;\"><br /></p></body></html>"))
        DateTime=datetime.datetime.now()
        self.Date.setText('Date:%s/%s/%s' % (DateTime.day , DateTime.month, DateTime.year))
        self.home_button.setText(_translate("MainWindow", "HOME"))
        self.settings_button.setText(_translate("MainWindow", "SETTINGS"))
        self.label_33.setText(_translate("MainWindow", "Login"))
        self.createaccbutton.setText(_translate("MainWindow", "Create Account"))
        self.label_34.setText(_translate("MainWindow", "Don\'t have an account?"))
        self.label_35.setText(_translate("MainWindow", "Password"))
        self.label_36.setText(_translate("MainWindow", "Username"))
        self.loginbutton.setText(_translate("MainWindow", "Login"))
        self.label_37.setText(_translate("MainWindow", "Sign up"))
        self.signupbutton.setText(_translate("MainWindow", "Sign up"))
        self.label_38.setText(_translate("MainWindow", "Confirm Password"))
        self.label_39.setText(_translate("MainWindow", "Password"))
        self.label_40.setText(_translate("MainWindow", "Username"))
        self.Welcome_title.setText(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Times New Roman\'; font-size:24pt; font-weight:72; font-style:normal;\">\n"
"<p align=\"center\" style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">Welcome to our application</span></p></body></html>"))
        self.prod_mess_start.setText(_translate("MainWindow", "Please select one of the products to start:"))
        self.comboBox.setItemText(0, _translate("MainWindow", "Choose Products..."))
        self.prod_mess_start_1_2.setText(_translate("MainWindow", "Now select one of the type of the product and lets start:  "))
        self.comboBox_2.setItemText(0, _translate("MainWindow", "Choose Type of Product..."))
        self.label_32.setText(_translate("MainWindow", "Save as excel file"))
        self.excel__Button_2.setText(_translate("MainWindow", "Save"))
        self.Logout__Button.setText(_translate("MainWindow", "Logout"))
        self.pushButton.setText(_translate("MainWindow", "Yes"))
        self.pushButton_3.setText(_translate("MainWindow", "No"))
        self.VG_message_start.setText(_translate("MainWindow", "Click on the button Start to begin :"))
        self.StartButton_VG.setText(_translate("MainWindow", "Start"))
        self.statistics1.setText(_translate("MainWindow", "Statistics :"))
        self.StatsVG_Button.setText(_translate("MainWindow", "Stats"))
        self.pushButton_2.setText(_translate("MainWindow", "Display"))
        self.VB_message_start.setText(_translate("MainWindow", "Click on the button Start to begin :"))
        self.StartButton_VB.setText(_translate("MainWindow", "Start"))
        self.statistics2.setText(_translate("MainWindow", "Statistics :"))
        self.StatsVB_Button.setText(_translate("MainWindow", "Stats"))
        self.pushButton_6.setText(_translate("MainWindow", "Display"))
        self.VT_message_start.setText(_translate("MainWindow", "Click on the button Start to begin :"))
        self.StartButton_VT.setText(_translate("MainWindow", "Start"))
        self.statistics3.setText(_translate("MainWindow", "Statistics :"))
        self.StatsVT_Button.setText(_translate("MainWindow", "Stats"))
        self.pushButton_7.setText(_translate("MainWindow", "Display"))
        self.W_message_start.setText(_translate("MainWindow", "Click on the button Start to begin :"))
        self.StartButton_W.setText(_translate("MainWindow", "Start"))
        self.statistics4.setText(_translate("MainWindow", "Statistics :"))
        self.StatsW_Button.setText(_translate("MainWindow", "Stats"))
        self.pushButton_8.setText(_translate("MainWindow", "Display"))
        self.D_message_start.setText(_translate("MainWindow", "Click on the button Start to begin :"))
        self.StartButton_D.setText(_translate("MainWindow", "Start"))
        self.statistics5.setText(_translate("MainWindow", "Statistics :"))
        self.StatsD_Button.setText(_translate("MainWindow", "Stats"))
        self.pushButton_9.setText(_translate("MainWindow", "Display"))
        self.appversion.setText(_translate("MainWindow", "© Marquardt Tunisia v0.0"))

    def onChanged(self,text):
        if (text=="Vulkan"):
           self.Pic_1.setPixmap(QtGui.QPixmap(":/Vulkan/t-img-l-Kesselbedieneinheit-1320x836.jpg"))
           self.comboBox_2.show()
           self.prod_mess_start_1_2.show()
           index = self.comboBox_2.findText("Walkman Gray")
           self.comboBox_2.removeItem(index)
           index_1 = self.comboBox_2.findText("Walkman Black")
           self.comboBox_2.removeItem(index_1)
           index_2 = self.comboBox_2.findText("Walkman White")
           self.comboBox_2.removeItem(index_2)
           self.comboBox_2.addItem("Vulkan Gray")
           self.comboBox_2.addItem("Vulkan Black")
           self.comboBox_2.addItem("Vulkan Transparent")
        elif (text=="Vulkan Gray"):
           self.stackedWidget.setCurrentWidget(self.HomescreenVG)
           self.comboBox.setCurrentIndex(0)
           self.comboBox_2.setCurrentIndex(0)

        elif (text=="Vulkan Black"):
            self.stackedWidget.setCurrentWidget(self.HomescreenVB)
            self.comboBox.setCurrentIndex(0)
            self.comboBox_2.setCurrentIndex(0)
            
        elif (text=="Vulkan Transparent"):
            self.stackedWidget.setCurrentWidget(self.HomescreenVT)
            self.comboBox.setCurrentIndex(0)
            self.comboBox_2.setCurrentIndex(0)
            
        elif (text=="Walkman"):
            self.comboBox_2.show()
            self.prod_mess_start_1_2.show()
            self.Pic_1.setPixmap(QtGui.QPixmap(":/Walkman/Photo-0.jpg"))
            index = self.comboBox_2.findText("Vulkan Gray")
            self.comboBox_2.removeItem(index)
            index_1 = self.comboBox_2.findText("Vulkan Black")
            self.comboBox_2.removeItem(index_1)
            index_2 = self.comboBox_2.findText("Vulkan Transparent")
            self.comboBox_2.removeItem(index_2)
            self.comboBox_2.addItem("Walkman Gray")
            self.comboBox_2.addItem("Walkman Black")
            self.comboBox_2.addItem("Walkman White")
            
        elif (text=="Walkman White"):
            self.stackedWidget.setCurrentWidget(self.HomescreenW)
            self.comboBox.setCurrentIndex(0)
            self.comboBox_2.setCurrentIndex(0)
            
        elif (text=="Daimler"):
            self.Pic_1.setPixmap(QtGui.QPixmap(":/Daimler/image003.png"))
            self.stackedWidget.setCurrentWidget(self.HomescreenD)
            self.comboBox.setCurrentIndex(0)
            self.comboBox_2.setCurrentIndex(0)
            self.comboBox_2.hide()
            self.prod_mess_start_1_2.hide()

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
